digraph ar2dtool_diagram { 
rankdir=LR;
size="1501"
node [shape = rectangle, color="orange"]; "ml:SilhouetteSamples" "ml:OneHotEncoder" "ml:MultilabelConfusionMatrix" "ml:LinearRegression" "ml:LeastAngleRegression" "ml:OneVsOneClassifier" "ml:DetCurve" "ml:MLPRegressor" "ml:TopKAccuracyScore" "ml:ValidationCurveDisplay" "ml:StratifiedShuffleSplit" "ml:SVR" "ml:Lasso" "ml:GradientBoostingModule" "ml:OPTICS" "ml:OrthogonalMatchingPursuit" "ml:MatthewsCorrcoef" "ml:BernoulliNB" "ml:SilhouetteScore" "ml:PowerTransformer" "ml:EuclideanDistances" "ml:MultilabelClassification" "ml:NaiveBayesModule" "ml:KFold" "ml:BayesianRidge" "ml:AffinityPropagation" "ml:LearningCurve" "ml:D2AbsoluteErrorScore" "ml:ARDRegression" "ml:ExplainedVarianceScore" "ml:BaggingClassifier" "ml:OrdinalEncoder" "ml:MeanPoissonDeviance" "ml:SupportVectorRegression" "ml:RandomForestClassifier" "ml:HdbscanModule" "ml:AveragePrecisionScore" "ml:LinearModelModule" "ml:KNeighborsRegressor" "ml:LatentDirichletAllocation" "ml:KNeighborsClassifier" "ml:GlmModule" "ml:RandomTreesEmbedding" "ml:D2TweedieScore" "ml:GaussianNB" "ml:MeanTweedieDeviance" "ml:RepeatedStratifiedKFold" "ml:FeatureExtractionModule" "ml:EnsembleModule" "ml:ExtraTreeClassifier" "ml:SimpleRegression" "ml:StackingRegressor" "ml:RobustScaler" "ml:DecisionTreeRegression" "ml:FowlkesMallowsScore" "ml:GradientBoostingRegressor" "ml:AgglomerativeClustering" "ml:MeanGammaDeviance" "ml:QuantileTransformer" "ml:RepeatedKFold" "ml:OneClassSVM" "ml:HistGradientBoostingClassifier" "ml:CoverageError" "ml:MiniBatchNMF" "ml:MedianAbsoluteError" "ml:MultiTaskLassoCV" "ml:KMeans" "ml:TimeSeriesSplit" "ml:SparsePCA" "ml:Perceptron" "ml:TruncatedSVD" "ml:BrierScoreLoss" "ml:RecallScore" "ml:VotingRegressor" "ml:PreprocessingModule" "ml:GetScorerNames" "ml:ClusterModule" "ml:SGDClassifier" "ml:Decomposition" "ml:PairwiseKernels" "ml:DaviesBouldinScore" "ml:MulticlassClassification" "ml:CategoricalNB" "ml:MeanPinballLoss" "ml:NormalizedMutualInfoScore" "ml:MultiTaskLasso" "ml:LabelBinarizer" "ml:LassoCV" "ml:TrainTestSplit" "ml:PassiveAggressiveRegressor" "ml:BinaryClassification" "ml:BaggingRegressor" "ml:RANSACRegressor" "ml:AdaBoostRegressor" "ml:MeanSquaredLogError" "ml:StratifiedKFold" "ml:IncrementalPCA" "ml:DBSCAN" "ml:MeanAbsolutePercentageError" "ml:AccuracyScore" "ml:MiniBatchDictionaryLearning" "ml:Lars" "ml:NanEuclideanDistances" "ml:Birch" "ml:MaxError" "ml:SVC" "ml:MultiTaskElasticNetCV" "ml:RocAucScore" "ml:LogLoss" "ml:OneVsRestClassifier" "ml:ElasticNet" "ml:NuSVC" "ml:ClassLikelihoodRatios" "ml:JaccardScore" "ml:CohenKappaScore" "ml:AdjustedRandScore" "ml:RidgeClassifier" "ml:HingeLoss" "ml:PrecisionScore" "ml:GroupShuffleSplit" "ml:HistGradientBoostingRegressor" "ml:GradientBoostingClassifier" "ml:RadiusNeighborsClassifier" "ml:NeighborsModule" "ml:CrossValScore" "ml:StandardScaler" "ml:NeuralNetworkModule" "ml:OutputCodeClassifier" "ml:PermutationTestScore" "ml:ModelSelectionModule" "ml:PairwiseDistancesArgminMin" "ml:PrecisionRecallCurve" "ml:CheckScoring" "ml:PairConfusionMatrix" "ml:VMeasureScore" "ml:D2PinballScore" "ml:DataProcessing" "ml:LassoLars" "ml:DictionaryLearning" "ml:KBinsDiscretizer" "ml:HammingLoss" "ml:LearningCurveDisplay" "ml:HuberRegressor" "ml:LassoLarsIC" "ml:FbetaScore" "ml:PairwiseDistancesArgmin" "ml:PassiveAggressiveClassifier" "ml:RandScore" "ml:F1Score" "ml:LocalOutlierFactor" "ml:CrossValPredict" "ml:KernelDensity" "ml:CrossValidate" "ml:PCA" "ml:FeatureAgglomeration" "ml:ConfusionMatrix" "ml:Auc" "ml:R2Score" "ml:MeanAbsoluteError" "ml:PredefinedSplit" "ml:HomogeneityCompletenessVMeasure" "ml:Normalizer" "ml:BoostingRegression" "ml:CheckCv" "ml:PerformanceCalculation" "ml:FeatureHasher" "ml:MiniBatchKMeans" "ml:NuSVR" "ml:StratifiedGroupKFold" "ml:MakeScorer" "ml:MeanSquaredError" "ml:DecisionTreeClassifier" "ml:PairwiseDistances" "ml:QuantileRegressor" "ml:ValidationCurve" "ml:ElasticNetCV" "ml:RidgeCV" "ml:GammaRegressor" "ml:RegularizedRegression" "ml:ShuffleSplit" "ml:ExtraTreeRegressor" "ml:ZeroOneLoss" "ml:InstanceBasedRegression" "ml:TheilSenRegressor" "ml:TreeModule" "ml:SpectralCoclustering" "ml:ExtraTreesRegressor" "ml:DataSplitting" "ml:LabelRankingAveragePrecisionScore" "ml:PolynomialFeatures" "ml:RocCurve" "ml:SvmModule" "ml:OrthogonalMatchingPursuitCV" "ml:ConsensusScore" "ml:HDBSCAN" "ml:VotingClassifier" "ml:GetScorer" "ml:MLPClassifier" "ml:FactorAnalysis" "ml:IsolationForest" "ml:PoissonRegressor" "ml:MaxAbsScaler" "ml:MultiLabelBinarizer" "ml:AdjustedMutualInfoScore" "ml:DecisionTreeRegressor" "ml:MultinomialNB" "ml:LogisticRegression" "ml:FastICA" "ml:MultiTaskElasticNet" "ml:RadiusNeighborsRegressor" "ml:LassoLarsCV" "ml:TweedieRegressor" "ml:LinearSVC" "ml:FunctionTransformer" "ml:LarsCV" "ml:SparseCoder" "ml:KernelCenterer" "ml:KernelPCA" "ml:StackingClassifier" "ml:SpectralClustering" "ml:GroupKFold" "ml:AdaBoostClassifier" "ml:CompletenessScore" "ml:MetricsModule" "ml:RandomForestRegressor" "ml:MeanShift" "ml:MiniBatchSparsePCA" "ml:Ridge" "ml:BernoulliRBM" "ml:HomogeneityScore" "ml:BalancedAccuracyScore" "ml:PairwiseDistancesChunked" "ml:DcgScore" "ml:LabelRankingLoss" "ml:LinearSVR" "ml:SGDOneClassSVM" "ml:ComplementNB" "ml:RootMeanSquaredError" "ml:CalinskiHarabaszScore" "ml:BisectingKMeans" "ml:DictVectorizer" "ml:BayesianRegression" "ml:LeavePOut" "ml:SplineTransformer" "ml:RandomForestRegression" "ml:NeighborhoodComponentsAnalysis" "ml:MutualInfoScore" "ml:LogisticRegressionCV" "ml:KNeighborsTransformer" "ml:MinMaxScaler" "ml:NearestNeighbors" "ml:TargetEncoder" "ml:RidgeClassifierCV" "ml:RadiusNeighborsTransformer" "ml:ExtraTreesClassifier" "ml:NMF" "ml:NearestCentroid" "ml:PrecisionRecallFscoreSupport" "ml:LeavePGroupsOut" "ml:RootMeanSquaredLogError" "ml:NdcgScore" "ml:SGDRegressor" "ml:DecompositionModule" "ml:ClassificationReport" "ml:Binarizer" "ml:SpectralBiclustering" "ml:Clustering" "ml:MulticlassModule" ; /*classes style*/
	"ml:hasParamRemoveZeroEig" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:PrecisionRecallFscoreSupport" -> "ml:MetricsModule" [ label = "ds:hasModule" ];
	"ml:hasParamPoolingFunc" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:LassoLarsIC" -> "ml:LinearModelModule" [ label = "ds:hasModule" ];
	"ml:AdaBoostClassifier" -> "ml:EnsembleModule" [ label = "ds:hasModule" ];
	"ml:hasParamAffinity" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamWhitenSolver" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:MiniBatchNMF" -> "ml:DecompositionModule" [ label = "ds:hasModule" ];
	"ml:hasParamMiniBatch" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasSupportVectorRegressionMethod" -> "ml:hasTrainMethod" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamLambda1" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:NMF" -> "ml:DecompositionModule" [ label = "ds:hasModule" ];
	"ml:Birch" -> "ml:ClusterModule" [ label = "ds:hasModule" ];
	"ml:hasParamBeta1" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:TweedieRegressor" -> "ml:LinearModelModule" [ label = "ds:hasModule" ];
	"ml:TweedieRegressor" -> "ml:GlmModule" [ label = "ds:hasModule" ];
	"ml:hasParamWhiten" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:F1Score" -> "ml:MetricsModule" [ label = "ds:hasModule" ];
	"ml:hasParamDistanceThreshold" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:CohenKappaScore" -> "ml:MetricsModule" [ label = "ds:hasModule" ];
	"ml:DaviesBouldinScore" -> "ml:MetricsModule" [ label = "ds:hasModule" ];
	"ml:hasParamMetricParams" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:StackingClassifier" -> "ml:EnsembleModule" [ label = "ds:hasModule" ];
	"ml:hasParamResidualThreshold" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasInstanceBasedRegressionMethod" -> "ml:hasTrainMethod" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamMinFrequency" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:RandomTreesEmbedding" -> "ml:EnsembleModule" [ label = "ds:hasModule" ];
	"ml:hasParamOutputDistribution" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamGcvMode" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:MultiTaskLasso" -> "ml:LinearModelModule" [ label = "ds:hasModule" ];
	"ml:RadiusNeighborsRegressor" -> "ml:NeighborsModule" [ label = "ds:hasModule" ];
	"ml:hasParamStopNInliers" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:PairwiseDistances" -> "ml:MetricsModule" [ label = "ds:hasModule" ];
	"ml:hasParamWeights" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamKernelParams" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasPerformanceCalculationMethod" -> "ml:hasPerformanceCalculationMethod" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamNoiseVariance" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamMaxTrainSize" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:SVR" -> "ml:SvmModule" [ label = "ds:hasModule" ];
	"ml:hasParamAtol" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamL1Ratio" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamVarSmoothing" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:LocalOutlierFactor" -> "ml:NeighborsModule" [ label = "ds:hasModule" ];
	"ml:PairwiseDistancesArgminMin" -> "ml:MetricsModule" [ label = "ds:hasModule" ];
	"ml:hasDataSplittingMethod" -> "ml:hasDataSplittingMethod" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamOutlierLabel" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamLogBase" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamLeafSize" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:MeanAbsoluteError" -> "ml:MetricsModule" [ label = "ds:hasModule" ];
	"ml:hasParamTestSize" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamBisectingStrategy" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamEta0" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamAlgorithm" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamExtrapolation" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamB" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:ShuffleSplit" -> "ml:ModelSelectionModule" [ label = "ds:hasModule" ];
	"ml:hasParamPositive" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamNSubsamples" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamDrop" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamWithCentering" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamMemory" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:MultinomialNB" -> "ml:NaiveBayesModule" [ label = "ds:hasModule" ];
	"ml:hasParamConvergenceIter" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:ValidationCurveDisplay" -> "ml:ModelSelectionModule" [ label = "ds:hasModule" ];
	"ml:hasParamMinCategories" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamSvdSolver" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamClusterAll" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:SilhouetteScore" -> "ml:MetricsModule" [ label = "ds:hasModule" ];
	"ml:hasParamBootstrapFeatures" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamReassignmentRatio" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamFitInverseTransform" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:GaussianNB" -> "ml:NaiveBayesModule" [ label = "ds:hasModule" ];
	"ml:hasParamIncludeBias" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamOutputDict" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamSampleSize" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamStrategy" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamAllowNone" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:SGDRegressor" -> "ml:LinearModelModule" [ label = "ds:hasModule" ];
	"ml:PassiveAggressiveRegressor" -> "ml:LinearModelModule" [ label = "ds:hasModule" ];
	"ml:hasParamInputType" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:ExtraTreeClassifier" -> "ml:TreeModule" [ label = "ds:hasModule" ];
	"ml:hasParamLink" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamPenalty" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamUnitVariance" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamMaxSamples" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamMaxLeafNodes" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamNSplits" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:StratifiedShuffleSplit" -> "ml:ModelSelectionModule" [ label = "ds:hasModule" ];
	"ml:hasParamTransformAlpha" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:SpectralCoclustering" -> "ml:ClusterModule" [ label = "ds:hasModule" ];
	"ml:hasParamReturnTrainScore" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:OrthogonalMatchingPursuit" -> "ml:LinearModelModule" [ label = "ds:hasModule" ];
	"ml:Normalizer" -> "ml:PreprocessingModule" [ label = "ds:hasModule" ];
	"ml:hasParamMinImpurityDecrease" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:OneClassSVM" -> "ml:SvmModule" [ label = "ds:hasModule" ];
	"ml:hasParamCategoricalFeatures" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:NuSVC" -> "ml:SvmModule" [ label = "ds:hasModule" ];
	"ml:hasParamCallback" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamCodeInit" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamTransformAlgorithm" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:AdjustedRandScore" -> "ml:MetricsModule" [ label = "ds:hasModule" ];
	"ml:hasParamMaxNoImprovement" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:PoissonRegressor" -> "ml:LinearModelModule" [ label = "ds:hasModule" ];
	"ml:PoissonRegressor" -> "ml:GlmModule" [ label = "ds:hasModule" ];
	"ml:LabelRankingLoss" -> "ml:MetricsModule" [ label = "ds:hasModule" ];
	"ml:PolynomialFeatures" -> "ml:PreprocessingModule" [ label = "ds:hasModule" ];
	"ml:hasParamNRepeats" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:D2TweedieScore" -> "ml:MetricsModule" [ label = "ds:hasModule" ];
	"ml:hasParamWarnFor" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamCs" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamParamName" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamInteractionCst" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamAdjusted" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:KernelDensity" -> "ml:NeighborsModule" [ label = "ds:hasModule" ];
	"ml:hasParamNIterNoChange" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamSmooth" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamFlattenTransform" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamLambda2" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamScoreName" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamScoreFunc" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:MeanPoissonDeviance" -> "ml:MetricsModule" [ label = "ds:hasModule" ];
	"ml:hasParamBeta2" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamCategories" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamMaxTrials" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:CrossValPredict" -> "ml:ModelSelectionModule" [ label = "ds:hasModule" ];
	"ml:RidgeClassifierCV" -> "ml:LinearModelModule" [ label = "ds:hasModule" ];
	"ml:hasParamMaxIter" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:GetScorer" -> "ml:MetricsModule" [ label = "ds:hasModule" ];
	"ml:hasParamRtol" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamWInit" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamWarmStart" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamValidationFraction" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamShuffle" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:VotingRegressor" -> "ml:EnsembleModule" [ label = "ds:hasModule" ];
	"ml:ClassLikelihoodRatios" -> "ml:MetricsModule" [ label = "ds:hasModule" ];
	"ml:SpectralBiclustering" -> "ml:ClusterModule" [ label = "ds:hasModule" ];
	"ml:hasParamNSvdVecs" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:LinearRegression" -> "ml:LinearModelModule" [ label = "ds:hasModule" ];
	"ml:hasParamReduceFunc" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamKernel" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamForceAlpha" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamTrainSize" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:StackingRegressor" -> "ml:EnsembleModule" [ label = "ds:hasModule" ];
	"ml:hasParamParams" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamNorm" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:D2AbsoluteErrorScore" -> "ml:MetricsModule" [ label = "ds:hasModule" ];
	"ml:AgglomerativeClustering" -> "ml:ClusterModule" [ label = "ds:hasModule" ];
	"ml:hasParamNEstimators" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamGamma" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:MeanShift" -> "ml:ClusterModule" [ label = "ds:hasModule" ];
	"ml:hasParamMaxCategories" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamStandardize" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamMinBinFreq" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamShrinkThreshold" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:KMeans" -> "ml:ClusterModule" [ label = "ds:hasModule" ];
	"ml:PairwiseDistancesChunked" -> "ml:MetricsModule" [ label = "ds:hasModule" ];
	"ml:hasParamNInit" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:GradientBoostingClassifier" -> "ml:EnsembleModule" [ label = "ds:hasModule" ];
	"ml:hasParamAlpha" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamNQuantiles" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamCodeSize" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:PowerTransformer" -> "ml:PreprocessingModule" [ label = "ds:hasModule" ];
	"ml:MinMaxScaler" -> "ml:PreprocessingModule" [ label = "ds:hasModule" ];
	"ml:hasParamWithMean" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamAlphaW" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:StratifiedKFold" -> "ml:ModelSelectionModule" [ label = "ds:hasModule" ];
	"ml:TrainTestSplit" -> "ml:ModelSelectionModule" [ label = "ds:hasModule" ];
	"ml:hasSimpleRegressionMethod" -> "ml:hasTrainMethod" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamEarlyStopping" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamC" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:RepeatedStratifiedKFold" -> "ml:ModelSelectionModule" [ label = "ds:hasModule" ];
	"ml:hasParamCheckInverse" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamNNeighbors" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamJitter" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamPositiveDict" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamNGroups" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamBatchSize" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:JaccardScore" -> "ml:MetricsModule" [ label = "ds:hasModule" ];
	"ml:DictVectorizer" -> "ml:FeatureExtractionModule" [ label = "ds:hasModule" ];
	"ml:hasParamPowerT" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:StandardScaler" -> "ml:PreprocessingModule" [ label = "ds:hasModule" ];
	"ml:PermutationTestScore" -> "ml:ModelSelectionModule" [ label = "ds:hasModule" ];
	"ml:hasParamAlphaInit" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:DictionaryLearning" -> "ml:DecompositionModule" [ label = "ds:hasModule" ];
	"ml:hasParamFitPath" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamSeparator" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamNNonzeroCoefs" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamProbability" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:DecisionTreeClassifier" -> "ml:TreeModule" [ label = "ds:hasModule" ];
	"ml:RANSACRegressor" -> "ml:LinearModelModule" [ label = "ds:hasModule" ];
	"ml:hasParamRidgeAlpha" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:MultiLabelBinarizer" -> "ml:PreprocessingModule" [ label = "ds:hasModule" ];
	"ml:hasParamTransformNNonzeroCoefs" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:EuclideanDistances" -> "ml:MetricsModule" [ label = "ds:hasModule" ];
	"ml:MultilabelConfusionMatrix" -> "ml:MetricsModule" [ label = "ds:hasModule" ];
	"ml:hasParamAssignLabels" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:SVC" -> "ml:SvmModule" [ label = "ds:hasModule" ];
	"ml:hasParamMaxBins" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamAlpha1" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamDigits" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:MutualInfoScore" -> "ml:MetricsModule" [ label = "ds:hasModule" ];
	"ml:ExtraTreesRegressor" -> "ml:EnsembleModule" [ label = "ds:hasModule" ];
	"ml:GroupShuffleSplit" -> "ml:ModelSelectionModule" [ label = "ds:hasModule" ];
	"ml:LatentDirichletAllocation" -> "ml:DecompositionModule" [ label = "ds:hasModule" ];
	"ml:hasBoostingRegressionMethod" -> "ml:hasTrainMethod" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamMaxFun" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamDtype" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamBranchingFactor" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamNormalize" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamPerpTol" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamLambdaInit" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamFeatureNamesOut" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamCcpAlpha" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:PrecisionScore" -> "ml:MetricsModule" [ label = "ds:hasModule" ];
	"ml:LinearSVR" -> "ml:SvmModule" [ label = "ds:hasModule" ];
	"ml:LarsCV" -> "ml:LinearModelModule" [ label = "ds:hasModule" ];
	"ml:hasParamSolver" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:RepeatedKFold" -> "ml:ModelSelectionModule" [ label = "ds:hasModule" ];
	"ml:hasParamMaxEps" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamEncodedMissingValue" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamVInit" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:NdcgScore" -> "ml:MetricsModule" [ label = "ds:hasModule" ];
	"ml:KernelCenterer" -> "ml:PreprocessingModule" [ label = "ds:hasModule" ];
	"ml:hasParamLoss" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:KFold" -> "ml:ModelSelectionModule" [ label = "ds:hasModule" ];
	"ml:hasParamOrder" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:Perceptron" -> "ml:LinearModelModule" [ label = "ds:hasModule" ];
	"ml:NearestCentroid" -> "ml:NeighborsModule" [ label = "ds:hasModule" ];
	"ml:hasParamFitAlgorithm" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamAlphas" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:FeatureHasher" -> "ml:FeatureExtractionModule" [ label = "ds:hasModule" ];
	"ml:hasParamClusterSelectionMethod" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:MiniBatchKMeans" -> "ml:ClusterModule" [ label = "ds:hasModule" ];
	"ml:LearningCurveDisplay" -> "ml:ModelSelectionModule" [ label = "ds:hasModule" ];
	"ml:MeanAbsolutePercentageError" -> "ml:MetricsModule" [ label = "ds:hasModule" ];
	"ml:MiniBatchSparsePCA" -> "ml:DecompositionModule" [ label = "ds:hasModule" ];
	"ml:BaggingClassifier" -> "ml:EnsembleModule" [ label = "ds:hasModule" ];
	"ml:hasParamFitPrior" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:CompletenessScore" -> "ml:MetricsModule" [ label = "ds:hasModule" ];
	"ml:hasParamInverseFunc" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamBetaLoss" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamKnots" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamSparseOutput" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamSimilarity" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:HingeLoss" -> "ml:MetricsModule" [ label = "ds:hasModule" ];
	"ml:Auc" -> "ml:MetricsModule" [ label = "ds:hasModule" ];
	"ml:ClassificationReport" -> "ml:MetricsModule" [ label = "ds:hasModule" ];
	"ml:hasParamSplitter" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:SGDOneClassSVM" -> "ml:LinearModelModule" [ label = "ds:hasModule" ];
	"ml:LogisticRegression" -> "ml:LinearModelModule" [ label = "ds:hasModule" ];
	"ml:hasParamMinClusterSize" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamDropIntermediate" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamTrainScores" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamFitParams" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:FbetaScore" -> "ml:MetricsModule" [ label = "ds:hasModule" ];
	"ml:hasParamEigenTol" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:AccuracyScore" -> "ml:MetricsModule" [ label = "ds:hasModule" ];
	"ml:LabelRankingAveragePrecisionScore" -> "ml:MetricsModule" [ label = "ds:hasModule" ];
	"ml:hasParamComputeDistances" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:FunctionTransformer" -> "ml:PreprocessingModule" [ label = "ds:hasModule" ];
	"ml:hasParamContamination" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:RidgeCV" -> "ml:LinearModelModule" [ label = "ds:hasModule" ];
	"ml:CategoricalNB" -> "ml:NaiveBayesModule" [ label = "ds:hasModule" ];
	"ml:hasParamFunc" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:ElasticNetCV" -> "ml:LinearModelModule" [ label = "ds:hasModule" ];
	"ml:hasParamMaxDocUpdateIter" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:VMeasureScore" -> "ml:MetricsModule" [ label = "ds:hasModule" ];
	"ml:BisectingKMeans" -> "ml:ClusterModule" [ label = "ds:hasModule" ];
	"ml:hasParamEncode" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamLearningMethod" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamSamplewise" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamIteratedPower" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:KNeighborsClassifier" -> "ml:NeighborsModule" [ label = "ds:hasModule" ];
	"ml:hasParamNesterovsMomentum" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:TopKAccuracyScore" -> "ml:MetricsModule" [ label = "ds:hasModule" ];
	"ml:RidgeClassifier" -> "ml:LinearModelModule" [ label = "ds:hasModule" ];
	"ml:IsolationForest" -> "ml:EnsembleModule" [ label = "ds:hasModule" ];
	"ml:HuberRegressor" -> "ml:LinearModelModule" [ label = "ds:hasModule" ];
	"ml:hasParamWorkingMemory" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamFeatureRange" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamResponseMethod" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:SparsePCA" -> "ml:DecompositionModule" [ label = "ds:hasModule" ];
	"ml:hasParamPower" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamFeatureNameCombiner" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:PrecisionRecallCurve" -> "ml:MetricsModule" [ label = "ds:hasModule" ];
	"ml:hasParamBreakTies" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:KNeighborsRegressor" -> "ml:NeighborsModule" [ label = "ds:hasModule" ];
	"ml:hasParamSplitSign" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:MaxError" -> "ml:MetricsModule" [ label = "ds:hasModule" ];
	"ml:TheilSenRegressor" -> "ml:LinearModelModule" [ label = "ds:hasModule" ];
	"ml:hasParamAverage" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamInterceptScaling" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamBinSeeding" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamQuantileRange" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:R2Score" -> "ml:MetricsModule" [ label = "ds:hasModule" ];
	"ml:hasParamClusterSelectionEpsilon" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:LogisticRegressionCV" -> "ml:LinearModelModule" [ label = "ds:hasModule" ];
	"ml:CoverageError" -> "ml:MetricsModule" [ label = "ds:hasModule" ];
	"ml:hasParamKwArgs" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamL2Regularization" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamWithStd" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:D2PinballScore" -> "ml:MetricsModule" [ label = "ds:hasModule" ];
	"ml:SilhouetteSamples" -> "ml:MetricsModule" [ label = "ds:hasModule" ];
	"ml:hasParamEstimator" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:LassoLarsCV" -> "ml:LinearModelModule" [ label = "ds:hasModule" ];
	"ml:hasParamAlpha2" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamPreDispatch" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:OutputCodeClassifier" -> "ml:MulticlassModule" [ label = "ds:hasModule" ];
	"ml:hasParamLinkage" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamHandleUnknown" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:GroupKFold" -> "ml:ModelSelectionModule" [ label = "ds:hasModule" ];
	"ml:hasParamMonotonicCst" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:Binarizer" -> "ml:PreprocessingModule" [ label = "ds:hasModule" ];
	"ml:Lasso" -> "ml:LinearModelModule" [ label = "ds:hasModule" ];
	"ml:MeanPinballLoss" -> "ml:MetricsModule" [ label = "ds:hasModule" ];
	"ml:ConsensusScore" -> "ml:MetricsModule" [ label = "ds:hasModule" ];
	"ml:hasParamAlphaH" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamConnectivity" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:KNeighborsTransformer" -> "ml:NeighborsModule" [ label = "ds:hasModule" ];
	"ml:SplineTransformer" -> "ml:PreprocessingModule" [ label = "ds:hasModule" ];
	"ml:DBSCAN" -> "ml:ClusterModule" [ label = "ds:hasModule" ];
	"ml:Ridge" -> "ml:LinearModelModule" [ label = "ds:hasModule" ];
	"ml:NormalizedMutualInfoScore" -> "ml:MetricsModule" [ label = "ds:hasModule" ];
	"ml:hasParamNBins" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamDecisionFunctionShape" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasMulticlassClassificationMethod" -> "ml:hasTrainMethod" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamNeedsProba" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamMetric" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:HDBSCAN" -> "ml:HdbscanModule" [ label = "ds:hasModule" ];
	"ml:HDBSCAN" -> "ml:ClusterModule" [ label = "ds:hasModule" ];
	"ml:GetScorerNames" -> "ml:MetricsModule" [ label = "ds:hasModule" ];
	"ml:hasParamFunArgs" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:SparseCoder" -> "ml:DecompositionModule" [ label = "ds:hasModule" ];
	"ml:hasParamPredecessorCorrection" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamBeta" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamLearningOffset" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:ConfusionMatrix" -> "ml:MetricsModule" [ label = "ds:hasModule" ];
	"ml:hasParamAcceptSparse" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamNPermutations" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamRaiseWarning" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamIsDataValid" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:FastICA" -> "ml:DecompositionModule" [ label = "ds:hasModule" ];
	"ml:hasParamCoef0" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamMissingValues" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamSparse" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:AdaBoostRegressor" -> "ml:EnsembleModule" [ label = "ds:hasModule" ];
	"ml:hasParamIgnoreImplicitZeros" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:TruncatedSVD" -> "ml:DecompositionModule" [ label = "ds:hasModule" ];
	"ml:hasParamNComponents" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamStopScore" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamForgetFactor" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:IncrementalPCA" -> "ml:DecompositionModule" [ label = "ds:hasModule" ];
	"ml:LinearSVC" -> "ml:SvmModule" [ label = "ds:hasModule" ];
	"ml:FowlkesMallowsScore" -> "ml:MetricsModule" [ label = "ds:hasModule" ];
	"ml:LabelBinarizer" -> "ml:PreprocessingModule" [ label = "ds:hasModule" ];
	"ml:HammingLoss" -> "ml:MetricsModule" [ label = "ds:hasModule" ];
	"ml:hasParamSort" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:PassiveAggressiveClassifier" -> "ml:LinearModelModule" [ label = "ds:hasModule" ];
	"ml:PCA" -> "ml:DecompositionModule" [ label = "ds:hasModule" ];
	"ml:MLPClassifier" -> "ml:NeuralNetworkModule" [ label = "ds:hasModule" ];
	"ml:hasParamMeanChangeTol" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamRandomState" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamForceAllFinite" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:DetCurve" -> "ml:MetricsModule" [ label = "ds:hasModule" ];
	"ml:CheckCv" -> "ml:ModelSelectionModule" [ label = "ds:hasModule" ];
	"ml:hasParamComputeScore" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamUnknownValue" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:MiniBatchDictionaryLearning" -> "ml:DecompositionModule" [ label = "ds:hasModule" ];
	"ml:hasParamSubsample" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamFreshRestartsMaxIter" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamGap" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:HomogeneityCompletenessVMeasure" -> "ml:MetricsModule" [ label = "ds:hasModule" ];
	"ml:hasParamMultiClass" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasBinaryClassificationMethod" -> "ml:hasTrainMethod" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamAlternateSign" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:CrossValScore" -> "ml:ModelSelectionModule" [ label = "ds:hasModule" ];
	"ml:hasParamMomentum" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamP" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:BayesianRidge" -> "ml:LinearModelModule" [ label = "ds:hasModule" ];
	"ml:hasParamReturnTimes" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:QuantileTransformer" -> "ml:PreprocessingModule" [ label = "ds:hasModule" ];
	"ml:hasParamClassWeight" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:ExtraTreeRegressor" -> "ml:TreeModule" [ label = "ds:hasModule" ];
	"ml:hasParamAxis" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamTestScores" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:SpectralClustering" -> "ml:ClusterModule" [ label = "ds:hasModule" ];
	"ml:NeighborhoodComponentsAnalysis" -> "ml:NeighborsModule" [ label = "ds:hasModule" ];
	"ml:hasParamTol" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamFitIntercept" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamMode" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamPosLabel" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:RandomForestClassifier" -> "ml:EnsembleModule" [ label = "ds:hasModule" ];
	"ml:hasParamNFeatures" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamNIter" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:BernoulliRBM" -> "ml:NeuralNetworkModule" [ label = "ds:hasModule" ];
	"ml:Lars" -> "ml:LinearModelModule" [ label = "ds:hasModule" ];
	"ml:PairwiseDistancesArgmin" -> "ml:MetricsModule" [ label = "ds:hasModule" ];
	"ml:hasParamDictionary" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamBinarize" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamInteractionOnly" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamBandwidth" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasRegularizedRegressionMethod" -> "ml:hasTrainMethod" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamPreference" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamComputeFullTree" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:BalancedAccuracyScore" -> "ml:MetricsModule" [ label = "ds:hasModule" ];
	"ml:CalinskiHarabaszScore" -> "ml:MetricsModule" [ label = "ds:hasModule" ];
	"ml:hasParamClusterMethod" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamDictInit" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:LeavePGroupsOut" -> "ml:ModelSelectionModule" [ label = "ds:hasModule" ];
	"ml:hasParamValidate" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:PairConfusionMatrix" -> "ml:MetricsModule" [ label = "ds:hasModule" ];
	"ml:BrierScoreLoss" -> "ml:MetricsModule" [ label = "ds:hasModule" ];
	"ml:TargetEncoder" -> "ml:PreprocessingModule" [ label = "ds:hasModule" ];
	"ml:HomogeneityScore" -> "ml:MetricsModule" [ label = "ds:hasModule" ];
	"ml:hasRandomForestRegressionMethod" -> "ml:hasTrainMethod" [ label = "rdfs:subPropertyOf" ];
	"ml:hasClusteringMethod" -> "ml:hasTrainMethod" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamIsModelValid" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamAllowSingleCluster" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamK" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamTransformMaxIter" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamCv" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamSvdMethod" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:RocCurve" -> "ml:MetricsModule" [ label = "ds:hasModule" ];
	"ml:hasParamMinSamples" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamNBest" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasDecompositionMethod" -> "ml:hasPrepareTransformerMethod" [ label = "rdfs:subPropertyOf" ];
	"ml:RootMeanSquaredLogError" -> "ml:MetricsModule" [ label = "ds:hasModule" ];
	"ml:hasParamActivation" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:NanEuclideanDistances" -> "ml:MetricsModule" [ label = "ds:hasModule" ];
	"ml:hasParamUInit" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:RobustScaler" -> "ml:PreprocessingModule" [ label = "ds:hasModule" ];
	"ml:hasParamStratify" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamEstimators" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:TimeSeriesSplit" -> "ml:ModelSelectionModule" [ label = "ds:hasModule" ];
	"ml:KBinsDiscretizer" -> "ml:PreprocessingModule" [ label = "ds:hasModule" ];
	"ml:RandScore" -> "ml:MetricsModule" [ label = "ds:hasModule" ];
	"ml:hasParamAverageMethod" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasMultilabelClassificationMethod" -> "ml:hasTrainMethod" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamSeeds" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamGreaterIsBetter" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:AveragePrecisionScore" -> "ml:MetricsModule" [ label = "ds:hasModule" ];
	"ml:hasParamLearningDecay" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:MakeScorer" -> "ml:MetricsModule" [ label = "ds:hasModule" ];
	"ml:hasParamNClusters" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:MaxAbsScaler" -> "ml:PreprocessingModule" [ label = "ds:hasModule" ];
	"ml:hasParamSquared" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamPredDecision" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:MLPRegressor" -> "ml:NeuralNetworkModule" [ label = "ds:hasModule" ];
	"ml:RecallScore" -> "ml:MetricsModule" [ label = "ds:hasModule" ];
	"ml:hasParamThresholdLambda" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamFilterParams" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:QuantileRegressor" -> "ml:LinearModelModule" [ label = "ds:hasModule" ];
	"ml:hasParamMinSamplesSplit" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasBayesianRegressionMethod" -> "ml:hasTrainMethod" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamDual" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:RootMeanSquaredError" -> "ml:MetricsModule" [ label = "ds:hasModule" ];
	"ml:hasParamLearningRateInit" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamDegree" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamMaxSkips" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:ARDRegression" -> "ml:LinearModelModule" [ label = "ds:hasModule" ];
	"ml:hasParamDocTopicPrior" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:StratifiedGroupKFold" -> "ml:ModelSelectionModule" [ label = "ds:hasModule" ];
	"ml:ExtraTreesClassifier" -> "ml:EnsembleModule" [ label = "ds:hasModule" ];
	"ml:hasParamReturnEstimator" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamCopyX" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamSolverOptions" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:ExplainedVarianceScore" -> "ml:MetricsModule" [ label = "ds:hasModule" ];
	"ml:hasParamNJobs" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:BaggingRegressor" -> "ml:EnsembleModule" [ label = "ds:hasModule" ];
	"ml:hasParamMaxNAlphas" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasDataProcessingMethod" -> "ml:hasPrepareTransformerMethod" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamL1Ratios" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:AffinityPropagation" -> "ml:ClusterModule" [ label = "ds:hasModule" ];
	"ml:hasDecisionTreeRegressionMethod" -> "ml:hasTrainMethod" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamRadius" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamVoting" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamTopicWordPrior" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamPositiveCode" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamOobScore" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamAlphaPerTarget" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamMinWeightFractionLeaf" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:CrossValidate" -> "ml:ModelSelectionModule" [ label = "ds:hasModule" ];
	"ml:hasParamStackMethod" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamExploitIncrementalLearning" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamClip" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:DecisionTreeRegressor" -> "ml:TreeModule" [ label = "ds:hasModule" ];
	"ml:hasParamNegLabel" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:ValidationCurve" -> "ml:ModelSelectionModule" [ label = "ds:hasModule" ];
	"ml:hasParamNu" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamClassifier" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:CheckScoring" -> "ml:MetricsModule" [ label = "ds:hasModule" ];
	"ml:hasParamCopy" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:MeanTweedieDeviance" -> "ml:MetricsModule" [ label = "ds:hasModule" ];
	"ml:PairwiseKernels" -> "ml:MetricsModule" [ label = "ds:hasModule" ];
	"ml:hasParamMaxClusterSize" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:ZeroOneLoss" -> "ml:MetricsModule" [ label = "ds:hasModule" ];
	"ml:hasParamNOversamples" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamMinSamplesLeaf" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:AdjustedMutualInfoScore" -> "ml:MetricsModule" [ label = "ds:hasModule" ];
	"ml:LeavePOut" -> "ml:ModelSelectionModule" [ label = "ds:hasModule" ];
	"ml:hasParamNeedsThreshold" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:ComplementNB" -> "ml:NaiveBayesModule" [ label = "ds:hasModule" ];
	"ml:OrthogonalMatchingPursuitCV" -> "ml:LinearModelModule" [ label = "ds:hasModule" ];
	"ml:LassoCV" -> "ml:LinearModelModule" [ label = "ds:hasModule" ];
	"ml:hasParamInit" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamMaxSubpopulation" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:GammaRegressor" -> "ml:LinearModelModule" [ label = "ds:hasModule" ];
	"ml:GammaRegressor" -> "ml:GlmModule" [ label = "ds:hasModule" ];
	"ml:ElasticNet" -> "ml:LinearModelModule" [ label = "ds:hasModule" ];
	"ml:hasParamIgnoreTies" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamPrecompute" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:MatthewsCorrcoef" -> "ml:MetricsModule" [ label = "ds:hasModule" ];
	"ml:BernoulliNB" -> "ml:NaiveBayesModule" [ label = "ds:hasModule" ];
	"ml:hasParamCacheSize" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamNAlphas" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamLearningRate" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamInitSize" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:MultiTaskElasticNet" -> "ml:LinearModelModule" [ label = "ds:hasModule" ];
	"ml:hasParamA" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:RandomForestRegressor" -> "ml:EnsembleModule" [ label = "ds:hasModule" ];
	"ml:hasParamFinalEstimator" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamStoreCvValues" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:NuSVR" -> "ml:SvmModule" [ label = "ds:hasModule" ];
	"ml:hasParamShrinking" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamTotalSamples" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:LearningCurve" -> "ml:ModelSelectionModule" [ label = "ds:hasModule" ];
	"ml:hasParamDamping" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:RadiusNeighborsClassifier" -> "ml:NeighborsModule" [ label = "ds:hasModule" ];
	"ml:DcgScore" -> "ml:MetricsModule" [ label = "ds:hasModule" ];
	"ml:hasParamMaxFeatures" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamForceFinite" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:LassoLars" -> "ml:LinearModelModule" [ label = "ds:hasModule" ];
	"ml:hasParamContingency" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:MeanSquaredError" -> "ml:MetricsModule" [ label = "ds:hasModule" ];
	"ml:hasParamNovelty" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:PredefinedSplit" -> "ml:ModelSelectionModule" [ label = "ds:hasModule" ];
	"ml:MedianAbsoluteError" -> "ml:MetricsModule" [ label = "ds:hasModule" ];
	"ml:OrdinalEncoder" -> "ml:PreprocessingModule" [ label = "ds:hasModule" ];
	"ml:hasParamZeroDivision" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamComputeLabels" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:OneVsRestClassifier" -> "ml:MulticlassModule" [ label = "ds:hasModule" ];
	"ml:hasParamNKnots" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:RocAucScore" -> "ml:MetricsModule" [ label = "ds:hasModule" ];
	"ml:NearestNeighbors" -> "ml:NeighborsModule" [ label = "ds:hasModule" ];
	"ml:hasParamTargetType" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:OneVsOneClassifier" -> "ml:MulticlassModule" [ label = "ds:hasModule" ];
	"ml:hasParamPassthrough" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasLeastAngleRegressionMethod" -> "ml:hasTrainMethod" [ label = "rdfs:subPropertyOf" ];
	"ml:SGDClassifier" -> "ml:LinearModelModule" [ label = "ds:hasModule" ];
	"ml:MeanGammaDeviance" -> "ml:MetricsModule" [ label = "ds:hasModule" ];
	"ml:hasParamRotation" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamMetricKwargs" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:FactorAnalysis" -> "ml:DecompositionModule" [ label = "ds:hasModule" ];
	"ml:hasParamEpsilon" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamCriterion" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamMultioutput" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamEvaluateEvery" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamErrorScore" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:MeanSquaredLogError" -> "ml:MetricsModule" [ label = "ds:hasModule" ];
	"ml:hasParamMaxDepth" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:KernelPCA" -> "ml:DecompositionModule" [ label = "ds:hasModule" ];
	"ml:hasParamBreadthFirst" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamFun" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:MultiTaskElasticNetCV" -> "ml:LinearModelModule" [ label = "ds:hasModule" ];
	"ml:hasParamInvKwArgs" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:OneHotEncoder" -> "ml:PreprocessingModule" [ label = "ds:hasModule" ];
	"ml:hasParamPowerIterationNormalizer" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamQuantile" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamMethod" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:MultiTaskLassoCV" -> "ml:LinearModelModule" [ label = "ds:hasModule" ];
	"ml:hasParamBootstrap" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamVerbose" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:GradientBoostingRegressor" -> "ml:EnsembleModule" [ label = "ds:hasModule" ];
	"ml:FeatureAgglomeration" -> "ml:ClusterModule" [ label = "ds:hasModule" ];
	"ml:HistGradientBoostingRegressor" -> "ml:GradientBoostingModule" [ label = "ds:hasModule" ];
	"ml:HistGradientBoostingRegressor" -> "ml:EnsembleModule" [ label = "ds:hasModule" ];
	"ml:hasParamSelection" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamEigenSolver" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamRefit" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamEps" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamStoreCenters" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:HistGradientBoostingClassifier" -> "ml:GradientBoostingModule" [ label = "ds:hasModule" ];
	"ml:HistGradientBoostingClassifier" -> "ml:EnsembleModule" [ label = "ds:hasModule" ];
	"ml:hasParamScoring" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:RadiusNeighborsTransformer" -> "ml:NeighborsModule" [ label = "ds:hasModule" ];
	"ml:LogLoss" -> "ml:MetricsModule" [ label = "ds:hasModule" ];
	"ml:OPTICS" -> "ml:ClusterModule" [ label = "ds:hasModule" ];
	"ml:hasParamFreshRestarts" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:VotingClassifier" -> "ml:EnsembleModule" [ label = "ds:hasModule" ];
	"ml:hasParamReturnIndices" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamThreshold" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamWithScaling" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:MultilabelClassification" -> "ml:OneVsOneClassifier" [ label = "ml:hasMultilabelClassificationMethod" ];
	"ml:KernelPCA" -> "xsd:boolean" [ label = "ml:hasParamRemoveZeroEig" ];
	"ml:AgglomerativeClustering" -> "xsd:string" [ label = "ml:hasParamConnectivity" ];
	"ml:Birch" -> "xsd:boolean" [ label = "ml:hasParamComputeLabels" ];
	"ml:OneHotEncoder" -> "xsd:string" [ label = "ml:hasParamHandleUnknown" ];
	"ml:ConsensusScore" -> "xsd:string" [ label = "ml:hasParamA" ];
	"ml:ConsensusScore" -> "xsd:string" [ label = "ml:hasParamB" ];
	"ml:LogisticRegression" -> "xsd:float" [ label = "ml:hasParamC" ];
	"ml:NuSVC" -> "xsd:string" [ label = "ml:hasParamDecisionFunctionShape" ];
	"ml:RepeatedKFold" -> "xsd:int" [ label = "ml:hasParamNRepeats" ];
	"ml:RandomForestClassifier" -> "xsd:boolean" [ label = "ml:hasParamBootstrap" ];
	"ml:RobustScaler" -> "xsd:boolean" [ label = "ml:hasParamUnitVariance" ];
	"ml:HistGradientBoostingClassifier" -> "xsd:int" [ label = "ml:hasParamValidationFraction" ];
	"ml:BalancedAccuracyScore" -> "xsd:boolean" [ label = "ml:hasParamAdjusted" ];
	"ml:IsolationForest" -> "xsd:float" [ label = "ml:hasParamContamination" ];
	"ml:MultilabelConfusionMatrix" -> "xsd:boolean" [ label = "ml:hasParamSamplewise" ];
	"ml:MakeScorer" -> "xsd:string" [ label = "ml:hasParamResponseMethod" ];
	"ml:RandomForestRegressor" -> "xsd:boolean" [ label = "ml:hasParamOobScore" ];
	"ml:MiniBatchNMF" -> "xsd:float" [ label = "ml:hasParamBetaLoss" ];
	"ml:ConsensusScore" -> "xsd:string" [ label = "ml:hasParamSimilarity" ];
	"ml:RidgeCV" -> "xsd:boolean" [ label = "ml:hasParamAlphaPerTarget" ];
	"ml:MiniBatchNMF" -> "xsd:boolean" [ label = "ml:hasParamFreshRestarts" ];
	"ml:PairwiseDistancesChunked" -> "xsd:float" [ label = "ml:hasParamWorkingMemory" ];
	"ml:HDBSCAN" -> "xsd:string" [ label = "ml:hasParamClusterSelectionMethod" ];
	"ml:RANSACRegressor" -> "xsd:float" [ label = "ml:hasParamStopScore" ];
	"ml:GradientBoostingRegressor" -> "xsd:string" [ label = "ml:hasParamAlpha" ];
	"ml:BernoulliNB" -> "xsd:boolean" [ label = "ml:hasParamForceAlpha" ];
	"ml:TweedieRegressor" -> "xsd:string" [ label = "ml:hasParamLink" ];
	"ml:VotingClassifier" -> "xsd:boolean" [ label = "ml:hasParamFlattenTransform" ];
	"ml:DBSCAN" -> "xsd:int" [ label = "ml:hasParamMinSamples" ];
	"ml:MLPRegressor" -> "xsd:boolean" [ label = "ml:hasParamEarlyStopping" ];
	"ml:CrossValidate" -> "xsd:boolean" [ label = "ml:hasParamReturnIndices" ];
	"ml:SplineTransformer" -> "xsd:string" [ label = "ml:hasParamExtrapolation" ];
	"ml:OPTICS" -> "xsd:float" [ label = "ml:hasParamMaxEps" ];
	"ml:LassoLarsCV" -> "xsd:boolean" [ label = "ml:hasParamCopyX" ];
	"ml:LearningCurveDisplay" -> "xsd:string" [ label = "ml:hasParamScoreName" ];
	"ml:KNeighborsClassifier" -> "xsd:int" [ label = "ml:hasParamNNeighbors" ];
	"ml:MeanShift" -> "xsd:int" [ label = "ml:hasParamMinBinFreq" ];
	"ml:MeanShift" -> "xsd:string" [ label = "ml:hasParamSeeds" ];
	"ml:GradientBoostingClassifier" -> "xsd:float" [ label = "ml:hasParamSubsample" ];
	"ml:SGDClassifier" -> "xsd:string" [ label = "ml:hasParamLearningRate" ];
	"ml:OneClassSVM" -> "xsd:float" [ label = "ml:hasParamGamma" ];
	"ml:AffinityPropagation" -> "xsd:float" [ label = "ml:hasParamDamping" ];
	"ml:ExtraTreesRegressor" -> "xsd:float" [ label = "ml:hasParamMaxSamples" ];
	"ml:KBinsDiscretizer" -> "xsd:int" [ label = "ml:hasParamNBins" ];
	"ml:OPTICS" -> "xsd:float" [ label = "ml:hasParamP" ];
	"ml:HistGradientBoostingClassifier" -> "xsd:string" [ label = "ml:hasParamCategoricalFeatures" ];
	"ml:DictVectorizer" -> "xsd:boolean" [ label = "ml:hasParamSparse" ];
	"ml:CrossValScore" -> "xsd:string" [ label = "ml:hasParamErrorScore" ];
	"ml:LinearSVC" -> "xsd:string" [ label = "ml:hasParamMultiClass" ];
	"ml:RandomForestRegressor" -> "xsd:int" [ label = "ml:hasParamNJobs" ];
	"ml:PairwiseDistancesArgmin" -> "xsd:int" [ label = "ml:hasParamAxis" ];
	"ml:DcgScore" -> "xsd:int" [ label = "ml:hasParamK" ];
	"ml:DataProcessing" -> "ml:LabelBinarizer" [ label = "ml:hasDataProcessingMethod" ];
	"ml:RadiusNeighborsTransformer" -> "xsd:string" [ label = "ml:hasParamAlgorithm" ];
	"ml:KernelDensity" -> "xsd:float" [ label = "ml:hasParamRtol" ];
	"ml:RadiusNeighborsClassifier" -> "xsd:string" [ label = "ml:hasParamOutlierLabel" ];
	"ml:DictVectorizer" -> "xsd:boolean" [ label = "ml:hasParamSort" ];
	"ml:QuantileRegressor" -> "xsd:string" [ label = "ml:hasParamSolverOptions" ];
	"ml:KBinsDiscretizer" -> "xsd:string" [ label = "ml:hasParamEncode" ];
	"ml:KNeighborsTransformer" -> "xsd:string" [ label = "ml:hasParamMode" ];
	"ml:LogisticRegressionCV" -> "xsd:float" [ label = "ml:hasParamL1Ratios" ];
	"ml:FastICA" -> "xsd:string" [ label = "ml:hasParamFunArgs" ];
	"ml:GammaRegressor" -> "xsd:string" [ label = "ml:hasParamSolver" ];
	"ml:DictionaryLearning" -> "xsd:string" [ label = "ml:hasParamCodeInit" ];
	"ml:LatentDirichletAllocation" -> "xsd:string" [ label = "ml:hasParamLearningMethod" ];
	"ml:RANSACRegressor" -> "xsd:string" [ label = "ml:hasParamIsModelValid" ];
	"ml:SVC" -> "xsd:string" [ label = "ml:hasParamKernel" ];
	"ml:BernoulliNB" -> "xsd:boolean" [ label = "ml:hasParamFitPrior" ];
	"ml:CheckCv" -> "xsd:boolean" [ label = "ml:hasParamClassifier" ];
	"ml:ClassLikelihoodRatios" -> "xsd:boolean" [ label = "ml:hasParamRaiseWarning" ];
	"ml:AdjustedMutualInfoScore" -> "xsd:string" [ label = "ml:hasParamAverageMethod" ];
	"ml:MeanShift" -> "xsd:boolean" [ label = "ml:hasParamClusterAll" ];
	"ml:MLPRegressor" -> "xsd:boolean" [ label = "ml:hasParamShuffle" ];
	"ml:AffinityPropagation" -> "xsd:int" [ label = "ml:hasParamConvergenceIter" ];
	"ml:MakeScorer" -> "xsd:boolean" [ label = "ml:hasParamGreaterIsBetter" ];
	"ml:TimeSeriesSplit" -> "xsd:int" [ label = "ml:hasParamGap" ];
	"ml:NuSVC" -> "xsd:boolean" [ label = "ml:hasParamProbability" ];
	"ml:ComplementNB" -> "xsd:boolean" [ label = "ml:hasParamNorm" ];
	"ml:SVC" -> "xsd:float" [ label = "ml:hasParamCoef0" ];
	"ml:RandomForestRegression" -> "ml:ExtraTreesRegressor" [ label = "ml:hasRandomForestRegressionMethod" ];
	"ml:LeavePGroupsOut" -> "xsd:int" [ label = "ml:hasParamNGroups" ];
	"ml:NuSVC" -> "xsd:float" [ label = "ml:hasParamNu" ];
	"ml:DecisionTreeClassifier" -> "xsd:string" [ label = "ml:hasParamClassWeight" ];
	"ml:FbetaScore" -> "xsd:float" [ label = "ml:hasParamBeta" ];
	"ml:OneHotEncoder" -> "xsd:string" [ label = "ml:hasParamCategories" ];
	"ml:DecisionTreeRegressor" -> "xsd:float" [ label = "ml:hasParamMinSamplesLeaf" ];
	"ml:FeatureHasher" -> "xsd:int" [ label = "ml:hasParamNFeatures" ];
	"ml:PrecisionRecallFscoreSupport" -> "xsd:string" [ label = "ml:hasParamWarnFor" ];
	"ml:SupportVectorRegression" -> "ml:LinearSVR" [ label = "ml:hasSupportVectorRegressionMethod" ];
	"ml:ExplainedVarianceScore" -> "xsd:boolean" [ label = "ml:hasParamForceFinite" ];
	"ml:DictionaryLearning" -> "xsd:int" [ label = "ml:hasParamTransformNNonzeroCoefs" ];
	"ml:RANSACRegressor" -> "xsd:int" [ label = "ml:hasParamMaxTrials" ];
	"ml:CohenKappaScore" -> "xsd:string" [ label = "ml:hasParamWeights" ];
	"ml:DecisionTreeRegressor" -> "xsd:string" [ label = "ml:hasParamMaxLeafNodes" ];
	"ml:DictVectorizer" -> "xsd:string" [ label = "ml:hasParamDtype" ];
	"ml:KNeighborsClassifier" -> "xsd:string" [ label = "ml:hasParamMetric" ];
	"ml:SparsePCA" -> "xsd:string" [ label = "ml:hasParamVInit" ];
	"ml:DictionaryLearning" -> "xsd:string" [ label = "ml:hasParamCallback" ];
	"ml:KBinsDiscretizer" -> "xsd:string" [ label = "ml:hasParamStrategy" ];
	"ml:LatentDirichletAllocation" -> "xsd:float" [ label = "ml:hasParamMeanChangeTol" ];
	"ml:MeanShift" -> "xsd:boolean" [ label = "ml:hasParamBinSeeding" ];
	"ml:LatentDirichletAllocation" -> "xsd:float" [ label = "ml:hasParamLearningOffset" ];
	"ml:FunctionTransformer" -> "xsd:string" [ label = "ml:hasParamInverseFunc" ];
	"ml:LatentDirichletAllocation" -> "xsd:int" [ label = "ml:hasParamMaxDocUpdateIter" ];
	"ml:MiniBatchNMF" -> "xsd:int" [ label = "ml:hasParamFreshRestartsMaxIter" ];
	"ml:KernelPCA" -> "xsd:boolean" [ label = "ml:hasParamFitInverseTransform" ];
	"ml:MinMaxScaler" -> "xsd:string" [ label = "ml:hasParamFeatureRange" ];
	"ml:NanEuclideanDistances" -> "xsd:float" [ label = "ml:hasParamMissingValues" ];
	"ml:FeatureHasher" -> "xsd:boolean" [ label = "ml:hasParamAlternateSign" ];
	"ml:PerformanceCalculation" -> "ml:MeanSquaredLogError" [ label = "ml:hasPerformanceCalculationMethod" ];
	"ml:HDBSCAN" -> "xsd:int" [ label = "ml:hasParamMaxClusterSize" ];
	"ml:KernelPCA" -> "xsd:string" [ label = "ml:hasParamEigenSolver" ];
	"ml:KernelPCA" -> "xsd:string" [ label = "ml:hasParamKernelParams" ];
	"ml:DictionaryLearning" -> "xsd:int" [ label = "ml:hasParamTransformMaxIter" ];
	"ml:LocalOutlierFactor" -> "xsd:boolean" [ label = "ml:hasParamNovelty" ];
	"ml:StackingClassifier" -> "xsd:string" [ label = "ml:hasParamFinalEstimator" ];
	"ml:DecisionTreeRegression" -> "ml:DecisionTreeRegressor" [ label = "ml:hasDecisionTreeRegressionMethod" ];
	"ml:LearningCurveDisplay" -> "xsd:string" [ label = "ml:hasParamTestScores" ];
	"ml:ExtraTreesClassifier" -> "xsd:float" [ label = "ml:hasParamMinWeightFractionLeaf" ];
	"ml:HistGradientBoostingRegressor" -> "xsd:float" [ label = "ml:hasParamQuantile" ];
	"ml:DcgScore" -> "xsd:boolean" [ label = "ml:hasParamIgnoreTies" ];
	"ml:RobustScaler" -> "xsd:boolean" [ label = "ml:hasParamWithScaling" ];
	"ml:SilhouetteScore" -> "xsd:int" [ label = "ml:hasParamSampleSize" ];
	"ml:OneHotEncoder" -> "xsd:string" [ label = "ml:hasParamFeatureNameCombiner" ];
	"ml:SGDRegressor" -> "xsd:string" [ label = "ml:hasParamAverage" ];
	"ml:TheilSenRegressor" -> "xsd:int" [ label = "ml:hasParamMaxSubpopulation" ];
	"ml:MiniBatchKMeans" -> "xsd:float" [ label = "ml:hasParamReassignmentRatio" ];
	"ml:QuantileTransformer" -> "xsd:int" [ label = "ml:hasParamNQuantiles" ];
	"ml:CrossValPredict" -> "xsd:string" [ label = "ml:hasParamMethod" ];
	"ml:LassoLarsIC" -> "xsd:float" [ label = "ml:hasParamNoiseVariance" ];
	"ml:DictionaryLearning" -> "xsd:boolean" [ label = "ml:hasParamSplitSign" ];
	"ml:OrdinalEncoder" -> "xsd:int" [ label = "ml:hasParamEncodedMissingValue" ];
	"ml:Lars" -> "xsd:string" [ label = "ml:hasParamPrecompute" ];
	"ml:SplineTransformer" -> "xsd:int" [ label = "ml:hasParamNKnots" ];
	"ml:HistGradientBoostingClassifier" -> "xsd:int" [ label = "ml:hasParamNIterNoChange" ];
	"ml:PowerTransformer" -> "xsd:boolean" [ label = "ml:hasParamStandardize" ];
	"ml:HuberRegressor" -> "xsd:boolean" [ label = "ml:hasParamFitIntercept" ];
	"ml:CrossValidate" -> "xsd:boolean" [ label = "ml:hasParamReturnTrainScore" ];
	"ml:SpectralClustering" -> "xsd:string" [ label = "ml:hasParamDegree" ];
	"ml:GradientBoostingClassifier" -> "xsd:int" [ label = "ml:hasParamMaxFeatures" ];
	"ml:LabelBinarizer" -> "xsd:boolean" [ label = "ml:hasParamSparseOutput" ];
	"ml:InstanceBasedRegression" -> "ml:KNeighborsRegressor" [ label = "ml:hasInstanceBasedRegressionMethod" ];
	"ml:MiniBatchSparsePCA" -> "xsd:int" [ label = "ml:hasParamBatchSize" ];
	"ml:MLPClassifier" -> "xsd:string" [ label = "ml:hasParamActivation" ];
	"ml:PrecisionRecallCurve" -> "xsd:boolean" [ label = "ml:hasParamDropIntermediate" ];
	"ml:BernoulliNB" -> "xsd:float" [ label = "ml:hasParamBinarize" ];
	"ml:AgglomerativeClustering" -> "xsd:string" [ label = "ml:hasParamMemory" ];
	"ml:StackingClassifier" -> "xsd:string" [ label = "ml:hasParamEstimators" ];
	"ml:BisectingKMeans" -> "xsd:string" [ label = "ml:hasParamBisectingStrategy" ];
	"ml:MutualInfoScore" -> "xsd:string" [ label = "ml:hasParamContingency" ];
	"ml:FactorAnalysis" -> "xsd:string" [ label = "ml:hasParamSvdMethod" ];
	"ml:HistGradientBoostingClassifier" -> "xsd:int" [ label = "ml:hasParamMaxDepth" ];
	"ml:LearningCurve" -> "xsd:boolean" [ label = "ml:hasParamExploitIncrementalLearning" ];
	"ml:FastICA" -> "xsd:string" [ label = "ml:hasParamWInit" ];
	"ml:ARDRegression" -> "xsd:int" [ label = "ml:hasParamNIter" ];
	"ml:VotingClassifier" -> "xsd:string" [ label = "ml:hasParamVoting" ];
	"ml:OPTICS" -> "xsd:string" [ label = "ml:hasParamClusterMethod" ];
	"ml:MLPClassifier" -> "xsd:boolean" [ label = "ml:hasParamNesterovsMomentum" ];
	"ml:MLPClassifier" -> "xsd:int" [ label = "ml:hasParamMaxFun" ];
	"ml:FactorAnalysis" -> "xsd:int" [ label = "ml:hasParamIteratedPower" ];
	"ml:MiniBatchNMF" -> "xsd:float" [ label = "ml:hasParamForgetFactor" ];
	"ml:NearestCentroid" -> "xsd:float" [ label = "ml:hasParamShrinkThreshold" ];
	"ml:BaggingClassifier" -> "xsd:boolean" [ label = "ml:hasParamBootstrapFeatures" ];
	"ml:LarsCV" -> "xsd:int" [ label = "ml:hasParamMaxNAlphas" ];
	"ml:BayesianRidge" -> "xsd:float" [ label = "ml:hasParamAlphaInit" ];
	"ml:LinearSVC" -> "xsd:boolean" [ label = "ml:hasParamDual" ];
	"ml:PolynomialFeatures" -> "xsd:boolean" [ label = "ml:hasParamIncludeBias" ];
	"ml:ExplainedVarianceScore" -> "xsd:string" [ label = "ml:hasParamMultioutput" ];
	"ml:LatentDirichletAllocation" -> "xsd:float" [ label = "ml:hasParamPerpTol" ];
	"ml:KernelPCA" -> "xsd:int" [ label = "ml:hasParamMaxIter" ];
	"ml:DictVectorizer" -> "xsd:string" [ label = "ml:hasParamSeparator" ];
	"ml:NuSVC" -> "xsd:boolean" [ label = "ml:hasParamBreakTies" ];
	"ml:RANSACRegressor" -> "xsd:float" [ label = "ml:hasParamResidualThreshold" ];
	"ml:Lars" -> "xsd:int" [ label = "ml:hasParamNNonzeroCoefs" ];
	"ml:PCA" -> "xsd:string" [ label = "ml:hasParamSvdSolver" ];
	"ml:BoostingRegression" -> "ml:AdaBoostRegressor" [ label = "ml:hasBoostingRegressionMethod" ];
	"ml:MLPRegressor" -> "xsd:boolean" [ label = "ml:hasParamWarmStart" ];
	"ml:AgglomerativeClustering" -> "xsd:boolean" [ label = "ml:hasParamComputeFullTree" ];
	"ml:OneVsRestClassifier" -> "xsd:string" [ label = "ml:hasParamEstimator" ];
	"ml:ElasticNetCV" -> "xsd:int" [ label = "ml:hasParamNAlphas" ];
	"ml:CheckScoring" -> "xsd:boolean" [ label = "ml:hasParamAllowNone" ];
	"ml:LinearRegression" -> "xsd:boolean" [ label = "ml:hasParamPositive" ];
	"ml:MiniBatchSparsePCA" -> "xsd:float" [ label = "ml:hasParamRidgeAlpha" ];
	"ml:Binarizer" -> "xsd:float" [ label = "ml:hasParamThreshold" ];
	"ml:LeastAngleRegression" -> "ml:Lars" [ label = "ml:hasLeastAngleRegressionMethod" ];
	"ml:BisectingKMeans" -> "xsd:int" [ label = "ml:hasParamNInit" ];
	"ml:TimeSeriesSplit" -> "xsd:int" [ label = "ml:hasParamMaxTrainSize" ];
	"ml:GroupShuffleSplit" -> "xsd:float" [ label = "ml:hasParamTrainSize" ];
	"ml:DictionaryLearning" -> "xsd:boolean" [ label = "ml:hasParamPositiveCode" ];
	"ml:PairwiseDistancesChunked" -> "xsd:string" [ label = "ml:hasParamReduceFunc" ];
	"ml:KernelDensity" -> "xsd:boolean" [ label = "ml:hasParamBreadthFirst" ];
	"ml:LogisticRegressionCV" -> "xsd:int" [ label = "ml:hasParamCs" ];
	"ml:DecisionTreeClassifier" -> "xsd:string" [ label = "ml:hasParamSplitter" ];
	"ml:D2TweedieScore" -> "xsd:float" [ label = "ml:hasParamPower" ];
	"ml:TrainTestSplit" -> "xsd:string" [ label = "ml:hasParamStratify" ];
	"ml:RidgeCV" -> "xsd:string" [ label = "ml:hasParamCv" ];
	"ml:ValidationCurve" -> "xsd:string" [ label = "ml:hasParamParamName" ];
	"ml:LearningCurve" -> "xsd:string" [ label = "ml:hasParamScoring" ];
	"ml:TheilSenRegressor" -> "xsd:int" [ label = "ml:hasParamNSubsamples" ];
	"ml:FunctionTransformer" -> "xsd:boolean" [ label = "ml:hasParamValidate" ];
	"ml:AgglomerativeClustering" -> "xsd:boolean" [ label = "ml:hasParamComputeDistances" ];
	"ml:MakeScorer" -> "xsd:boolean" [ label = "ml:hasParamNeedsProba" ];
	"ml:SplineTransformer" -> "xsd:string" [ label = "ml:hasParamKnots" ];
	"ml:RANSACRegressor" -> "xsd:string" [ label = "ml:hasParamIsDataValid" ];
	"ml:QuantileTransformer" -> "xsd:boolean" [ label = "ml:hasParamIgnoreImplicitZeros" ];
	"ml:CrossValPredict" -> "xsd:string" [ label = "ml:hasParamParams" ];
	"ml:PCA" -> "xsd:string" [ label = "ml:hasParamPowerIterationNormalizer" ];
	"ml:StackingClassifier" -> "xsd:string" [ label = "ml:hasParamStackMethod" ];
	"ml:ARDRegression" -> "xsd:float" [ label = "ml:hasParamAlpha1" ];
	"ml:OneHotEncoder" -> "xsd:float" [ label = "ml:hasParamMinFrequency" ];
	"ml:ARDRegression" -> "xsd:float" [ label = "ml:hasParamAlpha2" ];
	"ml:SparseCoder" -> "xsd:string" [ label = "ml:hasParamDictionary" ];
	"ml:SpectralCoclustering" -> "xsd:string" [ label = "ml:hasParamInit" ];
	"ml:HistGradientBoostingClassifier" -> "xsd:int" [ label = "ml:hasParamInteractionCst" ];
	"ml:SpectralClustering" -> "xsd:float" [ label = "ml:hasParamEigenTol" ];
	"ml:RANSACRegressor" -> "xsd:int" [ label = "ml:hasParamStopNInliers" ];
	"ml:DBSCAN" -> "xsd:string" [ label = "ml:hasParamMetricParams" ];
	"ml:DictionaryLearning" -> "xsd:string" [ label = "ml:hasParamTransformAlgorithm" ];
	"ml:LatentDirichletAllocation" -> "xsd:int" [ label = "ml:hasParamTotalSamples" ];
	"ml:AgglomerativeClustering" -> "xsd:float" [ label = "ml:hasParamDistanceThreshold" ];
	"ml:LinearSVC" -> "xsd:float" [ label = "ml:hasParamInterceptScaling" ];
	"ml:MiniBatchNMF" -> "xsd:float" [ label = "ml:hasParamAlphaH" ];
	"ml:RegularizedRegression" -> "ml:MultiTaskElasticNetCV" [ label = "ml:hasRegularizedRegressionMethod" ];
	"ml:Lars" -> "xsd:boolean" [ label = "ml:hasParamFitPath" ];
	"ml:DataSplitting" -> "ml:PermutationTestScore" [ label = "ml:hasDataSplittingMethod" ];
	"ml:PairwiseDistancesArgmin" -> "xsd:string" [ label = "ml:hasParamMetricKwargs" ];
	"ml:FactorAnalysis" -> "xsd:string" [ label = "ml:hasParamRotation" ];
	"ml:DcgScore" -> "xsd:float" [ label = "ml:hasParamLogBase" ];
	"ml:CrossValPredict" -> "xsd:string" [ label = "ml:hasParamFitParams" ];
	"ml:SimpleRegression" -> "ml:LinearRegression" [ label = "ml:hasSimpleRegressionMethod" ];
	"ml:HDBSCAN" -> "xsd:int" [ label = "ml:hasParamMinClusterSize" ];
	"ml:LogisticRegressionCV" -> "xsd:boolean" [ label = "ml:hasParamRefit" ];
	"ml:MiniBatchNMF" -> "xsd:float" [ label = "ml:hasParamAlphaW" ];
	"ml:LearningCurveDisplay" -> "xsd:string" [ label = "ml:hasParamTrainScores" ];
	"ml:HistGradientBoostingClassifier" -> "xsd:string" [ label = "ml:hasParamMonotonicCst" ];
	"ml:NMF" -> "xsd:float" [ label = "ml:hasParamL1Ratio" ];
	"ml:DictionaryLearning" -> "xsd:boolean" [ label = "ml:hasParamPositiveDict" ];
	"ml:MLPClassifier" -> "xsd:float" [ label = "ml:hasParamPowerT" ];
	"ml:FastICA" -> "xsd:boolean" [ label = "ml:hasParamWhiten" ];
	"ml:NearestNeighbors" -> "xsd:float" [ label = "ml:hasParamRadius" ];
	"ml:PrecisionRecallFscoreSupport" -> "xsd:float" [ label = "ml:hasParamPosLabel" ];
	"ml:SpectralClustering" -> "xsd:string" [ label = "ml:hasParamAssignLabels" ];
	"ml:BinaryClassification" -> "ml:LogisticRegressionCV" [ label = "ml:hasBinaryClassificationMethod" ];
	"ml:Clustering" -> "ml:MiniBatchKMeans" [ label = "ml:hasClusteringMethod" ];
	"ml:LabelBinarizer" -> "xsd:int" [ label = "ml:hasParamNegLabel" ];
	"ml:PCA" -> "xsd:int" [ label = "ml:hasParamNOversamples" ];
	"ml:FeatureHasher" -> "xsd:string" [ label = "ml:hasParamInputType" ];
	"ml:FunctionTransformer" -> "xsd:string" [ label = "ml:hasParamFunc" ];
	"ml:GradientBoostingRegressor" -> "xsd:boolean" [ label = "ml:hasParamVerbose" ];
	"ml:OneHotEncoder" -> "xsd:string" [ label = "ml:hasParamDrop" ];
	"ml:SGDOneClassSVM" -> "xsd:int" [ label = "ml:hasParamRandomState" ];
	"ml:BayesianRidge" -> "xsd:float" [ label = "ml:hasParamLambdaInit" ];
	"ml:LatentDirichletAllocation" -> "xsd:float" [ label = "ml:hasParamTopicWordPrior" ];
	"ml:ElasticNetCV" -> "xsd:string" [ label = "ml:hasParamAlphas" ];
	"ml:ClassificationReport" -> "xsd:int" [ label = "ml:hasParamDigits" ];
	"ml:MLPClassifier" -> "xsd:float" [ label = "ml:hasParamMomentum" ];
	"ml:TargetEncoder" -> "xsd:string" [ label = "ml:hasParamTargetType" ];
	"ml:AgglomerativeClustering" -> "xsd:string" [ label = "ml:hasParamLinkage" ];
	"ml:LatentDirichletAllocation" -> "xsd:int" [ label = "ml:hasParamEvaluateEvery" ];
	"ml:MulticlassClassification" -> "ml:OneVsRestClassifier" [ label = "ml:hasMulticlassClassificationMethod" ];
	"ml:Perceptron" -> "xsd:float" [ label = "ml:hasParamEta0" ];
	"ml:BayesianRegression" -> "ml:ARDRegression" [ label = "ml:hasBayesianRegressionMethod" ];
	"ml:DecisionTreeRegressor" -> "xsd:string" [ label = "ml:hasParamCriterion" ];
	"ml:MiniBatchKMeans" -> "xsd:int" [ label = "ml:hasParamInitSize" ];
	"ml:CategoricalNB" -> "xsd:int" [ label = "ml:hasParamMinCategories" ];
	"ml:ExtraTreesClassifier" -> "xsd:float" [ label = "ml:hasParamCcpAlpha" ];
	"ml:PolynomialFeatures" -> "xsd:boolean" [ label = "ml:hasParamInteractionOnly" ];
	"ml:RidgeCV" -> "xsd:string" [ label = "ml:hasParamGcvMode" ];
	"ml:HistGradientBoostingClassifier" -> "xsd:float" [ label = "ml:hasParamL2Regularization" ];
	"ml:PairwiseDistances" -> "xsd:boolean" [ label = "ml:hasParamForceAllFinite" ];
	"ml:SpectralBiclustering" -> "xsd:int" [ label = "ml:hasParamNBest" ];
	"ml:KernelDensity" -> "xsd:float" [ label = "ml:hasParamAtol" ];
	"ml:MinMaxScaler" -> "xsd:boolean" [ label = "ml:hasParamClip" ];
	"ml:ClassificationReport" -> "xsd:boolean" [ label = "ml:hasParamOutputDict" ];
	"ml:Decomposition" -> "ml:SparsePCA" [ label = "ml:hasDecompositionMethod" ];
	"ml:RANSACRegressor" -> "xsd:int" [ label = "ml:hasParamMaxSkips" ];
	"ml:ClassificationReport" -> "xsd:string" [ label = "ml:hasParamZeroDivision" ];
	"ml:FunctionTransformer" -> "xsd:string" [ label = "ml:hasParamKwArgs" ];
	"ml:StandardScaler" -> "xsd:boolean" [ label = "ml:hasParamWithStd" ];
	"ml:LatentDirichletAllocation" -> "xsd:float" [ label = "ml:hasParamLearningDecay" ];
	"ml:ExtraTreesClassifier" -> "xsd:int" [ label = "ml:hasParamMinSamplesSplit" ];
	"ml:FeatureAgglomeration" -> "xsd:string" [ label = "ml:hasParamPoolingFunc" ];
	"ml:HDBSCAN" -> "xsd:float" [ label = "ml:hasParamClusterSelectionEpsilon" ];
	"ml:QuantileTransformer" -> "xsd:string" [ label = "ml:hasParamOutputDistribution" ];
	"ml:TargetEncoder" -> "xsd:float" [ label = "ml:hasParamSmooth" ];
	"ml:GroupShuffleSplit" -> "xsd:float" [ label = "ml:hasParamTestSize" ];
	"ml:KernelDensity" -> "xsd:float" [ label = "ml:hasParamBandwidth" ];
	"ml:OutputCodeClassifier" -> "xsd:float" [ label = "ml:hasParamCodeSize" ];
	"ml:NuSVC" -> "xsd:float" [ label = "ml:hasParamCacheSize" ];
	"ml:AffinityPropagation" -> "xsd:string" [ label = "ml:hasParamAffinity" ];
	"ml:DictionaryLearning" -> "xsd:string" [ label = "ml:hasParamDictInit" ];
	"ml:SpectralBiclustering" -> "xsd:string" [ label = "ml:hasParamNClusters" ];
	"ml:FunctionTransformer" -> "xsd:string" [ label = "ml:hasParamFeatureNamesOut" ];
	"ml:Lars" -> "xsd:float" [ label = "ml:hasParamJitter" ];
	"ml:DBSCAN" -> "xsd:float" [ label = "ml:hasParamEps" ];
	"ml:Birch" -> "xsd:int" [ label = "ml:hasParamBranchingFactor" ];
	"ml:StratifiedKFold" -> "xsd:int" [ label = "ml:hasParamNSplits" ];
	"ml:RobustScaler" -> "xsd:string" [ label = "ml:hasParamQuantileRange" ];
	"ml:IncrementalPCA" -> "xsd:string" [ label = "ml:hasParamNComponents" ];
	"ml:ARDRegression" -> "xsd:float" [ label = "ml:hasParamLambda2" ];
	"ml:ARDRegression" -> "xsd:float" [ label = "ml:hasParamLambda1" ];
	"ml:HistGradientBoostingClassifier" -> "xsd:int" [ label = "ml:hasParamMaxBins" ];
	"ml:HDBSCAN" -> "xsd:boolean" [ label = "ml:hasParamAllowSingleCluster" ];
	"ml:SpectralBiclustering" -> "xsd:boolean" [ label = "ml:hasParamMiniBatch" ];
	"ml:PolynomialFeatures" -> "xsd:string" [ label = "ml:hasParamOrder" ];
	"ml:SGDRegressor" -> "xsd:float" [ label = "ml:hasParamEpsilon" ];
	"ml:LogisticRegressionCV" -> "xsd:string" [ label = "ml:hasParamTol" ];
	"ml:FunctionTransformer" -> "xsd:boolean" [ label = "ml:hasParamCheckInverse" ];
	"ml:StackingClassifier" -> "xsd:boolean" [ label = "ml:hasParamPassthrough" ];
	"ml:MakeScorer" -> "xsd:boolean" [ label = "ml:hasParamNeedsThreshold" ];
	"ml:PermutationTestScore" -> "xsd:int" [ label = "ml:hasParamNPermutations" ];
	"ml:ARDRegression" -> "xsd:float" [ label = "ml:hasParamThresholdLambda" ];
	"ml:RANSACRegressor" -> "xsd:string" [ label = "ml:hasParamLoss" ];
	"ml:NuSVC" -> "xsd:boolean" [ label = "ml:hasParamShrinking" ];
	"ml:HingeLoss" -> "xsd:string" [ label = "ml:hasParamPredDecision" ];
	"ml:HDBSCAN" -> "xsd:int" [ label = "ml:hasParamLeafSize" ];
	"ml:MiniBatchDictionaryLearning" -> "xsd:int" [ label = "ml:hasParamMaxNoImprovement" ];
	"ml:AccuracyScore" -> "xsd:boolean" [ label = "ml:hasParamNormalize" ];
	"ml:LatentDirichletAllocation" -> "xsd:float" [ label = "ml:hasParamDocTopicPrior" ];
	"ml:FunctionTransformer" -> "xsd:boolean" [ label = "ml:hasParamAcceptSparse" ];
	"ml:AffinityPropagation" -> "xsd:float" [ label = "ml:hasParamPreference" ];
	"ml:FunctionTransformer" -> "xsd:string" [ label = "ml:hasParamInvKwArgs" ];
	"ml:ARDRegression" -> "xsd:boolean" [ label = "ml:hasParamComputeScore" ];
	"ml:RobustScaler" -> "xsd:boolean" [ label = "ml:hasParamWithCentering" ];
	"ml:FactorAnalysis" -> "xsd:boolean" [ label = "ml:hasParamCopy" ];
	"ml:RidgeCV" -> "xsd:boolean" [ label = "ml:hasParamStoreCvValues" ];
	"ml:DictionaryLearning" -> "xsd:float" [ label = "ml:hasParamTransformAlpha" ];
	"ml:SparsePCA" -> "xsd:string" [ label = "ml:hasParamUInit" ];
	"ml:EuclideanDistances" -> "xsd:boolean" [ label = "ml:hasParamSquared" ];
	"ml:GaussianNB" -> "xsd:float" [ label = "ml:hasParamVarSmoothing" ];
	"ml:MakeScorer" -> "xsd:string" [ label = "ml:hasParamScoreFunc" ];
	"ml:CrossValPredict" -> "xsd:int" [ label = "ml:hasParamPreDispatch" ];
	"ml:MLPClassifier" -> "xsd:float" [ label = "ml:hasParamLearningRateInit" ];
	"ml:AdaBoostRegressor" -> "xsd:int" [ label = "ml:hasParamNEstimators" ];
	"ml:HDBSCAN" -> "xsd:string" [ label = "ml:hasParamStoreCenters" ];
	"ml:StandardScaler" -> "xsd:boolean" [ label = "ml:hasParamWithMean" ];
	"ml:FastICA" -> "xsd:string" [ label = "ml:hasParamWhitenSolver" ];
	"ml:CrossValidate" -> "xsd:boolean" [ label = "ml:hasParamReturnEstimator" ];
	"ml:OPTICS" -> "xsd:boolean" [ label = "ml:hasParamPredecessorCorrection" ];
	"ml:FastICA" -> "xsd:string" [ label = "ml:hasParamFun" ];
	"ml:Lasso" -> "xsd:string" [ label = "ml:hasParamSelection" ];
	"ml:MLPClassifier" -> "xsd:float" [ label = "ml:hasParamBeta2" ];
	"ml:LearningCurve" -> "xsd:boolean" [ label = "ml:hasParamReturnTimes" ];
	"ml:MLPClassifier" -> "xsd:float" [ label = "ml:hasParamBeta1" ];
	"ml:SpectralBiclustering" -> "xsd:int" [ label = "ml:hasParamNSvdVecs" ];
	"ml:OneHotEncoder" -> "xsd:int" [ label = "ml:hasParamMaxCategories" ];
	"ml:PairwiseKernels" -> "xsd:boolean" [ label = "ml:hasParamFilterParams" ];
	"ml:RandomTreesEmbedding" -> "xsd:float" [ label = "ml:hasParamMinImpurityDecrease" ];
	"ml:DictionaryLearning" -> "xsd:string" [ label = "ml:hasParamFitAlgorithm" ];
	"ml:OrdinalEncoder" -> "xsd:int" [ label = "ml:hasParamUnknownValue" ];
	"ml:LinearSVC" -> "xsd:string" [ label = "ml:hasParamPenalty" ];

}
