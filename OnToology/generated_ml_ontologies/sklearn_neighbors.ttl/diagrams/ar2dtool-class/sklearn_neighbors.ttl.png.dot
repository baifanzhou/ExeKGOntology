digraph ar2dtool_diagram { 
rankdir=LR;
size="1501"
node [shape = rectangle, color="orange"]; "ml:KernelDensity" "ml:LocalOutlierFactor" "ml:NeighborhoodComponentsAnalysis" "ml:Clustering" "ml:BinaryClassification" "ml:RadiusNeighborsClassifier" "ml:KNeighborsClassifier" "ml:MulticlassClassification" "ml:KNeighborsRegressor" "ml:RadiusNeighborsRegressor" "ml:NearestNeighbors" "ml:KNeighborsTransformer" "ml:NearestCentroid" "ml:Decomposition" "ml:RadiusNeighborsTransformer" "ml:NeighborsModule" "ml:InstanceBasedRegression" ; /*classes style*/
	"ml:NeighborhoodComponentsAnalysis" -> "ml:NeighborsModule" [ label = "ds:hasModule" ];
	"ml:hasParamVerbose" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamRtol" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:RadiusNeighborsRegressor" -> "ml:NeighborsModule" [ label = "ds:hasModule" ];
	"ml:hasParamWarmStart" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:LocalOutlierFactor" -> "ml:NeighborsModule" [ label = "ds:hasModule" ];
	"ml:KNeighborsTransformer" -> "ml:NeighborsModule" [ label = "ds:hasModule" ];
	"ml:hasParamOutlierLabel" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasInstanceBasedRegressionMethod" -> "ml:hasTrainMethod" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamCallback" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamNNeighbors" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamAlgorithm" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamWeights" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamBreadthFirst" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamMetric" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamRandomState" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamRadius" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:KNeighborsRegressor" -> "ml:NeighborsModule" [ label = "ds:hasModule" ];
	"ml:hasClusteringMethod" -> "ml:hasTrainMethod" [ label = "rdfs:subPropertyOf" ];
	"ml:KernelDensity" -> "ml:NeighborsModule" [ label = "ds:hasModule" ];
	"ml:NearestCentroid" -> "ml:NeighborsModule" [ label = "ds:hasModule" ];
	"ml:hasParamShrinkThreshold" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:RadiusNeighborsTransformer" -> "ml:NeighborsModule" [ label = "ds:hasModule" ];
	"ml:hasParamInit" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:NearestNeighbors" -> "ml:NeighborsModule" [ label = "ds:hasModule" ];
	"ml:hasParamContamination" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamNComponents" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamAtol" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamNovelty" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:RadiusNeighborsClassifier" -> "ml:NeighborsModule" [ label = "ds:hasModule" ];
	"ml:hasParamMaxIter" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamMetricParams" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasBinaryClassificationMethod" -> "ml:hasTrainMethod" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamKernel" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:KNeighborsClassifier" -> "ml:NeighborsModule" [ label = "ds:hasModule" ];
	"ml:hasParamLeafSize" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamTol" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasMulticlassClassificationMethod" -> "ml:hasTrainMethod" [ label = "rdfs:subPropertyOf" ];
	"ml:hasDecompositionMethod" -> "ml:hasPrepareTransformerMethod" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamBandwidth" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamNJobs" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamMode" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamP" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:KernelDensity" -> "xsd:float" [ label = "ml:hasParamRtol" ];
	"ml:RadiusNeighborsTransformer" -> "xsd:string" [ label = "ml:hasParamAlgorithm" ];
	"ml:NeighborhoodComponentsAnalysis" -> "xsd:float" [ label = "ml:hasParamTol" ];
	"ml:RadiusNeighborsClassifier" -> "xsd:string" [ label = "ml:hasParamOutlierLabel" ];
	"ml:KernelDensity" -> "xsd:float" [ label = "ml:hasParamAtol" ];
	"ml:KNeighborsTransformer" -> "xsd:string" [ label = "ml:hasParamMode" ];
	"ml:Decomposition" -> "ml:NeighborhoodComponentsAnalysis" [ label = "ml:hasDecompositionMethod" ];
	"ml:NearestCentroid" -> "xsd:float" [ label = "ml:hasParamShrinkThreshold" ];
	"ml:LocalOutlierFactor" -> "xsd:float" [ label = "ml:hasParamContamination" ];
	"ml:KernelDensity" -> "xsd:boolean" [ label = "ml:hasParamBreadthFirst" ];
	"ml:LocalOutlierFactor" -> "xsd:boolean" [ label = "ml:hasParamNovelty" ];
	"ml:KernelDensity" -> "xsd:string" [ label = "ml:hasParamKernel" ];
	"ml:KernelDensity" -> "xsd:int" [ label = "ml:hasParamLeafSize" ];
	"ml:NearestNeighbors" -> "xsd:float" [ label = "ml:hasParamRadius" ];
	"ml:Clustering" -> "ml:KNeighborsTransformer" [ label = "ml:hasClusteringMethod" ];
	"ml:NeighborhoodComponentsAnalysis" -> "xsd:int" [ label = "ml:hasParamMaxIter" ];
	"ml:BinaryClassification" -> "ml:KNeighborsClassifier" [ label = "ml:hasBinaryClassificationMethod" ];
	"ml:KernelDensity" -> "xsd:float" [ label = "ml:hasParamBandwidth" ];
	"ml:KNeighborsClassifier" -> "xsd:int" [ label = "ml:hasParamNNeighbors" ];
	"ml:NeighborhoodComponentsAnalysis" -> "xsd:int" [ label = "ml:hasParamVerbose" ];
	"ml:NeighborhoodComponentsAnalysis" -> "xsd:int" [ label = "ml:hasParamRandomState" ];
	"ml:NeighborhoodComponentsAnalysis" -> "xsd:boolean" [ label = "ml:hasParamWarmStart" ];
	"ml:KNeighborsClassifier" -> "xsd:float" [ label = "ml:hasParamP" ];
	"ml:InstanceBasedRegression" -> "ml:KNeighborsRegressor" [ label = "ml:hasInstanceBasedRegressionMethod" ];
	"ml:NeighborhoodComponentsAnalysis" -> "xsd:string" [ label = "ml:hasParamInit" ];
	"ml:KNeighborsClassifier" -> "xsd:string" [ label = "ml:hasParamWeights" ];
	"ml:KNeighborsClassifier" -> "xsd:string" [ label = "ml:hasParamMetric" ];
	"ml:NeighborhoodComponentsAnalysis" -> "xsd:int" [ label = "ml:hasParamNComponents" ];
	"ml:RadiusNeighborsClassifier" -> "xsd:string" [ label = "ml:hasParamMetricParams" ];
	"ml:NearestNeighbors" -> "xsd:int" [ label = "ml:hasParamNJobs" ];
	"ml:NeighborhoodComponentsAnalysis" -> "xsd:string" [ label = "ml:hasParamCallback" ];
	"ml:MulticlassClassification" -> "ml:KNeighborsClassifier" [ label = "ml:hasMulticlassClassificationMethod" ];

}
