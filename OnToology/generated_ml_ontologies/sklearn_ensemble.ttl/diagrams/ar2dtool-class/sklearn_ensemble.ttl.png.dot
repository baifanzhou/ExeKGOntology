digraph ar2dtool_diagram { 
rankdir=LR;
size="1501"
node [shape = rectangle, color="orange"]; "ml:EnsembleModule" "ml:GradientBoostingModule" "ml:ExtraTreesClassifier" "ml:VotingRegressor" "ml:VotingClassifier" "ml:Clustering" "ml:BinaryClassification" "ml:IsolationForest" "ml:StackingRegressor" "ml:DataProcessing" "ml:HistGradientBoostingRegressor" "ml:MulticlassClassification" "ml:StackingClassifier" "ml:RandomForestRegression" "ml:GradientBoostingClassifier" "ml:BaggingClassifier" "ml:AdaBoostClassifier" "ml:AdaBoostRegressor" "ml:BoostingRegression" "ml:RandomForestClassifier" "ml:GradientBoostingRegressor" "ml:BaggingRegressor" "ml:RandomForestRegressor" "ml:RandomTreesEmbedding" "ml:ExtraTreesRegressor" "ml:RegularizedRegression" "ml:HistGradientBoostingClassifier" ; /*classes style*/
	"ml:hasParamVerbose" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:GradientBoostingClassifier" -> "ml:EnsembleModule" [ label = "ds:hasModule" ];
	"ml:hasParamAlpha" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamCv" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamWarmStart" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasBoostingRegressionMethod" -> "ml:hasTrainMethod" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamCcpAlpha" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamMinWeightFractionLeaf" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamStackMethod" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamMaxFeatures" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamAlgorithm" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamNIterNoChange" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:RandomForestClassifier" -> "ml:EnsembleModule" [ label = "ds:hasModule" ];
	"ml:ExtraTreesRegressor" -> "ml:EnsembleModule" [ label = "ds:hasModule" ];
	"ml:hasRandomForestRegressionMethod" -> "ml:hasTrainMethod" [ label = "rdfs:subPropertyOf" ];
	"ml:hasDataProcessingMethod" -> "ml:hasPrepareTransformerMethod" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamVoting" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamL2Regularization" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:BaggingClassifier" -> "ml:EnsembleModule" [ label = "ds:hasModule" ];
	"ml:BaggingRegressor" -> "ml:EnsembleModule" [ label = "ds:hasModule" ];
	"ml:AdaBoostRegressor" -> "ml:EnsembleModule" [ label = "ds:hasModule" ];
	"ml:hasParamCriterion" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamRandomState" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamEarlyStopping" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:AdaBoostClassifier" -> "ml:EnsembleModule" [ label = "ds:hasModule" ];
	"ml:hasParamMaxSamples" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:VotingRegressor" -> "ml:EnsembleModule" [ label = "ds:hasModule" ];
	"ml:RandomTreesEmbedding" -> "ml:EnsembleModule" [ label = "ds:hasModule" ];
	"ml:hasParamSparseOutput" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamMonotonicCst" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamScoring" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamClassWeight" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasClusteringMethod" -> "ml:hasTrainMethod" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamBootstrap" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamMinImpurityDecrease" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamInteractionCst" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamMinSamplesLeaf" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:StackingRegressor" -> "ml:EnsembleModule" [ label = "ds:hasModule" ];
	"ml:hasParamLearningRate" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamInit" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:IsolationForest" -> "ml:EnsembleModule" [ label = "ds:hasModule" ];
	"ml:hasParamEstimator" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamPassthrough" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamMinSamplesSplit" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamMaxDepth" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamMaxBins" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:HistGradientBoostingClassifier" -> "ml:GradientBoostingModule" [ label = "ds:hasModule" ];
	"ml:HistGradientBoostingClassifier" -> "ml:EnsembleModule" [ label = "ds:hasModule" ];
	"ml:hasParamContamination" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:ExtraTreesClassifier" -> "ml:EnsembleModule" [ label = "ds:hasModule" ];
	"ml:hasParamSubsample" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamMaxIter" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasBinaryClassificationMethod" -> "ml:hasTrainMethod" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamMaxLeafNodes" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:StackingClassifier" -> "ml:EnsembleModule" [ label = "ds:hasModule" ];
	"ml:VotingClassifier" -> "ml:EnsembleModule" [ label = "ds:hasModule" ];
	"ml:hasParamValidationFraction" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamTol" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasMulticlassClassificationMethod" -> "ml:hasTrainMethod" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamCategoricalFeatures" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamLoss" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:GradientBoostingRegressor" -> "ml:EnsembleModule" [ label = "ds:hasModule" ];
	"ml:hasParamBootstrapFeatures" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamFinalEstimator" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:RandomForestRegressor" -> "ml:EnsembleModule" [ label = "ds:hasModule" ];
	"ml:hasRegularizedRegressionMethod" -> "ml:hasTrainMethod" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamEstimators" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamNJobs" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamNEstimators" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamFlattenTransform" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:HistGradientBoostingRegressor" -> "ml:GradientBoostingModule" [ label = "ds:hasModule" ];
	"ml:HistGradientBoostingRegressor" -> "ml:EnsembleModule" [ label = "ds:hasModule" ];
	"ml:hasParamOobScore" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamQuantile" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:ExtraTreesClassifier" -> "xsd:string" [ label = "ml:hasParamCriterion" ];
	"ml:ExtraTreesClassifier" -> "xsd:float" [ label = "ml:hasParamCcpAlpha" ];
	"ml:HistGradientBoostingClassifier" -> "xsd:float" [ label = "ml:hasParamL2Regularization" ];
	"ml:RandomForestClassifier" -> "xsd:boolean" [ label = "ml:hasParamBootstrap" ];
	"ml:GradientBoostingClassifier" -> "xsd:float" [ label = "ml:hasParamValidationFraction" ];
	"ml:IsolationForest" -> "xsd:float" [ label = "ml:hasParamContamination" ];
	"ml:RandomForestRegressor" -> "xsd:boolean" [ label = "ml:hasParamOobScore" ];
	"ml:StackingClassifier" -> "xsd:string" [ label = "ml:hasParamFinalEstimator" ];
	"ml:ExtraTreesClassifier" -> "xsd:float" [ label = "ml:hasParamMinWeightFractionLeaf" ];
	"ml:ExtraTreesClassifier" -> "xsd:int" [ label = "ml:hasParamMinSamplesSplit" ];
	"ml:HistGradientBoostingRegressor" -> "xsd:float" [ label = "ml:hasParamQuantile" ];
	"ml:GradientBoostingRegressor" -> "xsd:float" [ label = "ml:hasParamAlpha" ];
	"ml:StackingClassifier" -> "xsd:int" [ label = "ml:hasParamCv" ];
	"ml:HistGradientBoostingClassifier" -> "xsd:string" [ label = "ml:hasParamScoring" ];
	"ml:VotingClassifier" -> "xsd:boolean" [ label = "ml:hasParamFlattenTransform" ];
	"ml:HistGradientBoostingClassifier" -> "xsd:boolean" [ label = "ml:hasParamEarlyStopping" ];
	"ml:GradientBoostingClassifier" -> "xsd:int" [ label = "ml:hasParamNIterNoChange" ];
	"ml:AdaBoostClassifier" -> "xsd:float" [ label = "ml:hasParamLearningRate" ];
	"ml:GradientBoostingClassifier" -> "xsd:float" [ label = "ml:hasParamSubsample" ];
	"ml:StackingClassifier" -> "xsd:string" [ label = "ml:hasParamStackMethod" ];
	"ml:ExtraTreesRegressor" -> "xsd:float" [ label = "ml:hasParamMaxSamples" ];
	"ml:GradientBoostingClassifier" -> "xsd:int" [ label = "ml:hasParamMaxFeatures" ];
	"ml:RandomTreesEmbedding" -> "xsd:boolean" [ label = "ml:hasParamSparseOutput" ];
	"ml:GradientBoostingClassifier" -> "xsd:string" [ label = "ml:hasParamInit" ];
	"ml:HistGradientBoostingClassifier" -> "xsd:string" [ label = "ml:hasParamCategoricalFeatures" ];
	"ml:HistGradientBoostingClassifier" -> "xsd:int" [ label = "ml:hasParamInteractionCst" ];
	"ml:VotingClassifier" -> "xsd:int" [ label = "ml:hasParamNJobs" ];
	"ml:StackingClassifier" -> "xsd:string" [ label = "ml:hasParamEstimators" ];
	"ml:HistGradientBoostingClassifier" -> "xsd:int" [ label = "ml:hasParamMaxBins" ];
	"ml:DataProcessing" -> "ml:RandomTreesEmbedding" [ label = "ml:hasDataProcessingMethod" ];
	"ml:HistGradientBoostingClassifier" -> "xsd:int" [ label = "ml:hasParamMaxDepth" ];
	"ml:AdaBoostClassifier" -> "xsd:string" [ label = "ml:hasParamAlgorithm" ];
	"ml:GradientBoostingClassifier" -> "xsd:float" [ label = "ml:hasParamTol" ];
	"ml:StackingClassifier" -> "xsd:boolean" [ label = "ml:hasParamPassthrough" ];
	"ml:VotingClassifier" -> "xsd:string" [ label = "ml:hasParamVoting" ];
	"ml:RegularizedRegression" -> "ml:BaggingRegressor" [ label = "ml:hasRegularizedRegressionMethod" ];
	"ml:AdaBoostRegressor" -> "xsd:string" [ label = "ml:hasParamLoss" ];
	"ml:HistGradientBoostingClassifier" -> "xsd:string" [ label = "ml:hasParamMonotonicCst" ];
	"ml:BaggingClassifier" -> "xsd:boolean" [ label = "ml:hasParamBootstrapFeatures" ];
	"ml:Clustering" -> "ml:IsolationForest" [ label = "ml:hasClusteringMethod" ];
	"ml:HistGradientBoostingClassifier" -> "xsd:int" [ label = "ml:hasParamMaxIter" ];
	"ml:BinaryClassification" -> "ml:RandomForestClassifier" [ label = "ml:hasBinaryClassificationMethod" ];
	"ml:RandomForestRegression" -> "ml:ExtraTreesRegressor" [ label = "ml:hasRandomForestRegressionMethod" ];
	"ml:ExtraTreesClassifier" -> "xsd:string" [ label = "ml:hasParamClassWeight" ];
	"ml:RandomTreesEmbedding" -> "xsd:boolean" [ label = "ml:hasParamVerbose" ];
	"ml:GradientBoostingRegressor" -> "xsd:int" [ label = "ml:hasParamRandomState" ];
	"ml:AdaBoostRegressor" -> "xsd:int" [ label = "ml:hasParamNEstimators" ];
	"ml:ExtraTreesRegressor" -> "xsd:float" [ label = "ml:hasParamMinSamplesLeaf" ];
	"ml:BoostingRegression" -> "ml:AdaBoostRegressor" [ label = "ml:hasBoostingRegressionMethod" ];
	"ml:BaggingClassifier" -> "xsd:boolean" [ label = "ml:hasParamWarmStart" ];
	"ml:AdaBoostClassifier" -> "xsd:string" [ label = "ml:hasParamEstimator" ];
	"ml:RandomForestClassifier" -> "xsd:string" [ label = "ml:hasParamMaxLeafNodes" ];
	"ml:RandomTreesEmbedding" -> "xsd:float" [ label = "ml:hasParamMinImpurityDecrease" ];
	"ml:MulticlassClassification" -> "ml:AdaBoostClassifier" [ label = "ml:hasMulticlassClassificationMethod" ];

}
