digraph ar2dtool_diagram { 
rankdir=LR;
size="1501"
node [shape = rectangle, color="orange"]; "ml:DecisionTreeRegressor" "ml:BinaryClassification" "ml:DecisionTreeRegression" "ml:MulticlassClassification" "ml:DecisionTreeClassifier" ; /*classes style*/
	"ml:hasParamMinImpurityDecrease" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamMaxLeafNodes" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamClassWeight" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamRandomState" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasMulticlassClassificationMethod" -> "ml:hasTrainMethod" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamCriterion" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamSplitter" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamCcpAlpha" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasDecisionTreeRegressionMethod" -> "ml:hasTrainMethod" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamMinSamplesSplit" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamMaxFeatures" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamMinWeightFractionLeaf" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasBinaryClassificationMethod" -> "ml:hasTrainMethod" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamMaxDepth" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamMinSamplesLeaf" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:DecisionTreeClassifier" -> "xsd:int" [ label = "ml:hasParamMaxDepth" ];
	"ml:DecisionTreeClassifier" -> "xsd:string" [ label = "ml:hasParamCriterion" ];
	"ml:BinaryClassification" -> "ml:DecisionTreeClassifier" [ label = "ml:hasBinaryClassificationMethod" ];
	"ml:DecisionTreeClassifier" -> "xsd:float" [ label = "ml:hasParamCcpAlpha" ];
	"ml:DecisionTreeClassifier" -> "xsd:string" [ label = "ml:hasParamClassWeight" ];
	"ml:DecisionTreeClassifier" -> "xsd:int" [ label = "ml:hasParamRandomState" ];
	"ml:DecisionTreeClassifier" -> "xsd:float" [ label = "ml:hasParamMinSamplesLeaf" ];
	"ml:DecisionTreeClassifier" -> "xsd:float" [ label = "ml:hasParamMaxFeatures" ];
	"ml:DecisionTreeClassifier" -> "xsd:string" [ label = "ml:hasParamSplitter" ];
	"ml:DecisionTreeRegression" -> "ml:DecisionTreeRegressor" [ label = "ml:hasDecisionTreeRegressionMethod" ];
	"ml:DecisionTreeClassifier" -> "xsd:int" [ label = "ml:hasParamMaxLeafNodes" ];
	"ml:DecisionTreeClassifier" -> "xsd:float" [ label = "ml:hasParamMinSamplesSplit" ];
	"ml:DecisionTreeClassifier" -> "xsd:float" [ label = "ml:hasParamMinWeightFractionLeaf" ];
	"ml:DecisionTreeClassifier" -> "xsd:float" [ label = "ml:hasParamMinImpurityDecrease" ];
	"ml:MulticlassClassification" -> "ml:DecisionTreeClassifier" [ label = "ml:hasMulticlassClassificationMethod" ];

}
