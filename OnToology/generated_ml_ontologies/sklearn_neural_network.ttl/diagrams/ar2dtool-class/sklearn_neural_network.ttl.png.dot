digraph ar2dtool_diagram { 
rankdir=LR;
size="1501"
node [shape = rectangle, color="orange"]; "ml:BinaryClassification" "ml:NeuralNetworkModule" "ml:MLPRegressor" "ml:MLPClassifier" "ml:BernoulliRBM" "ml:RegularizedRegression" ; /*classes style*/
	"ml:hasParamBeta1" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamNComponents" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamNIter" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamActivation" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamSolver" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamBatchSize" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:BernoulliRBM" -> "ml:NeuralNetworkModule" [ label = "ds:hasModule" ];
	"ml:hasParamLearningRateInit" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamVerbose" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:MLPClassifier" -> "ml:NeuralNetworkModule" [ label = "ds:hasModule" ];
	"ml:hasParamRandomState" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasBinaryClassificationMethod" -> "ml:hasTrainMethod" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamMaxFun" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamEpsilon" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamWarmStart" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamNIterNoChange" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamValidationFraction" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamNesterovsMomentum" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamPowerT" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamLearningRate" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamEarlyStopping" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamBeta2" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:MLPRegressor" -> "ml:NeuralNetworkModule" [ label = "ds:hasModule" ];
	"ml:hasParamAlpha" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamShuffle" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamTol" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamMomentum" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasRegularizedRegressionMethod" -> "ml:hasTrainMethod" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamMaxIter" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:MLPClassifier" -> "xsd:float" [ label = "ml:hasParamEpsilon" ];
	"ml:MLPClassifier" -> "xsd:float" [ label = "ml:hasParamTol" ];
	"ml:BernoulliRBM" -> "xsd:int" [ label = "ml:hasParamNIter" ];
	"ml:RegularizedRegression" -> "ml:MLPRegressor" [ label = "ml:hasRegularizedRegressionMethod" ];
	"ml:MLPClassifier" -> "xsd:boolean" [ label = "ml:hasParamNesterovsMomentum" ];
	"ml:MLPClassifier" -> "xsd:int" [ label = "ml:hasParamMaxFun" ];
	"ml:MLPClassifier" -> "xsd:float" [ label = "ml:hasParamValidationFraction" ];
	"ml:MLPClassifier" -> "xsd:string" [ label = "ml:hasParamSolver" ];
	"ml:MLPClassifier" -> "xsd:float" [ label = "ml:hasParamAlpha" ];
	"ml:MLPClassifier" -> "xsd:float" [ label = "ml:hasParamPowerT" ];
	"ml:MLPClassifier" -> "xsd:boolean" [ label = "ml:hasParamShuffle" ];
	"ml:BinaryClassification" -> "ml:BernoulliRBM" [ label = "ml:hasBinaryClassificationMethod" ];
	"ml:MLPClassifier" -> "xsd:boolean" [ label = "ml:hasParamEarlyStopping" ];
	"ml:MLPClassifier" -> "xsd:int" [ label = "ml:hasParamMaxIter" ];
	"ml:MLPClassifier" -> "xsd:int" [ label = "ml:hasParamNIterNoChange" ];
	"ml:BernoulliRBM" -> "xsd:float" [ label = "ml:hasParamLearningRate" ];
	"ml:BernoulliRBM" -> "xsd:boolean" [ label = "ml:hasParamVerbose" ];
	"ml:MLPClassifier" -> "xsd:float" [ label = "ml:hasParamLearningRateInit" ];
	"ml:BernoulliRBM" -> "xsd:int" [ label = "ml:hasParamRandomState" ];
	"ml:MLPClassifier" -> "xsd:boolean" [ label = "ml:hasParamWarmStart" ];
	"ml:MLPClassifier" -> "xsd:string" [ label = "ml:hasParamActivation" ];
	"ml:BernoulliRBM" -> "xsd:int" [ label = "ml:hasParamBatchSize" ];
	"ml:MLPClassifier" -> "xsd:float" [ label = "ml:hasParamBeta2" ];
	"ml:MLPClassifier" -> "xsd:float" [ label = "ml:hasParamMomentum" ];
	"ml:MLPClassifier" -> "xsd:float" [ label = "ml:hasParamBeta1" ];
	"ml:BernoulliRBM" -> "xsd:int" [ label = "ml:hasParamNComponents" ];

}
