digraph ar2dtool_diagram { 
rankdir=LR;
size="1501"
node [shape = rectangle, color="orange"]; "ml:DictionaryLearningMethod" "ml:NMFMethod" "ml:MiniBatchDictionaryLearningMethod" "ml:MiniBatchNMFMethod" "ml:KernelPCAMethod" "ml:TruncatedSVDMethod" "ml:FastICAMethod" "ml:FactorAnalysisMethod" "ml:MiniBatchSparsePCAMethod" "ml:PCAMethod" "ml:IncrementalPCAMethod" "ml:SparseCoderMethod" "ml:SparsePCAMethod" "ml:LatentDirichletAllocationMethod" ; /*classes style*/
	"ml:hasParamVerbose" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamTransformAlgorithm" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamFreshRestartsMaxIter" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamAlpha" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamTransformMaxIter" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamL1Ratio" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamMaxNoImprovement" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamCallback" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamSvdSolver" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamAlgorithm" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamSvdMethod" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamTransformNNonzeroCoefs" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamPerpTol" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamFun" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamRemoveZeroEig" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamNOversamples" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamFitAlgorithm" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamCodeInit" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamRandomState" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamMaxDocUpdateIter" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamDegree" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamLearningDecay" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamDocTopicPrior" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamRidgeAlpha" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamShuffle" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamDictInit" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamFunArgs" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamFreshRestarts" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamDictionary" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamCopyX" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamIteratedPower" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamCoef0" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamInit" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamRotation" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamAlphaH" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamVInit" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamLearningOffset" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamBatchSize" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamNComponents" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamKernelParams" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamNIter" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamWInit" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamEvaluateEvery" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamMeanChangeTol" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamMaxIter" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamTransformAlpha" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamKernel" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamSolver" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamUInit" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamMethod" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamLearningMethod" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamSplitSign" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamEigenSolver" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamTol" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamGamma" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamWhitenSolver" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamFitInverseTransform" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasDecompositionMethod" -> "ml:hasPrepareTransformerMethod" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamWhiten" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamBetaLoss" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamTotalSamples" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamCopy" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamForgetFactor" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamPositiveDict" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamTopicWordPrior" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamNJobs" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamPowerIterationNormalizer" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamAlphaW" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamPositiveCode" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:MiniBatchNMFMethod" -> "xsd:int" [ label = "ml:hasParamFreshRestartsMaxIter" ];
	"ml:KernelPCAMethod" -> "xsd:boolean" [ label = "ml:hasParamRemoveZeroEig" ];
	"ml:KernelPCAMethod" -> "xsd:boolean" [ label = "ml:hasParamFitInverseTransform" ];
	"ml:DictionaryLearningMethod" -> "xsd:boolean" [ label = "ml:hasParamPositiveCode" ];
	"ml:Decomposition" -> "ml:FastICAMethod" [ label = "ml:hasDecompositionMethod" ];
	"ml:KernelPCAMethod" -> "xsd:string" [ label = "ml:hasParamEigenSolver" ];
	"ml:KernelPCAMethod" -> "xsd:string" [ label = "ml:hasParamKernelParams" ];
	"ml:MiniBatchNMFMethod" -> "xsd:boolean" [ label = "ml:hasParamFreshRestarts" ];
	"ml:MiniBatchNMFMethod" -> "xsd:float" [ label = "ml:hasParamBetaLoss" ];
	"ml:DictionaryLearningMethod" -> "xsd:int" [ label = "ml:hasParamTransformMaxIter" ];
	"ml:LatentDirichletAllocationMethod" -> "xsd:float" [ label = "ml:hasParamLearningDecay" ];
	"ml:DictionaryLearningMethod" -> "xsd:float" [ label = "ml:hasParamAlpha" ];
	"ml:KernelPCAMethod" -> "xsd:boolean" [ label = "ml:hasParamCopyX" ];
	"ml:MiniBatchSparsePCAMethod" -> "xsd:string" [ label = "ml:hasParamMethod" ];
	"ml:DictionaryLearningMethod" -> "xsd:string" [ label = "ml:hasParamDictInit" ];
	"ml:DictionaryLearningMethod" -> "xsd:boolean" [ label = "ml:hasParamSplitSign" ];
	"ml:PCAMethod" -> "xsd:string" [ label = "ml:hasParamPowerIterationNormalizer" ];
	"ml:KernelPCAMethod" -> "xsd:float" [ label = "ml:hasParamGamma" ];
	"ml:KernelPCAMethod" -> "xsd:float" [ label = "ml:hasParamDegree" ];
	"ml:SparseCoderMethod" -> "xsd:string" [ label = "ml:hasParamDictionary" ];
	"ml:MiniBatchNMFMethod" -> "xsd:string" [ label = "ml:hasParamInit" ];
	"ml:IncrementalPCAMethod" -> "xsd:int" [ label = "ml:hasParamBatchSize" ];
	"ml:IncrementalPCAMethod" -> "xsd:string" [ label = "ml:hasParamNComponents" ];
	"ml:LatentDirichletAllocationMethod" -> "xsd:string" [ label = "ml:hasParamNJobs" ];
	"ml:DictionaryLearningMethod" -> "xsd:string" [ label = "ml:hasParamTransformAlgorithm" ];
	"ml:LatentDirichletAllocationMethod" -> "xsd:int" [ label = "ml:hasParamTotalSamples" ];
	"ml:FactorAnalysisMethod" -> "xsd:string" [ label = "ml:hasParamSvdMethod" ];
	"ml:FastICAMethod" -> "xsd:string" [ label = "ml:hasParamAlgorithm" ];
	"ml:DictionaryLearningMethod" -> "xsd:float" [ label = "ml:hasParamTol" ];
	"ml:FastICAMethod" -> "xsd:string" [ label = "ml:hasParamWInit" ];
	"ml:TruncatedSVDMethod" -> "xsd:int" [ label = "ml:hasParamNIter" ];
	"ml:MiniBatchNMFMethod" -> "xsd:float" [ label = "ml:hasParamAlphaH" ];
	"ml:FactorAnalysisMethod" -> "xsd:int" [ label = "ml:hasParamIteratedPower" ];
	"ml:MiniBatchNMFMethod" -> "xsd:float" [ label = "ml:hasParamForgetFactor" ];
	"ml:FastICAMethod" -> "xsd:string" [ label = "ml:hasParamFunArgs" ];
	"ml:FactorAnalysisMethod" -> "xsd:string" [ label = "ml:hasParamRotation" ];
	"ml:NMFMethod" -> "xsd:string" [ label = "ml:hasParamSolver" ];
	"ml:DictionaryLearningMethod" -> "xsd:string" [ label = "ml:hasParamCodeInit" ];
	"ml:LatentDirichletAllocationMethod" -> "xsd:string" [ label = "ml:hasParamLearningMethod" ];
	"ml:KernelPCAMethod" -> "xsd:string" [ label = "ml:hasParamKernel" ];
	"ml:MiniBatchNMFMethod" -> "xsd:float" [ label = "ml:hasParamAlphaW" ];
	"ml:MiniBatchNMFMethod" -> "xsd:float" [ label = "ml:hasParamL1Ratio" ];
	"ml:DictionaryLearningMethod" -> "xsd:boolean" [ label = "ml:hasParamPositiveDict" ];
	"ml:MiniBatchDictionaryLearningMethod" -> "xsd:int" [ label = "ml:hasParamMaxNoImprovement" ];
	"ml:MiniBatchDictionaryLearningMethod" -> "xsd:boolean" [ label = "ml:hasParamShuffle" ];
	"ml:FastICAMethod" -> "xsd:boolean" [ label = "ml:hasParamWhiten" ];
	"ml:LatentDirichletAllocationMethod" -> "xsd:float" [ label = "ml:hasParamDocTopicPrior" ];
	"ml:LatentDirichletAllocationMethod" -> "xsd:float" [ label = "ml:hasParamPerpTol" ];
	"ml:MiniBatchNMFMethod" -> "xsd:int" [ label = "ml:hasParamMaxIter" ];
	"ml:KernelPCAMethod" -> "xsd:float" [ label = "ml:hasParamCoef0" ];
	"ml:FactorAnalysisMethod" -> "xsd:boolean" [ label = "ml:hasParamCopy" ];
	"ml:PCAMethod" -> "xsd:int" [ label = "ml:hasParamNOversamples" ];
	"ml:SparsePCAMethod" -> "xsd:boolean" [ label = "ml:hasParamVerbose" ];
	"ml:DictionaryLearningMethod" -> "xsd:float" [ label = "ml:hasParamTransformAlpha" ];
	"ml:SparsePCAMethod" -> "xsd:string" [ label = "ml:hasParamUInit" ];
	"ml:FastICAMethod" -> "xsd:int" [ label = "ml:hasParamRandomState" ];
	"ml:PCAMethod" -> "xsd:string" [ label = "ml:hasParamSvdSolver" ];
	"ml:FastICAMethod" -> "xsd:string" [ label = "ml:hasParamWhitenSolver" ];
	"ml:LatentDirichletAllocationMethod" -> "xsd:float" [ label = "ml:hasParamTopicWordPrior" ];
	"ml:DictionaryLearningMethod" -> "xsd:int" [ label = "ml:hasParamTransformNNonzeroCoefs" ];
	"ml:FastICAMethod" -> "xsd:string" [ label = "ml:hasParamFun" ];
	"ml:LatentDirichletAllocationMethod" -> "xsd:int" [ label = "ml:hasParamEvaluateEvery" ];
	"ml:SparsePCAMethod" -> "xsd:string" [ label = "ml:hasParamVInit" ];
	"ml:DictionaryLearningMethod" -> "xsd:string" [ label = "ml:hasParamCallback" ];
	"ml:DictionaryLearningMethod" -> "xsd:string" [ label = "ml:hasParamFitAlgorithm" ];
	"ml:MiniBatchSparsePCAMethod" -> "xsd:float" [ label = "ml:hasParamRidgeAlpha" ];
	"ml:LatentDirichletAllocationMethod" -> "xsd:float" [ label = "ml:hasParamMeanChangeTol" ];
	"ml:LatentDirichletAllocationMethod" -> "xsd:float" [ label = "ml:hasParamLearningOffset" ];
	"ml:LatentDirichletAllocationMethod" -> "xsd:int" [ label = "ml:hasParamMaxDocUpdateIter" ];

}
