digraph ar2dtool_diagram { 
rankdir=LR;
size="1501"
node [shape = rectangle, color="orange"]; "ml:AdaBoostRegressorMethod" "ml:StackingClassifierMethod" "ml:HistGradientBoostingRegressorMethod" "ml:AdaBoostClassifierMethod" "ml:RandomForestRegressorMethod" "ml:GradientBoostingClassifierMethod" "ml:ExtraTreesClassifierMethod" "ml:GradientBoostingRegressorMethod" "ml:RandomForestClassifierMethod" "ml:ExtraTreesRegressorMethod" "ml:BaggingClassifierMethod" "ml:BaggingRegressorMethod" "ml:RandomTreesEmbeddingMethod" "ml:VotingClassifierMethod" "ml:IsolationForestMethod" "ml:HistGradientBoostingClassifierMethod" ; /*classes style*/
	"ml:hasParamVerbose" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamAlpha" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamCv" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamWarmStart" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasBoostingRegressionMethod" -> "ml:hasTrainMethod" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamCcpAlpha" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamMinWeightFractionLeaf" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamStackMethod" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamMaxFeatures" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamAlgorithm" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamNIterNoChange" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasRandomForestRegressionMethod" -> "ml:hasTrainMethod" [ label = "rdfs:subPropertyOf" ];
	"ml:hasDataProcessingMethod" -> "ml:hasPrepareTransformerMethod" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamVoting" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamL2Regularization" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamCriterion" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamRandomState" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamEarlyStopping" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamMaxSamples" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamSparseOutput" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamMonotonicCst" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamScoring" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamClassWeight" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasClusteringMethod" -> "ml:hasTrainMethod" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamBootstrap" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamMinImpurityDecrease" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamInteractionCst" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamMinSamplesLeaf" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamLearningRate" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamInit" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamEstimator" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamPassthrough" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamMinSamplesSplit" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamMaxDepth" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamMaxBins" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamContamination" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamSubsample" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamMaxIter" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasBinaryClassificationMethod" -> "ml:hasTrainMethod" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamMaxLeafNodes" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamValidationFraction" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamTol" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasMulticlassClassificationMethod" -> "ml:hasTrainMethod" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamCategoricalFeatures" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamLoss" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamBootstrapFeatures" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamFinalEstimator" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasRegularizedRegressionMethod" -> "ml:hasTrainMethod" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamEstimators" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamNJobs" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamNEstimators" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamFlattenTransform" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamOobScore" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamQuantile" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:ExtraTreesClassifierMethod" -> "xsd:string" [ label = "ml:hasParamCriterion" ];
	"ml:ExtraTreesClassifierMethod" -> "xsd:float" [ label = "ml:hasParamCcpAlpha" ];
	"ml:HistGradientBoostingClassifierMethod" -> "xsd:float" [ label = "ml:hasParamL2Regularization" ];
	"ml:RandomForestRegressorMethod" -> "xsd:boolean" [ label = "ml:hasParamBootstrap" ];
	"ml:GradientBoostingClassifierMethod" -> "xsd:float" [ label = "ml:hasParamValidationFraction" ];
	"ml:IsolationForestMethod" -> "xsd:float" [ label = "ml:hasParamContamination" ];
	"ml:ExtraTreesClassifierMethod" -> "xsd:boolean" [ label = "ml:hasParamOobScore" ];
	"ml:StackingClassifierMethod" -> "xsd:string" [ label = "ml:hasParamFinalEstimator" ];
	"ml:RandomTreesEmbeddingMethod" -> "xsd:float" [ label = "ml:hasParamMinWeightFractionLeaf" ];
	"ml:GradientBoostingClassifierMethod" -> "xsd:int" [ label = "ml:hasParamMinSamplesSplit" ];
	"ml:HistGradientBoostingRegressorMethod" -> "xsd:float" [ label = "ml:hasParamQuantile" ];
	"ml:GradientBoostingRegressorMethod" -> "xsd:float" [ label = "ml:hasParamAlpha" ];
	"ml:StackingClassifierMethod" -> "xsd:int" [ label = "ml:hasParamCv" ];
	"ml:HistGradientBoostingClassifierMethod" -> "xsd:string" [ label = "ml:hasParamScoring" ];
	"ml:VotingClassifierMethod" -> "xsd:boolean" [ label = "ml:hasParamFlattenTransform" ];
	"ml:HistGradientBoostingClassifierMethod" -> "xsd:boolean" [ label = "ml:hasParamEarlyStopping" ];
	"ml:GradientBoostingClassifierMethod" -> "xsd:int" [ label = "ml:hasParamNIterNoChange" ];
	"ml:AdaBoostClassifierMethod" -> "xsd:float" [ label = "ml:hasParamLearningRate" ];
	"ml:GradientBoostingClassifierMethod" -> "xsd:float" [ label = "ml:hasParamSubsample" ];
	"ml:StackingClassifierMethod" -> "xsd:string" [ label = "ml:hasParamStackMethod" ];
	"ml:RandomForestClassifierMethod" -> "xsd:float" [ label = "ml:hasParamMaxSamples" ];
	"ml:HistGradientBoostingClassifierMethod" -> "xsd:int" [ label = "ml:hasParamMaxFeatures" ];
	"ml:RandomTreesEmbeddingMethod" -> "xsd:boolean" [ label = "ml:hasParamSparseOutput" ];
	"ml:GradientBoostingClassifierMethod" -> "xsd:string" [ label = "ml:hasParamInit" ];
	"ml:HistGradientBoostingClassifierMethod" -> "xsd:string" [ label = "ml:hasParamCategoricalFeatures" ];
	"ml:HistGradientBoostingClassifierMethod" -> "xsd:int" [ label = "ml:hasParamInteractionCst" ];
	"ml:RandomTreesEmbeddingMethod" -> "xsd:int" [ label = "ml:hasParamNJobs" ];
	"ml:StackingClassifierMethod" -> "xsd:string" [ label = "ml:hasParamEstimators" ];
	"ml:HistGradientBoostingClassifierMethod" -> "xsd:int" [ label = "ml:hasParamMaxBins" ];
	"ml:DataProcessing" -> "ml:RandomTreesEmbeddingMethod" [ label = "ml:hasDataProcessingMethod" ];
	"ml:RandomTreesEmbeddingMethod" -> "xsd:string" [ label = "ml:hasParamMaxDepth" ];
	"ml:AdaBoostClassifierMethod" -> "xsd:string" [ label = "ml:hasParamAlgorithm" ];
	"ml:GradientBoostingClassifierMethod" -> "xsd:float" [ label = "ml:hasParamTol" ];
	"ml:StackingClassifierMethod" -> "xsd:boolean" [ label = "ml:hasParamPassthrough" ];
	"ml:VotingClassifierMethod" -> "xsd:string" [ label = "ml:hasParamVoting" ];
	"ml:RegularizedRegression" -> "ml:BaggingRegressorMethod" [ label = "ml:hasRegularizedRegressionMethod" ];
	"ml:AdaBoostRegressorMethod" -> "xsd:string" [ label = "ml:hasParamLoss" ];
	"ml:HistGradientBoostingClassifierMethod" -> "xsd:string" [ label = "ml:hasParamMonotonicCst" ];
	"ml:BaggingClassifierMethod" -> "xsd:boolean" [ label = "ml:hasParamBootstrapFeatures" ];
	"ml:Clustering" -> "ml:IsolationForestMethod" [ label = "ml:hasClusteringMethod" ];
	"ml:HistGradientBoostingClassifierMethod" -> "xsd:int" [ label = "ml:hasParamMaxIter" ];
	"ml:BinaryClassification" -> "ml:VotingClassifierMethod" [ label = "ml:hasBinaryClassificationMethod" ];
	"ml:RandomForestRegression" -> "ml:ExtraTreesRegressorMethod" [ label = "ml:hasRandomForestRegressionMethod" ];
	"ml:ExtraTreesClassifierMethod" -> "xsd:string" [ label = "ml:hasParamClassWeight" ];
	"ml:BaggingRegressorMethod" -> "xsd:boolean" [ label = "ml:hasParamVerbose" ];
	"ml:IsolationForestMethod" -> "xsd:int" [ label = "ml:hasParamRandomState" ];
	"ml:ExtraTreesClassifierMethod" -> "xsd:int" [ label = "ml:hasParamNEstimators" ];
	"ml:HistGradientBoostingRegressorMethod" -> "xsd:float" [ label = "ml:hasParamMinSamplesLeaf" ];
	"ml:BoostingRegression" -> "ml:AdaBoostRegressorMethod" [ label = "ml:hasBoostingRegressionMethod" ];
	"ml:ExtraTreesRegressorMethod" -> "xsd:boolean" [ label = "ml:hasParamWarmStart" ];
	"ml:AdaBoostClassifierMethod" -> "xsd:string" [ label = "ml:hasParamEstimator" ];
	"ml:ExtraTreesRegressorMethod" -> "xsd:string" [ label = "ml:hasParamMaxLeafNodes" ];
	"ml:ExtraTreesRegressorMethod" -> "xsd:float" [ label = "ml:hasParamMinImpurityDecrease" ];
	"ml:MulticlassClassification" -> "ml:AdaBoostClassifierMethod" [ label = "ml:hasMulticlassClassificationMethod" ];

}
