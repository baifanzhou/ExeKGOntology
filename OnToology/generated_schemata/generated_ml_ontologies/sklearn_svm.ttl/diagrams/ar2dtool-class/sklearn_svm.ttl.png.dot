digraph ar2dtool_diagram { 
rankdir=LR;
size="1501"
node [shape = rectangle, color="orange"]; "ml:SVCMethod" "ml:NuSVCMethod" "ml:LinearSVCMethod" "ml:SVRMethod" "ml:OneClassSVMMethod" "ml:LinearSVRMethod" ; /*classes style*/
	"ml:hasParamInterceptScaling" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamDecisionFunctionShape" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamFitIntercept" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamCoef0" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamDual" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamLoss" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamC" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamRandomState" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasBinaryClassificationMethod" -> "ml:hasTrainMethod" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamVerbose" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamEpsilon" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamClassWeight" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamShrinking" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamPenalty" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamGamma" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasSupportVectorRegressionMethod" -> "ml:hasTrainMethod" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamKernel" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamBreakTies" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamCacheSize" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamNu" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamProbability" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasRegularizedRegressionMethod" -> "ml:hasTrainMethod" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamTol" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamDegree" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamMultiClass" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:hasParamMaxIter" -> "ds:hasParameter" [ label = "rdfs:subPropertyOf" ];
	"ml:LinearSVCMethod" -> "xsd:float" [ label = "ml:hasParamInterceptScaling" ];
	"ml:LinearSVRMethod" -> "xsd:float" [ label = "ml:hasParamEpsilon" ];
	"ml:SVRMethod" -> "xsd:float" [ label = "ml:hasParamTol" ];
	"ml:NuSVCMethod" -> "xsd:string" [ label = "ml:hasParamDecisionFunctionShape" ];
	"ml:LinearSVCMethod" -> "xsd:float" [ label = "ml:hasParamC" ];
	"ml:RegularizedRegression" -> "ml:OneClassSVMMethod" [ label = "ml:hasRegularizedRegressionMethod" ];
	"ml:LinearSVCMethod" -> "xsd:string" [ label = "ml:hasParamLoss" ];
	"ml:NuSVCMethod" -> "xsd:boolean" [ label = "ml:hasParamShrinking" ];
	"ml:NuSVCMethod" -> "xsd:string" [ label = "ml:hasParamKernel" ];
	"ml:LinearSVCMethod" -> "xsd:boolean" [ label = "ml:hasParamDual" ];
	"ml:NuSVCMethod" -> "xsd:boolean" [ label = "ml:hasParamProbability" ];
	"ml:BinaryClassification" -> "ml:LinearSVCMethod" [ label = "ml:hasBinaryClassificationMethod" ];
	"ml:NuSVCMethod" -> "xsd:int" [ label = "ml:hasParamMaxIter" ];
	"ml:NuSVCMethod" -> "xsd:float" [ label = "ml:hasParamCoef0" ];
	"ml:NuSVCMethod" -> "xsd:float" [ label = "ml:hasParamCacheSize" ];
	"ml:NuSVCMethod" -> "xsd:boolean" [ label = "ml:hasParamBreakTies" ];
	"ml:NuSVCMethod" -> "xsd:float" [ label = "ml:hasParamNu" ];
	"ml:LinearSVCMethod" -> "xsd:string" [ label = "ml:hasParamClassWeight" ];
	"ml:LinearSVCMethod" -> "xsd:boolean" [ label = "ml:hasParamFitIntercept" ];
	"ml:SVCMethod" -> "xsd:boolean" [ label = "ml:hasParamVerbose" ];
	"ml:LinearSVCMethod" -> "xsd:int" [ label = "ml:hasParamRandomState" ];
	"ml:NuSVCMethod" -> "xsd:float" [ label = "ml:hasParamGamma" ];
	"ml:NuSVCMethod" -> "xsd:int" [ label = "ml:hasParamDegree" ];
	"ml:SupportVectorRegression" -> "ml:LinearSVRMethod" [ label = "ml:hasSupportVectorRegressionMethod" ];
	"ml:LinearSVCMethod" -> "xsd:string" [ label = "ml:hasParamMultiClass" ];
	"ml:LinearSVCMethod" -> "xsd:string" [ label = "ml:hasParamPenalty" ];

}
