[ {
  "@id" : "_:genid1",
  "@type" : [ "http://www.w3.org/2002/07/owl#Ontology" ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#AtomicMethod",
  "@type" : [ "http://www.w3.org/2002/07/owl#Class" ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#AtomicTask",
  "@type" : [ "http://www.w3.org/2002/07/owl#Class" ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#Module",
  "@type" : [ "http://www.w3.org/2002/07/owl#Class" ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Acorr",
  "@type" : [ "http://www.w3.org/2002/07/owl#Class" ],
  "http://www.w3.org/2000/01/rdf-schema#comment" : [ {
    "@value" : "Plot the autocorrelation of *x*.\n\nParameters\n----------\nx : array-like\n\ndetrend : callable, default: `.mlab.detrend_none` (no detrending)\n    A detrending function applied to *x*.  It must have the\n    signature ::\n\n        detrend(x: np.ndarray) -> np.ndarray\n\nnormed : bool, default: True\n    If ``True``, input vectors are normalised to unit length.\n\nusevlines : bool, default: True\n    Determines the plot style.\n\n    If ``True``, vertical lines are plotted from 0 to the acorr value\n    using `.Axes.vlines`. Additionally, a horizontal line is plotted\n    at y=0 using `.Axes.axhline`.\n\n    If ``False``, markers are plotted at the acorr values using\n    `.Axes.plot`.\n\nmaxlags : int, default: 10\n    Number of lags to show. If ``None``, will return all\n    ``2 * len(x) - 1`` lags.\n\nReturns\n-------\nlags : array (length ``2*maxlags+1``)\n    The lag vector.\nc : array  (length ``2*maxlags+1``)\n    The auto correlation vector.\nline : `.LineCollection` or `.Line2D`\n    `.Artist` added to the Axes of the correlation:\n\n    - `.LineCollection` if *usevlines* is True.\n    - `.Line2D` if *usevlines* is False.\nb : `~matplotlib.lines.Line2D` or None\n    Horizontal line at 0 if *usevlines* is True\n    None *usevlines* is False.\n\nOther Parameters\n----------------\nlinestyle : `~matplotlib.lines.Line2D` property, optional\n    The linestyle for plotting the data points.\n    Only used if *usevlines* is ``False``.\n\nmarker : str, default: 'o'\n    The marker for plotting the data points.\n    Only used if *usevlines* is ``False``.\n\ndata : indexable object, optional\n    If given, the following parameters also accept a string ``s``, which is\n    interpreted as ``data[s]`` (unless this raises an exception):\n\n    *x*\n\n**kwargs\n    Additional parameters are passed to `.Axes.vlines` and\n    `.Axes.axhline` if *usevlines* is ``True``; otherwise they are\n    passed to `.Axes.plot`.\n\nNotes\n-----\nThe cross correlation is performed with `numpy.correlate` with\n``mode = \"full\"``."
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subClassOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#AtomicMethod"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#PlotMethod"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#PyplotModule"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#AngleSpectrum",
  "@type" : [ "http://www.w3.org/2002/07/owl#Class" ],
  "http://www.w3.org/2000/01/rdf-schema#comment" : [ {
    "@value" : "Plot the angle spectrum.\n\nCompute the angle spectrum (wrapped phase spectrum) of *x*.\nData is padded to a length of *pad_to* and the windowing function\n*window* is applied to the signal.\n\nParameters\n----------\nx : 1-D array or sequence\n    Array or sequence containing the data.\n\nFs : float, default: 2\n    The sampling frequency (samples per time unit).  It is used to calculate\n    the Fourier frequencies, *freqs*, in cycles per time unit.\n\nwindow : callable or ndarray, default: `.window_hanning`\n    A function or a vector of length *NFFT*.  To create window vectors see\n    `.window_hanning`, `.window_none`, `numpy.blackman`, `numpy.hamming`,\n    `numpy.bartlett`, `scipy.signal`, `scipy.signal.get_window`, etc.  If a\n    function is passed as the argument, it must take a data segment as an\n    argument and return the windowed version of the segment.\n\nsides : {'default', 'onesided', 'twosided'}, optional\n    Which sides of the spectrum to return. 'default' is one-sided for real\n    data and two-sided for complex data. 'onesided' forces the return of a\n    one-sided spectrum, while 'twosided' forces two-sided.\n\npad_to : int, optional\n    The number of points to which the data segment is padded when performing\n    the FFT.  While not increasing the actual resolution of the spectrum (the\n    minimum distance between resolvable peaks), this can give more points in\n    the plot, allowing for more detail. This corresponds to the *n* parameter\n    in the call to `~numpy.fft.fft`.  The default is None, which sets *pad_to*\n    equal to the length of the input signal (i.e. no padding).\n\nFc : int, default: 0\n    The center frequency of *x*, which offsets the x extents of the\n    plot to reflect the frequency range used when a signal is acquired\n    and then filtered and downsampled to baseband.\n\nReturns\n-------\nspectrum : 1-D array\n    The values for the angle spectrum in radians (real valued).\n\nfreqs : 1-D array\n    The frequencies corresponding to the elements in *spectrum*.\n\nline : `~matplotlib.lines.Line2D`\n    The line created by this function.\n\nOther Parameters\n----------------\ndata : indexable object, optional\n    If given, the following parameters also accept a string ``s``, which is\n    interpreted as ``data[s]`` (unless this raises an exception):\n\n    *x*\n\n**kwargs\n    Keyword arguments control the `.Line2D` properties:\n\n    Properties:\n    agg_filter: a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array and two offsets from the bottom left corner of the image\n    alpha: scalar or None\n    animated: bool\n    antialiased or aa: bool\n    clip_box: `~matplotlib.transforms.BboxBase` or None\n    clip_on: bool\n    clip_path: Patch or (Path, Transform) or None\n    color or c: color\n    dash_capstyle: `.CapStyle` or {'butt', 'projecting', 'round'}\n    dash_joinstyle: `.JoinStyle` or {'miter', 'round', 'bevel'}\n    dashes: sequence of floats (on/off ink in points) or (None, None)\n    data: (2, N) array or two 1D arrays\n    drawstyle or ds: {'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default: 'default'\n    figure: `~matplotlib.figure.Figure`\n    fillstyle: {'full', 'left', 'right', 'bottom', 'top', 'none'}\n    gapcolor: color or None\n    gid: str\n    in_layout: bool\n    label: object\n    linestyle or ls: {'-', '--', '-.', ':', '', (offset, on-off-seq), ...}\n    linewidth or lw: float\n    marker: marker style string, `~.path.Path` or `~.markers.MarkerStyle`\n    markeredgecolor or mec: color\n    markeredgewidth or mew: float\n    markerfacecolor or mfc: color\n    markerfacecoloralt or mfcalt: color\n    markersize or ms: float\n    markevery: None or int or (int, int) or slice or list[int] or float or (float, float) or list[bool]\n    mouseover: bool\n    path_effects: list of `.AbstractPathEffect`\n    picker: float or callable[[Artist, Event], tuple[bool, dict]]\n    pickradius: float\n    rasterized: bool\n    sketch_params: (scale: float, length: float, randomness: float)\n    snap: bool or None\n    solid_capstyle: `.CapStyle` or {'butt', 'projecting', 'round'}\n    solid_joinstyle: `.JoinStyle` or {'miter', 'round', 'bevel'}\n    transform: unknown\n    url: str\n    visible: bool\n    xdata: 1D array\n    ydata: 1D array\n    zorder: float\n\nSee Also\n--------\nmagnitude_spectrum\n    Plots the magnitudes of the corresponding frequencies.\nphase_spectrum\n    Plots the unwrapped version of this function.\nspecgram\n    Can plot the angle spectrum of segments within the signal in a\n    colormap."
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subClassOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#AtomicMethod"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#PlotMethod"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#PyplotModule"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#AreaPlot",
  "@type" : [ "http://www.w3.org/2002/07/owl#Class" ],
  "http://www.w3.org/2000/01/rdf-schema#subClassOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#AtomicTask"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Plot"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Bar",
  "@type" : [ "http://www.w3.org/2002/07/owl#Class" ],
  "http://www.w3.org/2000/01/rdf-schema#comment" : [ {
    "@value" : "Make a bar plot.\n\nThe bars are positioned at *x* with the given *align*\\ment. Their\ndimensions are given by *height* and *width*. The vertical baseline\nis *bottom* (default 0).\n\nMany parameters can take either a single value applying to all bars\nor a sequence of values, one for each bar.\n\nParameters\n----------\nx : float or array-like\n    The x coordinates of the bars. See also *align* for the\n    alignment of the bars to the coordinates.\n\nheight : float or array-like\n    The height(s) of the bars.\n\n    Note that if *bottom* has units (e.g. datetime), *height* should be in\n    units that are a difference from the value of *bottom* (e.g. timedelta).\n\nwidth : float or array-like, default: 0.8\n    The width(s) of the bars.\n\n    Note that if *x* has units (e.g. datetime), then *width* should be in\n    units that are a difference (e.g. timedelta) around the *x* values.\n\nbottom : float or array-like, default: 0\n    The y coordinate(s) of the bottom side(s) of the bars.\n\n    Note that if *bottom* has units, then the y-axis will get a Locator and\n    Formatter appropriate for the units (e.g. dates, or categorical).\n\nalign : {'center', 'edge'}, default: 'center'\n    Alignment of the bars to the *x* coordinates:\n\n    - 'center': Center the base on the *x* positions.\n    - 'edge': Align the left edges of the bars with the *x* positions.\n\n    To align the bars on the right edge pass a negative *width* and\n    ``align='edge'``.\n\nReturns\n-------\n`.BarContainer`\n    Container with all the bars and optionally errorbars.\n\nOther Parameters\n----------------\ncolor : color or list of color, optional\n    The colors of the bar faces.\n\nedgecolor : color or list of color, optional\n    The colors of the bar edges.\n\nlinewidth : float or array-like, optional\n    Width of the bar edge(s). If 0, don't draw edges.\n\ntick_label : str or list of str, optional\n    The tick labels of the bars.\n    Default: None (Use default numeric labels.)\n\nlabel : str or list of str, optional\n    A single label is attached to the resulting `.BarContainer` as a\n    label for the whole dataset.\n    If a list is provided, it must be the same length as *x* and\n    labels the individual bars. Repeated labels are not de-duplicated\n    and will cause repeated label entries, so this is best used when\n    bars also differ in style (e.g., by passing a list to *color*.)\n\nxerr, yerr : float or array-like of shape(N,) or shape(2, N), optional\n    If not *None*, add horizontal / vertical errorbars to the bar tips.\n    The values are +/- sizes relative to the data:\n\n    - scalar: symmetric +/- values for all bars\n    - shape(N,): symmetric +/- values for each bar\n    - shape(2, N): Separate - and + values for each bar. First row\n      contains the lower errors, the second row contains the upper\n      errors.\n    - *None*: No errorbar. (Default)\n\n    See :doc:`/gallery/statistics/errorbar_features` for an example on\n    the usage of *xerr* and *yerr*.\n\necolor : color or list of color, default: 'black'\n    The line color of the errorbars.\n\ncapsize : float, default: :rc:`errorbar.capsize`\n   The length of the error bar caps in points.\n\nerror_kw : dict, optional\n    Dictionary of keyword arguments to be passed to the\n    `~.Axes.errorbar` method. Values of *ecolor* or *capsize* defined\n    here take precedence over the independent keyword arguments.\n\nlog : bool, default: False\n    If *True*, set the y-axis to be log scale.\n\ndata : indexable object, optional\n    If given, all parameters also accept a string ``s``, which is\n    interpreted as ``data[s]`` (unless this raises an exception).\n\n**kwargs : `.Rectangle` properties\n\nProperties:\n    agg_filter: a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array and two offsets from the bottom left corner of the image\n    alpha: scalar or None\n    angle: unknown\n    animated: bool\n    antialiased or aa: bool or None\n    bounds: (left, bottom, width, height)\n    capstyle: `.CapStyle` or {'butt', 'projecting', 'round'}\n    clip_box: `~matplotlib.transforms.BboxBase` or None\n    clip_on: bool\n    clip_path: Patch or (Path, Transform) or None\n    color: color\n    edgecolor or ec: color or None\n    facecolor or fc: color or None\n    figure: `~matplotlib.figure.Figure`\n    fill: bool\n    gid: str\n    hatch: {'/', '\\\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}\n    height: unknown\n    in_layout: bool\n    joinstyle: `.JoinStyle` or {'miter', 'round', 'bevel'}\n    label: object\n    linestyle or ls: {'-', '--', '-.', ':', '', (offset, on-off-seq), ...}\n    linewidth or lw: float or None\n    mouseover: bool\n    path_effects: list of `.AbstractPathEffect`\n    picker: None or bool or float or callable\n    rasterized: bool\n    sketch_params: (scale: float, length: float, randomness: float)\n    snap: bool or None\n    transform: `~matplotlib.transforms.Transform`\n    url: str\n    visible: bool\n    width: unknown\n    x: unknown\n    xy: (float, float)\n    y: unknown\n    zorder: float\n\nSee Also\n--------\nbarh : Plot a horizontal bar plot.\n\nNotes\n-----\nStacked bars can be achieved by passing individual *bottom* values per\nbar. See :doc:`/gallery/lines_bars_and_markers/bar_stacked`."
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subClassOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#AtomicMethod"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#PlotMethod"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#PyplotModule"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#BarPlot",
  "@type" : [ "http://www.w3.org/2002/07/owl#Class" ],
  "http://www.w3.org/2000/01/rdf-schema#subClassOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#AtomicTask"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Plot"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Barh",
  "@type" : [ "http://www.w3.org/2002/07/owl#Class" ],
  "http://www.w3.org/2000/01/rdf-schema#comment" : [ {
    "@value" : "Make a horizontal bar plot.\n\nThe bars are positioned at *y* with the given *align*\\ment. Their\ndimensions are given by *width* and *height*. The horizontal baseline\nis *left* (default 0).\n\nMany parameters can take either a single value applying to all bars\nor a sequence of values, one for each bar.\n\nParameters\n----------\ny : float or array-like\n    The y coordinates of the bars. See also *align* for the\n    alignment of the bars to the coordinates.\n\nwidth : float or array-like\n    The width(s) of the bars.\n\n    Note that if *left* has units (e.g. datetime), *width* should be in\n    units that are a difference from the value of *left* (e.g. timedelta).\n\nheight : float or array-like, default: 0.8\n    The heights of the bars.\n\n    Note that if *y* has units (e.g. datetime), then *height* should be in\n    units that are a difference (e.g. timedelta) around the *y* values.\n\nleft : float or array-like, default: 0\n    The x coordinates of the left side(s) of the bars.\n\n    Note that if *left* has units, then the x-axis will get a Locator and\n    Formatter appropriate for the units (e.g. dates, or categorical).\n\nalign : {'center', 'edge'}, default: 'center'\n    Alignment of the base to the *y* coordinates*:\n\n    - 'center': Center the bars on the *y* positions.\n    - 'edge': Align the bottom edges of the bars with the *y*\n      positions.\n\n    To align the bars on the top edge pass a negative *height* and\n    ``align='edge'``.\n\nReturns\n-------\n`.BarContainer`\n    Container with all the bars and optionally errorbars.\n\nOther Parameters\n----------------\ncolor : color or list of color, optional\n    The colors of the bar faces.\n\nedgecolor : color or list of color, optional\n    The colors of the bar edges.\n\nlinewidth : float or array-like, optional\n    Width of the bar edge(s). If 0, don't draw edges.\n\ntick_label : str or list of str, optional\n    The tick labels of the bars.\n    Default: None (Use default numeric labels.)\n\nlabel : str or list of str, optional\n    A single label is attached to the resulting `.BarContainer` as a\n    label for the whole dataset.\n    If a list is provided, it must be the same length as *y* and\n    labels the individual bars. Repeated labels are not de-duplicated\n    and will cause repeated label entries, so this is best used when\n    bars also differ in style (e.g., by passing a list to *color*.)\n\nxerr, yerr : float or array-like of shape(N,) or shape(2, N), optional\n    If not *None*, add horizontal / vertical errorbars to the bar tips.\n    The values are +/- sizes relative to the data:\n\n    - scalar: symmetric +/- values for all bars\n    - shape(N,): symmetric +/- values for each bar\n    - shape(2, N): Separate - and + values for each bar. First row\n      contains the lower errors, the second row contains the upper\n      errors.\n    - *None*: No errorbar. (default)\n\n    See :doc:`/gallery/statistics/errorbar_features` for an example on\n    the usage of *xerr* and *yerr*.\n\necolor : color or list of color, default: 'black'\n    The line color of the errorbars.\n\ncapsize : float, default: :rc:`errorbar.capsize`\n   The length of the error bar caps in points.\n\nerror_kw : dict, optional\n    Dictionary of keyword arguments to be passed to the\n    `~.Axes.errorbar` method. Values of *ecolor* or *capsize* defined\n    here take precedence over the independent keyword arguments.\n\nlog : bool, default: False\n    If ``True``, set the x-axis to be log scale.\n\ndata : indexable object, optional\n    If given, all parameters also accept a string ``s``, which is\n    interpreted as ``data[s]`` (unless this raises an exception).\n\n**kwargs : `.Rectangle` properties\n\nProperties:\n    agg_filter: a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array and two offsets from the bottom left corner of the image\n    alpha: scalar or None\n    angle: unknown\n    animated: bool\n    antialiased or aa: bool or None\n    bounds: (left, bottom, width, height)\n    capstyle: `.CapStyle` or {'butt', 'projecting', 'round'}\n    clip_box: `~matplotlib.transforms.BboxBase` or None\n    clip_on: bool\n    clip_path: Patch or (Path, Transform) or None\n    color: color\n    edgecolor or ec: color or None\n    facecolor or fc: color or None\n    figure: `~matplotlib.figure.Figure`\n    fill: bool\n    gid: str\n    hatch: {'/', '\\\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}\n    height: unknown\n    in_layout: bool\n    joinstyle: `.JoinStyle` or {'miter', 'round', 'bevel'}\n    label: object\n    linestyle or ls: {'-', '--', '-.', ':', '', (offset, on-off-seq), ...}\n    linewidth or lw: float or None\n    mouseover: bool\n    path_effects: list of `.AbstractPathEffect`\n    picker: None or bool or float or callable\n    rasterized: bool\n    sketch_params: (scale: float, length: float, randomness: float)\n    snap: bool or None\n    transform: `~matplotlib.transforms.Transform`\n    url: str\n    visible: bool\n    width: unknown\n    x: unknown\n    xy: (float, float)\n    y: unknown\n    zorder: float\n\nSee Also\n--------\nbar : Plot a vertical bar plot.\n\nNotes\n-----\nStacked bars can be achieved by passing individual *left* values per\nbar. See\n:doc:`/gallery/lines_bars_and_markers/horizontal_barchart_distribution`."
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subClassOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#AtomicMethod"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#PlotMethod"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#PyplotModule"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#BoxPlot",
  "@type" : [ "http://www.w3.org/2002/07/owl#Class" ],
  "http://www.w3.org/2000/01/rdf-schema#subClassOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#AtomicTask"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Plot"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Boxplot",
  "@type" : [ "http://www.w3.org/2002/07/owl#Class" ],
  "http://www.w3.org/2000/01/rdf-schema#comment" : [ {
    "@value" : "Draw a box and whisker plot.\n\nThe box extends from the first quartile (Q1) to the third\nquartile (Q3) of the data, with a line at the median.\nThe whiskers extend from the box to the farthest data point\nlying within 1.5x the inter-quartile range (IQR) from the box.\nFlier points are those past the end of the whiskers.\nSee https://en.wikipedia.org/wiki/Box_plot for reference.\n\n.. code-block:: none\n\n          Q1-1.5IQR   Q1   median  Q3   Q3+1.5IQR\n                       |-----:-----|\n       o      |--------|     :     |--------|    o  o\n                       |-----:-----|\n     flier             <----------->            fliers\n                            IQR\n\n\nParameters\n----------\nx : Array or a sequence of vectors.\n    The input data.  If a 2D array, a boxplot is drawn for each column\n    in *x*.  If a sequence of 1D arrays, a boxplot is drawn for each\n    array in *x*.\n\nnotch : bool, default: False\n    Whether to draw a notched boxplot (`True`), or a rectangular\n    boxplot (`False`).  The notches represent the confidence interval\n    (CI) around the median.  The documentation for *bootstrap*\n    describes how the locations of the notches are computed by\n    default, but their locations may also be overridden by setting the\n    *conf_intervals* parameter.\n\n    .. note::\n\n        In cases where the values of the CI are less than the\n        lower quartile or greater than the upper quartile, the\n        notches will extend beyond the box, giving it a\n        distinctive \"flipped\" appearance. This is expected\n        behavior and consistent with other statistical\n        visualization packages.\n\nsym : str, optional\n    The default symbol for flier points.  An empty string ('') hides\n    the fliers.  If `None`, then the fliers default to 'b+'.  More\n    control is provided by the *flierprops* parameter.\n\nvert : bool, default: True\n    If `True`, draws vertical boxes.\n    If `False`, draw horizontal boxes.\n\nwhis : float or (float, float), default: 1.5\n    The position of the whiskers.\n\n    If a float, the lower whisker is at the lowest datum above\n    ``Q1 - whis*(Q3-Q1)``, and the upper whisker at the highest datum\n    below ``Q3 + whis*(Q3-Q1)``, where Q1 and Q3 are the first and\n    third quartiles.  The default value of ``whis = 1.5`` corresponds\n    to Tukey's original definition of boxplots.\n\n    If a pair of floats, they indicate the percentiles at which to\n    draw the whiskers (e.g., (5, 95)).  In particular, setting this to\n    (0, 100) results in whiskers covering the whole range of the data.\n\n    In the edge case where ``Q1 == Q3``, *whis* is automatically set\n    to (0, 100) (cover the whole range of the data) if *autorange* is\n    True.\n\n    Beyond the whiskers, data are considered outliers and are plotted\n    as individual points.\n\nbootstrap : int, optional\n    Specifies whether to bootstrap the confidence intervals\n    around the median for notched boxplots. If *bootstrap* is\n    None, no bootstrapping is performed, and notches are\n    calculated using a Gaussian-based asymptotic approximation\n    (see McGill, R., Tukey, J.W., and Larsen, W.A., 1978, and\n    Kendall and Stuart, 1967). Otherwise, bootstrap specifies\n    the number of times to bootstrap the median to determine its\n    95% confidence intervals. Values between 1000 and 10000 are\n    recommended.\n\nusermedians : 1D array-like, optional\n    A 1D array-like of length ``len(x)``.  Each entry that is not\n    `None` forces the value of the median for the corresponding\n    dataset.  For entries that are `None`, the medians are computed\n    by Matplotlib as normal.\n\nconf_intervals : array-like, optional\n    A 2D array-like of shape ``(len(x), 2)``.  Each entry that is not\n    None forces the location of the corresponding notch (which is\n    only drawn if *notch* is `True`).  For entries that are `None`,\n    the notches are computed by the method specified by the other\n    parameters (e.g., *bootstrap*).\n\npositions : array-like, optional\n    The positions of the boxes. The ticks and limits are\n    automatically set to match the positions. Defaults to\n    ``range(1, N+1)`` where N is the number of boxes to be drawn.\n\nwidths : float or array-like\n    The widths of the boxes.  The default is 0.5, or ``0.15*(distance\n    between extreme positions)``, if that is smaller.\n\npatch_artist : bool, default: False\n    If `False` produces boxes with the Line2D artist. Otherwise,\n    boxes are drawn with Patch artists.\n\nlabels : sequence, optional\n    Labels for each dataset (one per dataset).\n\nmanage_ticks : bool, default: True\n    If True, the tick locations and labels will be adjusted to match\n    the boxplot positions.\n\nautorange : bool, default: False\n    When `True` and the data are distributed such that the 25th and\n    75th percentiles are equal, *whis* is set to (0, 100) such\n    that the whisker ends are at the minimum and maximum of the data.\n\nmeanline : bool, default: False\n    If `True` (and *showmeans* is `True`), will try to render the\n    mean as a line spanning the full width of the box according to\n    *meanprops* (see below).  Not recommended if *shownotches* is also\n    True.  Otherwise, means will be shown as points.\n\nzorder : float, default: ``Line2D.zorder = 2``\n    The zorder of the boxplot.\n\nReturns\n-------\ndict\n  A dictionary mapping each component of the boxplot to a list\n  of the `.Line2D` instances created. That dictionary has the\n  following keys (assuming vertical boxplots):\n\n  - ``boxes``: the main body of the boxplot showing the\n    quartiles and the median's confidence intervals if\n    enabled.\n\n  - ``medians``: horizontal lines at the median of each box.\n\n  - ``whiskers``: the vertical lines extending to the most\n    extreme, non-outlier data points.\n\n  - ``caps``: the horizontal lines at the ends of the\n    whiskers.\n\n  - ``fliers``: points representing data that extend beyond\n    the whiskers (fliers).\n\n  - ``means``: points or lines representing the means.\n\nOther Parameters\n----------------\nshowcaps : bool, default: True\n    Show the caps on the ends of whiskers.\nshowbox : bool, default: True\n    Show the central box.\nshowfliers : bool, default: True\n    Show the outliers beyond the caps.\nshowmeans : bool, default: False\n    Show the arithmetic means.\ncapprops : dict, default: None\n    The style of the caps.\ncapwidths : float or array, default: None\n    The widths of the caps.\nboxprops : dict, default: None\n    The style of the box.\nwhiskerprops : dict, default: None\n    The style of the whiskers.\nflierprops : dict, default: None\n    The style of the fliers.\nmedianprops : dict, default: None\n    The style of the median.\nmeanprops : dict, default: None\n    The style of the mean.\ndata : indexable object, optional\n    If given, all parameters also accept a string ``s``, which is\n    interpreted as ``data[s]`` (unless this raises an exception).\n\nSee Also\n--------\nviolinplot : Draw an estimate of the probability density function."
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subClassOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#AtomicMethod"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#PlotMethod"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#PyplotModule"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Cohere",
  "@type" : [ "http://www.w3.org/2002/07/owl#Class" ],
  "http://www.w3.org/2000/01/rdf-schema#comment" : [ {
    "@value" : "Plot the coherence between *x* and *y*.\n\nCoherence is the normalized cross spectral density:\n\n.. math::\n\n  C_{xy} = \\frac{|P_{xy}|^2}{P_{xx}P_{yy}}\n\nParameters\n----------\nFs : float, default: 2\n    The sampling frequency (samples per time unit).  It is used to calculate\n    the Fourier frequencies, *freqs*, in cycles per time unit.\n\nwindow : callable or ndarray, default: `.window_hanning`\n    A function or a vector of length *NFFT*.  To create window vectors see\n    `.window_hanning`, `.window_none`, `numpy.blackman`, `numpy.hamming`,\n    `numpy.bartlett`, `scipy.signal`, `scipy.signal.get_window`, etc.  If a\n    function is passed as the argument, it must take a data segment as an\n    argument and return the windowed version of the segment.\n\nsides : {'default', 'onesided', 'twosided'}, optional\n    Which sides of the spectrum to return. 'default' is one-sided for real\n    data and two-sided for complex data. 'onesided' forces the return of a\n    one-sided spectrum, while 'twosided' forces two-sided.\n\npad_to : int, optional\n    The number of points to which the data segment is padded when performing\n    the FFT.  This can be different from *NFFT*, which specifies the number\n    of data points used.  While not increasing the actual resolution of the\n    spectrum (the minimum distance between resolvable peaks), this can give\n    more points in the plot, allowing for more detail. This corresponds to\n    the *n* parameter in the call to `~numpy.fft.fft`. The default is None,\n    which sets *pad_to* equal to *NFFT*\n\nNFFT : int, default: 256\n    The number of data points used in each block for the FFT.  A power 2 is\n    most efficient.  This should *NOT* be used to get zero padding, or the\n    scaling of the result will be incorrect; use *pad_to* for this instead.\n\ndetrend : {'none', 'mean', 'linear'} or callable, default: 'none'\n    The function applied to each segment before fft-ing, designed to remove\n    the mean or linear trend.  Unlike in MATLAB, where the *detrend* parameter\n    is a vector, in Matplotlib it is a function.  The :mod:`~matplotlib.mlab`\n    module defines `.detrend_none`, `.detrend_mean`, and `.detrend_linear`,\n    but you can use a custom function as well.  You can also use a string to\n    choose one of the functions: 'none' calls `.detrend_none`. 'mean' calls\n    `.detrend_mean`. 'linear' calls `.detrend_linear`.\n\nscale_by_freq : bool, default: True\n    Whether the resulting density values should be scaled by the scaling\n    frequency, which gives density in units of 1/Hz.  This allows for\n    integration over the returned frequency values.  The default is True for\n    MATLAB compatibility.\n\nnoverlap : int, default: 0 (no overlap)\n    The number of points of overlap between blocks.\n\nFc : int, default: 0\n    The center frequency of *x*, which offsets the x extents of the\n    plot to reflect the frequency range used when a signal is acquired\n    and then filtered and downsampled to baseband.\n\nReturns\n-------\nCxy : 1-D array\n    The coherence vector.\n\nfreqs : 1-D array\n    The frequencies for the elements in *Cxy*.\n\nOther Parameters\n----------------\ndata : indexable object, optional\n    If given, the following parameters also accept a string ``s``, which is\n    interpreted as ``data[s]`` (unless this raises an exception):\n\n    *x*, *y*\n\n**kwargs\n    Keyword arguments control the `.Line2D` properties:\n\n    Properties:\n    agg_filter: a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array and two offsets from the bottom left corner of the image\n    alpha: scalar or None\n    animated: bool\n    antialiased or aa: bool\n    clip_box: `~matplotlib.transforms.BboxBase` or None\n    clip_on: bool\n    clip_path: Patch or (Path, Transform) or None\n    color or c: color\n    dash_capstyle: `.CapStyle` or {'butt', 'projecting', 'round'}\n    dash_joinstyle: `.JoinStyle` or {'miter', 'round', 'bevel'}\n    dashes: sequence of floats (on/off ink in points) or (None, None)\n    data: (2, N) array or two 1D arrays\n    drawstyle or ds: {'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default: 'default'\n    figure: `~matplotlib.figure.Figure`\n    fillstyle: {'full', 'left', 'right', 'bottom', 'top', 'none'}\n    gapcolor: color or None\n    gid: str\n    in_layout: bool\n    label: object\n    linestyle or ls: {'-', '--', '-.', ':', '', (offset, on-off-seq), ...}\n    linewidth or lw: float\n    marker: marker style string, `~.path.Path` or `~.markers.MarkerStyle`\n    markeredgecolor or mec: color\n    markeredgewidth or mew: float\n    markerfacecolor or mfc: color\n    markerfacecoloralt or mfcalt: color\n    markersize or ms: float\n    markevery: None or int or (int, int) or slice or list[int] or float or (float, float) or list[bool]\n    mouseover: bool\n    path_effects: list of `.AbstractPathEffect`\n    picker: float or callable[[Artist, Event], tuple[bool, dict]]\n    pickradius: float\n    rasterized: bool\n    sketch_params: (scale: float, length: float, randomness: float)\n    snap: bool or None\n    solid_capstyle: `.CapStyle` or {'butt', 'projecting', 'round'}\n    solid_joinstyle: `.JoinStyle` or {'miter', 'round', 'bevel'}\n    transform: unknown\n    url: str\n    visible: bool\n    xdata: 1D array\n    ydata: 1D array\n    zorder: float\n\nReferences\n----------\nBendat & Piersol -- Random Data: Analysis and Measurement Procedures,\nJohn Wiley & Sons (1986)"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subClassOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#AtomicMethod"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#PlotMethod"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#PyplotModule"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Contour",
  "@type" : [ "http://www.w3.org/2002/07/owl#Class" ],
  "http://www.w3.org/2000/01/rdf-schema#comment" : [ {
    "@value" : "Plot contour lines.\n\nCall signature::\n\n    contour([X, Y,] Z, [levels], **kwargs)\n\n`.contour` and `.contourf` draw contour lines and filled contours,\nrespectively.  Except as noted, function signatures and return values\nare the same for both versions.\n\nParameters\n----------\nX, Y : array-like, optional\n    The coordinates of the values in *Z*.\n\n    *X* and *Y* must both be 2D with the same shape as *Z* (e.g.\n    created via `numpy.meshgrid`), or they must both be 1-D such\n    that ``len(X) == N`` is the number of columns in *Z* and\n    ``len(Y) == M`` is the number of rows in *Z*.\n\n    *X* and *Y* must both be ordered monotonically.\n\n    If not given, they are assumed to be integer indices, i.e.\n    ``X = range(N)``, ``Y = range(M)``.\n\nZ : (M, N) array-like\n    The height values over which the contour is drawn.  Color-mapping is\n    controlled by *cmap*, *norm*, *vmin*, and *vmax*.\n\nlevels : int or array-like, optional\n    Determines the number and positions of the contour lines / regions.\n\n    If an int *n*, use `~matplotlib.ticker.MaxNLocator`, which tries\n    to automatically choose no more than *n+1* \"nice\" contour levels\n    between minimum and maximum numeric values of *Z*.\n\n    If array-like, draw contour lines at the specified levels.\n    The values must be in increasing order.\n\nReturns\n-------\n`~.contour.QuadContourSet`\n\nOther Parameters\n----------------\ncorner_mask : bool, default: :rc:`contour.corner_mask`\n    Enable/disable corner masking, which only has an effect if *Z* is\n    a masked array.  If ``False``, any quad touching a masked point is\n    masked out.  If ``True``, only the triangular corners of quads\n    nearest those points are always masked out, other triangular\n    corners comprising three unmasked points are contoured as usual.\n\ncolors : color string or sequence of colors, optional\n    The colors of the levels, i.e. the lines for `.contour` and the\n    areas for `.contourf`.\n\n    The sequence is cycled for the levels in ascending order. If the\n    sequence is shorter than the number of levels, it's repeated.\n\n    As a shortcut, single color strings may be used in place of\n    one-element lists, i.e. ``'red'`` instead of ``['red']`` to color\n    all levels with the same color. This shortcut does only work for\n    color strings, not for other ways of specifying colors.\n\n    By default (value *None*), the colormap specified by *cmap*\n    will be used.\n\nalpha : float, default: 1\n    The alpha blending value, between 0 (transparent) and 1 (opaque).\n\ncmap : str or `~matplotlib.colors.Colormap`, default: :rc:`image.cmap`\n    The Colormap instance or registered colormap name used to map scalar data\n    to colors.\n\n    This parameter is ignored if *colors* is set.\n\nnorm : str or `~matplotlib.colors.Normalize`, optional\n    The normalization method used to scale scalar data to the [0, 1] range\n    before mapping to colors using *cmap*. By default, a linear scaling is\n    used, mapping the lowest value to 0 and the highest to 1.\n\n    If given, this can be one of the following:\n\n    - An instance of `.Normalize` or one of its subclasses\n      (see :ref:`colormapnorms`).\n    - A scale name, i.e. one of \"linear\", \"log\", \"symlog\", \"logit\", etc.  For a\n      list of available scales, call `matplotlib.scale.get_scale_names()`.\n      In that case, a suitable `.Normalize` subclass is dynamically generated\n      and instantiated.\n\n    This parameter is ignored if *colors* is set.\n\nvmin, vmax : float, optional\n    When using scalar data and no explicit *norm*, *vmin* and *vmax* define\n    the data range that the colormap covers. By default, the colormap covers\n    the complete value range of the supplied data. It is an error to use\n    *vmin*/*vmax* when a *norm* instance is given (but using a `str` *norm*\n    name together with *vmin*/*vmax* is acceptable).\n\n    If *vmin* or *vmax* are not given, the default color scaling is based on\n    *levels*.\n\n    This parameter is ignored if *colors* is set.\n\norigin : {*None*, 'upper', 'lower', 'image'}, default: None\n    Determines the orientation and exact position of *Z* by specifying\n    the position of ``Z[0, 0]``.  This is only relevant, if *X*, *Y*\n    are not given.\n\n    - *None*: ``Z[0, 0]`` is at X=0, Y=0 in the lower left corner.\n    - 'lower': ``Z[0, 0]`` is at X=0.5, Y=0.5 in the lower left corner.\n    - 'upper': ``Z[0, 0]`` is at X=N+0.5, Y=0.5 in the upper left\n      corner.\n    - 'image': Use the value from :rc:`image.origin`.\n\nextent : (x0, x1, y0, y1), optional\n    If *origin* is not *None*, then *extent* is interpreted as in\n    `.imshow`: it gives the outer pixel boundaries. In this case, the\n    position of Z[0, 0] is the center of the pixel, not a corner. If\n    *origin* is *None*, then (*x0*, *y0*) is the position of Z[0, 0],\n    and (*x1*, *y1*) is the position of Z[-1, -1].\n\n    This argument is ignored if *X* and *Y* are specified in the call\n    to contour.\n\nlocator : ticker.Locator subclass, optional\n    The locator is used to determine the contour levels if they\n    are not given explicitly via *levels*.\n    Defaults to `~.ticker.MaxNLocator`.\n\nextend : {'neither', 'both', 'min', 'max'}, default: 'neither'\n    Determines the ``contourf``-coloring of values that are outside the\n    *levels* range.\n\n    If 'neither', values outside the *levels* range are not colored.\n    If 'min', 'max' or 'both', color the values below, above or below\n    and above the *levels* range.\n\n    Values below ``min(levels)`` and above ``max(levels)`` are mapped\n    to the under/over values of the `.Colormap`. Note that most\n    colormaps do not have dedicated colors for these by default, so\n    that the over and under values are the edge values of the colormap.\n    You may want to set these values explicitly using\n    `.Colormap.set_under` and `.Colormap.set_over`.\n\n    .. note::\n\n        An existing `.QuadContourSet` does not get notified if\n        properties of its colormap are changed. Therefore, an explicit\n        call `.QuadContourSet.changed()` is needed after modifying the\n        colormap. The explicit call can be left out, if a colorbar is\n        assigned to the `.QuadContourSet` because it internally calls\n        `.QuadContourSet.changed()`.\n\n    Example::\n\n        x = np.arange(1, 10)\n        y = x.reshape(-1, 1)\n        h = x * y\n\n        cs = plt.contourf(h, levels=[10, 30, 50],\n            colors=['#808080', '#A0A0A0', '#C0C0C0'], extend='both')\n        cs.cmap.set_over('red')\n        cs.cmap.set_under('blue')\n        cs.changed()\n\nxunits, yunits : registered units, optional\n    Override axis units by specifying an instance of a\n    :class:`matplotlib.units.ConversionInterface`.\n\nantialiased : bool, optional\n    Enable antialiasing, overriding the defaults.  For\n    filled contours, the default is *False*.  For line contours,\n    it is taken from :rc:`lines.antialiased`.\n\nnchunk : int >= 0, optional\n    If 0, no subdivision of the domain.  Specify a positive integer to\n    divide the domain into subdomains of *nchunk* by *nchunk* quads.\n    Chunking reduces the maximum length of polygons generated by the\n    contouring algorithm which reduces the rendering workload passed\n    on to the backend and also requires slightly less RAM.  It can\n    however introduce rendering artifacts at chunk boundaries depending\n    on the backend, the *antialiased* flag and value of *alpha*.\n\nlinewidths : float or array-like, default: :rc:`contour.linewidth`\n    *Only applies to* `.contour`.\n\n    The line width of the contour lines.\n\n    If a number, all levels will be plotted with this linewidth.\n\n    If a sequence, the levels in ascending order will be plotted with\n    the linewidths in the order specified.\n\n    If None, this falls back to :rc:`lines.linewidth`.\n\nlinestyles : {*None*, 'solid', 'dashed', 'dashdot', 'dotted'}, optional\n    *Only applies to* `.contour`.\n\n    If *linestyles* is *None*, the default is 'solid' unless the lines are\n    monochrome. In that case, negative contours will instead take their\n    linestyle from the *negative_linestyles* argument.\n\n    *linestyles* can also be an iterable of the above strings specifying a set\n    of linestyles to be used. If this iterable is shorter than the number of\n    contour levels it will be repeated as necessary.\n\nnegative_linestyles : {*None*, 'solid', 'dashed', 'dashdot', 'dotted'},                        optional\n    *Only applies to* `.contour`.\n\n    If *linestyles* is *None* and the lines are monochrome, this argument\n    specifies the line style for negative contours.\n\n    If *negative_linestyles* is *None*, the default is taken from\n    :rc:`contour.negative_linestyles`.\n\n    *negative_linestyles* can also be an iterable of the above strings\n    specifying a set of linestyles to be used. If this iterable is shorter than\n    the number of contour levels it will be repeated as necessary.\n\nhatches : list[str], optional\n    *Only applies to* `.contourf`.\n\n    A list of cross hatch patterns to use on the filled areas.\n    If None, no hatching will be added to the contour.\n    Hatching is supported in the PostScript, PDF, SVG and Agg\n    backends only.\n\nalgorithm : {'mpl2005', 'mpl2014', 'serial', 'threaded'}, optional\n    Which contouring algorithm to use to calculate the contour lines and\n    polygons. The algorithms are implemented in\n    `ContourPy <https://github.com/contourpy/contourpy>`_, consult the\n    `ContourPy documentation <https://contourpy.readthedocs.io>`_ for\n    further information.\n\n    The default is taken from :rc:`contour.algorithm`.\n\nclip_path : `~matplotlib.patches.Patch` or `.Path` or `.TransformedPath`\n    Set the clip path.  See `~matplotlib.artist.Artist.set_clip_path`.\n\n    .. versionadded:: 3.8\n\ndata : indexable object, optional\n    If given, all parameters also accept a string ``s``, which is\n    interpreted as ``data[s]`` (unless this raises an exception).\n\nNotes\n-----\n1. `.contourf` differs from the MATLAB version in that it does not draw\n   the polygon edges. To draw edges, add line contours with calls to\n   `.contour`.\n\n2. `.contourf` fills intervals that are closed at the top; that is, for\n   boundaries *z1* and *z2*, the filled region is::\n\n      z1 < Z <= z2\n\n   except for the lowest interval, which is closed on both sides (i.e.\n   it includes the lowest value).\n\n3. `.contour` and `.contourf` use a `marching squares\n   <https://en.wikipedia.org/wiki/Marching_squares>`_ algorithm to\n   compute contour locations.  More information can be found in\n   `ContourPy documentation <https://contourpy.readthedocs.io>`_."
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subClassOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#AtomicMethod"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#PlotMethod"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#PyplotModule"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#ContourPlot",
  "@type" : [ "http://www.w3.org/2002/07/owl#Class" ],
  "http://www.w3.org/2000/01/rdf-schema#subClassOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#AtomicTask"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Plot"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Contourf",
  "@type" : [ "http://www.w3.org/2002/07/owl#Class" ],
  "http://www.w3.org/2000/01/rdf-schema#comment" : [ {
    "@value" : "Plot filled contours.\n\nCall signature::\n\n    contourf([X, Y,] Z, [levels], **kwargs)\n\n`.contour` and `.contourf` draw contour lines and filled contours,\nrespectively.  Except as noted, function signatures and return values\nare the same for both versions.\n\nParameters\n----------\nX, Y : array-like, optional\n    The coordinates of the values in *Z*.\n\n    *X* and *Y* must both be 2D with the same shape as *Z* (e.g.\n    created via `numpy.meshgrid`), or they must both be 1-D such\n    that ``len(X) == N`` is the number of columns in *Z* and\n    ``len(Y) == M`` is the number of rows in *Z*.\n\n    *X* and *Y* must both be ordered monotonically.\n\n    If not given, they are assumed to be integer indices, i.e.\n    ``X = range(N)``, ``Y = range(M)``.\n\nZ : (M, N) array-like\n    The height values over which the contour is drawn.  Color-mapping is\n    controlled by *cmap*, *norm*, *vmin*, and *vmax*.\n\nlevels : int or array-like, optional\n    Determines the number and positions of the contour lines / regions.\n\n    If an int *n*, use `~matplotlib.ticker.MaxNLocator`, which tries\n    to automatically choose no more than *n+1* \"nice\" contour levels\n    between minimum and maximum numeric values of *Z*.\n\n    If array-like, draw contour lines at the specified levels.\n    The values must be in increasing order.\n\nReturns\n-------\n`~.contour.QuadContourSet`\n\nOther Parameters\n----------------\ncorner_mask : bool, default: :rc:`contour.corner_mask`\n    Enable/disable corner masking, which only has an effect if *Z* is\n    a masked array.  If ``False``, any quad touching a masked point is\n    masked out.  If ``True``, only the triangular corners of quads\n    nearest those points are always masked out, other triangular\n    corners comprising three unmasked points are contoured as usual.\n\ncolors : color string or sequence of colors, optional\n    The colors of the levels, i.e. the lines for `.contour` and the\n    areas for `.contourf`.\n\n    The sequence is cycled for the levels in ascending order. If the\n    sequence is shorter than the number of levels, it's repeated.\n\n    As a shortcut, single color strings may be used in place of\n    one-element lists, i.e. ``'red'`` instead of ``['red']`` to color\n    all levels with the same color. This shortcut does only work for\n    color strings, not for other ways of specifying colors.\n\n    By default (value *None*), the colormap specified by *cmap*\n    will be used.\n\nalpha : float, default: 1\n    The alpha blending value, between 0 (transparent) and 1 (opaque).\n\ncmap : str or `~matplotlib.colors.Colormap`, default: :rc:`image.cmap`\n    The Colormap instance or registered colormap name used to map scalar data\n    to colors.\n\n    This parameter is ignored if *colors* is set.\n\nnorm : str or `~matplotlib.colors.Normalize`, optional\n    The normalization method used to scale scalar data to the [0, 1] range\n    before mapping to colors using *cmap*. By default, a linear scaling is\n    used, mapping the lowest value to 0 and the highest to 1.\n\n    If given, this can be one of the following:\n\n    - An instance of `.Normalize` or one of its subclasses\n      (see :ref:`colormapnorms`).\n    - A scale name, i.e. one of \"linear\", \"log\", \"symlog\", \"logit\", etc.  For a\n      list of available scales, call `matplotlib.scale.get_scale_names()`.\n      In that case, a suitable `.Normalize` subclass is dynamically generated\n      and instantiated.\n\n    This parameter is ignored if *colors* is set.\n\nvmin, vmax : float, optional\n    When using scalar data and no explicit *norm*, *vmin* and *vmax* define\n    the data range that the colormap covers. By default, the colormap covers\n    the complete value range of the supplied data. It is an error to use\n    *vmin*/*vmax* when a *norm* instance is given (but using a `str` *norm*\n    name together with *vmin*/*vmax* is acceptable).\n\n    If *vmin* or *vmax* are not given, the default color scaling is based on\n    *levels*.\n\n    This parameter is ignored if *colors* is set.\n\norigin : {*None*, 'upper', 'lower', 'image'}, default: None\n    Determines the orientation and exact position of *Z* by specifying\n    the position of ``Z[0, 0]``.  This is only relevant, if *X*, *Y*\n    are not given.\n\n    - *None*: ``Z[0, 0]`` is at X=0, Y=0 in the lower left corner.\n    - 'lower': ``Z[0, 0]`` is at X=0.5, Y=0.5 in the lower left corner.\n    - 'upper': ``Z[0, 0]`` is at X=N+0.5, Y=0.5 in the upper left\n      corner.\n    - 'image': Use the value from :rc:`image.origin`.\n\nextent : (x0, x1, y0, y1), optional\n    If *origin* is not *None*, then *extent* is interpreted as in\n    `.imshow`: it gives the outer pixel boundaries. In this case, the\n    position of Z[0, 0] is the center of the pixel, not a corner. If\n    *origin* is *None*, then (*x0*, *y0*) is the position of Z[0, 0],\n    and (*x1*, *y1*) is the position of Z[-1, -1].\n\n    This argument is ignored if *X* and *Y* are specified in the call\n    to contour.\n\nlocator : ticker.Locator subclass, optional\n    The locator is used to determine the contour levels if they\n    are not given explicitly via *levels*.\n    Defaults to `~.ticker.MaxNLocator`.\n\nextend : {'neither', 'both', 'min', 'max'}, default: 'neither'\n    Determines the ``contourf``-coloring of values that are outside the\n    *levels* range.\n\n    If 'neither', values outside the *levels* range are not colored.\n    If 'min', 'max' or 'both', color the values below, above or below\n    and above the *levels* range.\n\n    Values below ``min(levels)`` and above ``max(levels)`` are mapped\n    to the under/over values of the `.Colormap`. Note that most\n    colormaps do not have dedicated colors for these by default, so\n    that the over and under values are the edge values of the colormap.\n    You may want to set these values explicitly using\n    `.Colormap.set_under` and `.Colormap.set_over`.\n\n    .. note::\n\n        An existing `.QuadContourSet` does not get notified if\n        properties of its colormap are changed. Therefore, an explicit\n        call `.QuadContourSet.changed()` is needed after modifying the\n        colormap. The explicit call can be left out, if a colorbar is\n        assigned to the `.QuadContourSet` because it internally calls\n        `.QuadContourSet.changed()`.\n\n    Example::\n\n        x = np.arange(1, 10)\n        y = x.reshape(-1, 1)\n        h = x * y\n\n        cs = plt.contourf(h, levels=[10, 30, 50],\n            colors=['#808080', '#A0A0A0', '#C0C0C0'], extend='both')\n        cs.cmap.set_over('red')\n        cs.cmap.set_under('blue')\n        cs.changed()\n\nxunits, yunits : registered units, optional\n    Override axis units by specifying an instance of a\n    :class:`matplotlib.units.ConversionInterface`.\n\nantialiased : bool, optional\n    Enable antialiasing, overriding the defaults.  For\n    filled contours, the default is *False*.  For line contours,\n    it is taken from :rc:`lines.antialiased`.\n\nnchunk : int >= 0, optional\n    If 0, no subdivision of the domain.  Specify a positive integer to\n    divide the domain into subdomains of *nchunk* by *nchunk* quads.\n    Chunking reduces the maximum length of polygons generated by the\n    contouring algorithm which reduces the rendering workload passed\n    on to the backend and also requires slightly less RAM.  It can\n    however introduce rendering artifacts at chunk boundaries depending\n    on the backend, the *antialiased* flag and value of *alpha*.\n\nlinewidths : float or array-like, default: :rc:`contour.linewidth`\n    *Only applies to* `.contour`.\n\n    The line width of the contour lines.\n\n    If a number, all levels will be plotted with this linewidth.\n\n    If a sequence, the levels in ascending order will be plotted with\n    the linewidths in the order specified.\n\n    If None, this falls back to :rc:`lines.linewidth`.\n\nlinestyles : {*None*, 'solid', 'dashed', 'dashdot', 'dotted'}, optional\n    *Only applies to* `.contour`.\n\n    If *linestyles* is *None*, the default is 'solid' unless the lines are\n    monochrome. In that case, negative contours will instead take their\n    linestyle from the *negative_linestyles* argument.\n\n    *linestyles* can also be an iterable of the above strings specifying a set\n    of linestyles to be used. If this iterable is shorter than the number of\n    contour levels it will be repeated as necessary.\n\nnegative_linestyles : {*None*, 'solid', 'dashed', 'dashdot', 'dotted'},                        optional\n    *Only applies to* `.contour`.\n\n    If *linestyles* is *None* and the lines are monochrome, this argument\n    specifies the line style for negative contours.\n\n    If *negative_linestyles* is *None*, the default is taken from\n    :rc:`contour.negative_linestyles`.\n\n    *negative_linestyles* can also be an iterable of the above strings\n    specifying a set of linestyles to be used. If this iterable is shorter than\n    the number of contour levels it will be repeated as necessary.\n\nhatches : list[str], optional\n    *Only applies to* `.contourf`.\n\n    A list of cross hatch patterns to use on the filled areas.\n    If None, no hatching will be added to the contour.\n    Hatching is supported in the PostScript, PDF, SVG and Agg\n    backends only.\n\nalgorithm : {'mpl2005', 'mpl2014', 'serial', 'threaded'}, optional\n    Which contouring algorithm to use to calculate the contour lines and\n    polygons. The algorithms are implemented in\n    `ContourPy <https://github.com/contourpy/contourpy>`_, consult the\n    `ContourPy documentation <https://contourpy.readthedocs.io>`_ for\n    further information.\n\n    The default is taken from :rc:`contour.algorithm`.\n\nclip_path : `~matplotlib.patches.Patch` or `.Path` or `.TransformedPath`\n    Set the clip path.  See `~matplotlib.artist.Artist.set_clip_path`.\n\n    .. versionadded:: 3.8\n\ndata : indexable object, optional\n    If given, all parameters also accept a string ``s``, which is\n    interpreted as ``data[s]`` (unless this raises an exception).\n\nNotes\n-----\n1. `.contourf` differs from the MATLAB version in that it does not draw\n   the polygon edges. To draw edges, add line contours with calls to\n   `.contour`.\n\n2. `.contourf` fills intervals that are closed at the top; that is, for\n   boundaries *z1* and *z2*, the filled region is::\n\n      z1 < Z <= z2\n\n   except for the lowest interval, which is closed on both sides (i.e.\n   it includes the lowest value).\n\n3. `.contour` and `.contourf` use a `marching squares\n   <https://en.wikipedia.org/wiki/Marching_squares>`_ algorithm to\n   compute contour locations.  More information can be found in\n   `ContourPy documentation <https://contourpy.readthedocs.io>`_."
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subClassOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#AtomicMethod"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#PlotMethod"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#PyplotModule"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#ErrorBarPlot",
  "@type" : [ "http://www.w3.org/2002/07/owl#Class" ],
  "http://www.w3.org/2000/01/rdf-schema#subClassOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#AtomicTask"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Plot"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Errorbar",
  "@type" : [ "http://www.w3.org/2002/07/owl#Class" ],
  "http://www.w3.org/2000/01/rdf-schema#comment" : [ {
    "@value" : "Plot y versus x as lines and/or markers with attached errorbars.\n\n*x*, *y* define the data locations, *xerr*, *yerr* define the errorbar\nsizes. By default, this draws the data markers/lines as well as the\nerrorbars. Use fmt='none' to draw errorbars without any data markers.\n\n.. versionadded:: 3.7\n   Caps and error lines are drawn in polar coordinates on polar plots.\n\n\nParameters\n----------\nx, y : float or array-like\n    The data positions.\n\nxerr, yerr : float or array-like, shape(N,) or shape(2, N), optional\n    The errorbar sizes:\n\n    - scalar: Symmetric +/- values for all data points.\n    - shape(N,): Symmetric +/-values for each data point.\n    - shape(2, N): Separate - and + values for each bar. First row\n      contains the lower errors, the second row contains the upper\n      errors.\n    - *None*: No errorbar.\n\n    All values must be >= 0.\n\n    See :doc:`/gallery/statistics/errorbar_features`\n    for an example on the usage of ``xerr`` and ``yerr``.\n\nfmt : str, default: ''\n    The format for the data points / data lines. See `.plot` for\n    details.\n\n    Use 'none' (case-insensitive) to plot errorbars without any data\n    markers.\n\necolor : color, default: None\n    The color of the errorbar lines.  If None, use the color of the\n    line connecting the markers.\n\nelinewidth : float, default: None\n    The linewidth of the errorbar lines. If None, the linewidth of\n    the current style is used.\n\ncapsize : float, default: :rc:`errorbar.capsize`\n    The length of the error bar caps in points.\n\ncapthick : float, default: None\n    An alias to the keyword argument *markeredgewidth* (a.k.a. *mew*).\n    This setting is a more sensible name for the property that\n    controls the thickness of the error bar cap in points. For\n    backwards compatibility, if *mew* or *markeredgewidth* are given,\n    then they will over-ride *capthick*. This may change in future\n    releases.\n\nbarsabove : bool, default: False\n    If True, will plot the errorbars above the plot\n    symbols. Default is below.\n\nlolims, uplims, xlolims, xuplims : bool or array-like, default: False\n    These arguments can be used to indicate that a value gives only\n    upper/lower limits.  In that case a caret symbol is used to\n    indicate this. *lims*-arguments may be scalars, or array-likes of\n    the same length as *xerr* and *yerr*.  To use limits with inverted\n    axes, `~.Axes.set_xlim` or `~.Axes.set_ylim` must be called before\n    :meth:`errorbar`.  Note the tricky parameter names: setting e.g.\n    *lolims* to True means that the y-value is a *lower* limit of the\n    True value, so, only an *upward*-pointing arrow will be drawn!\n\nerrorevery : int or (int, int), default: 1\n    draws error bars on a subset of the data. *errorevery* =N draws\n    error bars on the points (x[::N], y[::N]).\n    *errorevery* =(start, N) draws error bars on the points\n    (x[start::N], y[start::N]). e.g. errorevery=(6, 3)\n    adds error bars to the data at (x[6], x[9], x[12], x[15], ...).\n    Used to avoid overlapping error bars when two series share x-axis\n    values.\n\nReturns\n-------\n`.ErrorbarContainer`\n    The container contains:\n\n    - plotline: `~matplotlib.lines.Line2D` instance of x, y plot markers\n      and/or line.\n    - caplines: A tuple of `~matplotlib.lines.Line2D` instances of the error\n      bar caps.\n    - barlinecols: A tuple of `.LineCollection` with the horizontal and\n      vertical error ranges.\n\nOther Parameters\n----------------\ndata : indexable object, optional\n    If given, the following parameters also accept a string ``s``, which is\n    interpreted as ``data[s]`` (unless this raises an exception):\n\n    *x*, *y*, *xerr*, *yerr*\n\n**kwargs\n    All other keyword arguments are passed on to the `~.Axes.plot` call\n    drawing the markers. For example, this code makes big red squares\n    with thick green edges::\n\n        x, y, yerr = rand(3, 10)\n        errorbar(x, y, yerr, marker='s', mfc='red',\n                 mec='green', ms=20, mew=4)\n\n    where *mfc*, *mec*, *ms* and *mew* are aliases for the longer\n    property names, *markerfacecolor*, *markeredgecolor*, *markersize*\n    and *markeredgewidth*.\n\n    Valid kwargs for the marker properties are:\n\n    - *dashes*\n    - *dash_capstyle*\n    - *dash_joinstyle*\n    - *drawstyle*\n    - *fillstyle*\n    - *linestyle*\n    - *marker*\n    - *markeredgecolor*\n    - *markeredgewidth*\n    - *markerfacecolor*\n    - *markerfacecoloralt*\n    - *markersize*\n    - *markevery*\n    - *solid_capstyle*\n    - *solid_joinstyle*\n\n    Refer to the corresponding `.Line2D` property for more details:\n\n    Properties:\n    agg_filter: a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array and two offsets from the bottom left corner of the image\n    alpha: scalar or None\n    animated: bool\n    antialiased or aa: bool\n    clip_box: `~matplotlib.transforms.BboxBase` or None\n    clip_on: bool\n    clip_path: Patch or (Path, Transform) or None\n    color or c: color\n    dash_capstyle: `.CapStyle` or {'butt', 'projecting', 'round'}\n    dash_joinstyle: `.JoinStyle` or {'miter', 'round', 'bevel'}\n    dashes: sequence of floats (on/off ink in points) or (None, None)\n    data: (2, N) array or two 1D arrays\n    drawstyle or ds: {'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default: 'default'\n    figure: `~matplotlib.figure.Figure`\n    fillstyle: {'full', 'left', 'right', 'bottom', 'top', 'none'}\n    gapcolor: color or None\n    gid: str\n    in_layout: bool\n    label: object\n    linestyle or ls: {'-', '--', '-.', ':', '', (offset, on-off-seq), ...}\n    linewidth or lw: float\n    marker: marker style string, `~.path.Path` or `~.markers.MarkerStyle`\n    markeredgecolor or mec: color\n    markeredgewidth or mew: float\n    markerfacecolor or mfc: color\n    markerfacecoloralt or mfcalt: color\n    markersize or ms: float\n    markevery: None or int or (int, int) or slice or list[int] or float or (float, float) or list[bool]\n    mouseover: bool\n    path_effects: list of `.AbstractPathEffect`\n    picker: float or callable[[Artist, Event], tuple[bool, dict]]\n    pickradius: float\n    rasterized: bool\n    sketch_params: (scale: float, length: float, randomness: float)\n    snap: bool or None\n    solid_capstyle: `.CapStyle` or {'butt', 'projecting', 'round'}\n    solid_joinstyle: `.JoinStyle` or {'miter', 'round', 'bevel'}\n    transform: unknown\n    url: str\n    visible: bool\n    xdata: 1D array\n    ydata: 1D array\n    zorder: float"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subClassOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#AtomicMethod"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#PlotMethod"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#PyplotModule"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Fill",
  "@type" : [ "http://www.w3.org/2002/07/owl#Class" ],
  "http://www.w3.org/2000/01/rdf-schema#comment" : [ {
    "@value" : "Plot filled polygons.\n\nParameters\n----------\n*args : sequence of x, y, [color]\n    Each polygon is defined by the lists of *x* and *y* positions of\n    its nodes, optionally followed by a *color* specifier. See\n    :mod:`matplotlib.colors` for supported color specifiers. The\n    standard color cycle is used for polygons without a color\n    specifier.\n\n    You can plot multiple polygons by providing multiple *x*, *y*,\n    *[color]* groups.\n\n    For example, each of the following is legal::\n\n        ax.fill(x, y)                    # a polygon with default color\n        ax.fill(x, y, \"b\")               # a blue polygon\n        ax.fill(x, y, x2, y2)            # two polygons\n        ax.fill(x, y, \"b\", x2, y2, \"r\")  # a blue and a red polygon\n\ndata : indexable object, optional\n    An object with labelled data. If given, provide the label names to\n    plot in *x* and *y*, e.g.::\n\n        ax.fill(\"time\", \"signal\",\n                data={\"time\": [0, 1, 2], \"signal\": [0, 1, 0]})\n\nReturns\n-------\nlist of `~matplotlib.patches.Polygon`\n\nOther Parameters\n----------------\n**kwargs : `~matplotlib.patches.Polygon` properties\n\nNotes\n-----\nUse :meth:`fill_between` if you would like to fill the region between\ntwo curves."
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subClassOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#AtomicMethod"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#PlotMethod"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#PyplotModule"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#FillBetween",
  "@type" : [ "http://www.w3.org/2002/07/owl#Class" ],
  "http://www.w3.org/2000/01/rdf-schema#comment" : [ {
    "@value" : "Fill the area between two horizontal curves.\n\nThe curves are defined by the points (*x*, *y1*) and (*x*,\n*y2*).  This creates one or multiple polygons describing the filled\narea.\n\nYou may exclude some horizontal sections from filling using *where*.\n\nBy default, the edges connect the given points directly.  Use *step*\nif the filling should be a step function, i.e. constant in between\n*x*.\n\nParameters\n----------\nx : array (length N)\n    The x coordinates of the nodes defining the curves.\n\ny1 : array (length N) or scalar\n    The y coordinates of the nodes defining the first curve.\n\ny2 : array (length N) or scalar, default: 0\n    The y coordinates of the nodes defining the second curve.\n\nwhere : array of bool (length N), optional\n    Define *where* to exclude some horizontal regions from being filled.\n    The filled regions are defined by the coordinates ``x[where]``.\n    More precisely, fill between ``x[i]`` and ``x[i+1]`` if\n    ``where[i] and where[i+1]``.  Note that this definition implies\n    that an isolated *True* value between two *False* values in *where*\n    will not result in filling.  Both sides of the *True* position\n    remain unfilled due to the adjacent *False* values.\n\ninterpolate : bool, default: False\n    This option is only relevant if *where* is used and the two curves\n    are crossing each other.\n\n    Semantically, *where* is often used for *y1* > *y2* or\n    similar.  By default, the nodes of the polygon defining the filled\n    region will only be placed at the positions in the *x* array.\n    Such a polygon cannot describe the above semantics close to the\n    intersection.  The x-sections containing the intersection are\n    simply clipped.\n\n    Setting *interpolate* to *True* will calculate the actual\n    intersection point and extend the filled region up to this point.\n\nstep : {'pre', 'post', 'mid'}, optional\n    Define *step* if the filling should be a step function,\n    i.e. constant in between *x*.  The value determines where the\n    step will occur:\n\n    - 'pre': The y value is continued constantly to the left from\n      every *x* position, i.e. the interval ``(x[i-1], x[i]]`` has the\n      value ``y[i]``.\n    - 'post': The y value is continued constantly to the right from\n      every *x* position, i.e. the interval ``[x[i], x[i+1])`` has the\n      value ``y[i]``.\n    - 'mid': Steps occur half-way between the *x* positions.\n\nReturns\n-------\n`.PolyCollection`\n    A `.PolyCollection` containing the plotted polygons.\n\nOther Parameters\n----------------\ndata : indexable object, optional\n    If given, the following parameters also accept a string ``s``, which is\n    interpreted as ``data[s]`` (unless this raises an exception):\n\n    *x*, *y1*, *y2*, *where*\n\n**kwargs\n    All other keyword arguments are passed on to `.PolyCollection`.\n    They control the `.Polygon` properties:\n\n    Properties:\n    agg_filter: a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array and two offsets from the bottom left corner of the image\n    alpha: array-like or scalar or None\n    animated: bool\n    antialiased or aa or antialiaseds: bool or list of bools\n    array: array-like or None\n    capstyle: `.CapStyle` or {'butt', 'projecting', 'round'}\n    clim: (vmin: float, vmax: float)\n    clip_box: `~matplotlib.transforms.BboxBase` or None\n    clip_on: bool\n    clip_path: Patch or (Path, Transform) or None\n    cmap: `.Colormap` or str or None\n    color: color or list of RGBA tuples\n    edgecolor or ec or edgecolors: color or list of colors or 'face'\n    facecolor or facecolors or fc: color or list of colors\n    figure: `~matplotlib.figure.Figure`\n    gid: str\n    hatch: {'/', '\\\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}\n    in_layout: bool\n    joinstyle: `.JoinStyle` or {'miter', 'round', 'bevel'}\n    label: object\n    linestyle or dashes or linestyles or ls: str or tuple or list thereof\n    linewidth or linewidths or lw: float or list of floats\n    mouseover: bool\n    norm: `.Normalize` or str or None\n    offset_transform or transOffset: `.Transform`\n    offsets: (N, 2) or (2,) array-like\n    path_effects: list of `.AbstractPathEffect`\n    paths: list of array-like\n    picker: None or bool or float or callable\n    pickradius: float\n    rasterized: bool\n    sizes: `numpy.ndarray` or None\n    sketch_params: (scale: float, length: float, randomness: float)\n    snap: bool or None\n    transform: `~matplotlib.transforms.Transform`\n    url: str\n    urls: list of str or None\n    verts: list of array-like\n    verts_and_codes: unknown\n    visible: bool\n    zorder: float\n\nSee Also\n--------\nfill_between : Fill between two sets of y-values.\nfill_betweenx : Fill between two sets of x-values."
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subClassOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#AtomicMethod"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#PlotMethod"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#PyplotModule"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Hexbin",
  "@type" : [ "http://www.w3.org/2002/07/owl#Class" ],
  "http://www.w3.org/2000/01/rdf-schema#comment" : [ {
    "@value" : "Make a 2D hexagonal binning plot of points *x*, *y*.\n\nIf *C* is *None*, the value of the hexagon is determined by the number\nof points in the hexagon. Otherwise, *C* specifies values at the\ncoordinate (x[i], y[i]). For each hexagon, these values are reduced\nusing *reduce_C_function*.\n\nParameters\n----------\nx, y : array-like\n    The data positions. *x* and *y* must be of the same length.\n\nC : array-like, optional\n    If given, these values are accumulated in the bins. Otherwise,\n    every point has a value of 1. Must be of the same length as *x*\n    and *y*.\n\ngridsize : int or (int, int), default: 100\n    If a single int, the number of hexagons in the *x*-direction.\n    The number of hexagons in the *y*-direction is chosen such that\n    the hexagons are approximately regular.\n\n    Alternatively, if a tuple (*nx*, *ny*), the number of hexagons\n    in the *x*-direction and the *y*-direction. In the\n    *y*-direction, counting is done along vertically aligned\n    hexagons, not along the zig-zag chains of hexagons; see the\n    following illustration.\n\n    .. plot::\n\n       import numpy\n       import matplotlib.pyplot as plt\n\n       np.random.seed(19680801)\n       n= 300\n       x = np.random.standard_normal(n)\n       y = np.random.standard_normal(n)\n\n       fig, ax = plt.subplots(figsize=(4, 4))\n       h = ax.hexbin(x, y, gridsize=(5, 3))\n       hx, hy = h.get_offsets().T\n       ax.plot(hx[24::3], hy[24::3], 'ro-')\n       ax.plot(hx[-3:], hy[-3:], 'ro-')\n       ax.set_title('gridsize=(5, 3)')\n       ax.axis('off')\n\n    To get approximately regular hexagons, choose\n    :math:`n_x = \\sqrt{3}\\,n_y`.\n\nbins : 'log' or int or sequence, default: None\n    Discretization of the hexagon values.\n\n    - If *None*, no binning is applied; the color of each hexagon\n      directly corresponds to its count value.\n    - If 'log', use a logarithmic scale for the colormap.\n      Internally, :math:`log_{10}(i+1)` is used to determine the\n      hexagon color. This is equivalent to ``norm=LogNorm()``.\n    - If an integer, divide the counts in the specified number\n      of bins, and color the hexagons accordingly.\n    - If a sequence of values, the values of the lower bound of\n      the bins to be used.\n\nxscale : {'linear', 'log'}, default: 'linear'\n    Use a linear or log10 scale on the horizontal axis.\n\nyscale : {'linear', 'log'}, default: 'linear'\n    Use a linear or log10 scale on the vertical axis.\n\nmincnt : int >= 0, default: *None*\n    If not *None*, only display cells with at least *mincnt*\n    number of points in the cell.\n\nmarginals : bool, default: *False*\n    If marginals is *True*, plot the marginal density as\n    colormapped rectangles along the bottom of the x-axis and\n    left of the y-axis.\n\nextent : 4-tuple of float, default: *None*\n    The limits of the bins (xmin, xmax, ymin, ymax).\n    The default assigns the limits based on\n    *gridsize*, *x*, *y*, *xscale* and *yscale*.\n\n    If *xscale* or *yscale* is set to 'log', the limits are\n    expected to be the exponent for a power of 10. E.g. for\n    x-limits of 1 and 50 in 'linear' scale and y-limits\n    of 10 and 1000 in 'log' scale, enter (1, 50, 1, 3).\n\nReturns\n-------\n`~matplotlib.collections.PolyCollection`\n    A `.PolyCollection` defining the hexagonal bins.\n\n    - `.PolyCollection.get_offsets` contains a Mx2 array containing\n      the x, y positions of the M hexagon centers.\n    - `.PolyCollection.get_array` contains the values of the M\n      hexagons.\n\n    If *marginals* is *True*, horizontal\n    bar and vertical bar (both PolyCollections) will be attached\n    to the return collection as attributes *hbar* and *vbar*.\n\nOther Parameters\n----------------\ncmap : str or `~matplotlib.colors.Colormap`, default: :rc:`image.cmap`\n    The Colormap instance or registered colormap name used to map scalar data\n    to colors.\n\nnorm : str or `~matplotlib.colors.Normalize`, optional\n    The normalization method used to scale scalar data to the [0, 1] range\n    before mapping to colors using *cmap*. By default, a linear scaling is\n    used, mapping the lowest value to 0 and the highest to 1.\n\n    If given, this can be one of the following:\n\n    - An instance of `.Normalize` or one of its subclasses\n      (see :ref:`colormapnorms`).\n    - A scale name, i.e. one of \"linear\", \"log\", \"symlog\", \"logit\", etc.  For a\n      list of available scales, call `matplotlib.scale.get_scale_names()`.\n      In that case, a suitable `.Normalize` subclass is dynamically generated\n      and instantiated.\n\nvmin, vmax : float, optional\n    When using scalar data and no explicit *norm*, *vmin* and *vmax* define\n    the data range that the colormap covers. By default, the colormap covers\n    the complete value range of the supplied data. It is an error to use\n    *vmin*/*vmax* when a *norm* instance is given (but using a `str` *norm*\n    name together with *vmin*/*vmax* is acceptable).\n\nalpha : float between 0 and 1, optional\n    The alpha blending value, between 0 (transparent) and 1 (opaque).\n\nlinewidths : float, default: *None*\n    If *None*, defaults to :rc:`patch.linewidth`.\n\nedgecolors : {'face', 'none', *None*} or color, default: 'face'\n    The color of the hexagon edges. Possible values are:\n\n    - 'face': Draw the edges in the same color as the fill color.\n    - 'none': No edges are drawn. This can sometimes lead to unsightly\n      unpainted pixels between the hexagons.\n    - *None*: Draw outlines in the default color.\n    - An explicit color.\n\nreduce_C_function : callable, default: `numpy.mean`\n    The function to aggregate *C* within the bins. It is ignored if\n    *C* is not given. This must have the signature::\n\n        def reduce_C_function(C: array) -> float\n\n    Commonly used functions are:\n\n    - `numpy.mean`: average of the points\n    - `numpy.sum`: integral of the point values\n    - `numpy.amax`: value taken from the largest point\n\n    By default will only reduce cells with at least 1 point because some\n    reduction functions (such as `numpy.amax`) will error/warn with empty\n    input. Changing *mincnt* will adjust the cutoff, and if set to 0 will\n    pass empty input to the reduction function.\n\ndata : indexable object, optional\n    If given, the following parameters also accept a string ``s``, which is\n    interpreted as ``data[s]`` (unless this raises an exception):\n\n    *x*, *y*, *C*\n\n**kwargs : `~matplotlib.collections.PolyCollection` properties\n    All other keyword arguments are passed on to `.PolyCollection`:\n\n    Properties:\n    agg_filter: a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array and two offsets from the bottom left corner of the image\n    alpha: array-like or scalar or None\n    animated: bool\n    antialiased or aa or antialiaseds: bool or list of bools\n    array: array-like or None\n    capstyle: `.CapStyle` or {'butt', 'projecting', 'round'}\n    clim: (vmin: float, vmax: float)\n    clip_box: `~matplotlib.transforms.BboxBase` or None\n    clip_on: bool\n    clip_path: Patch or (Path, Transform) or None\n    cmap: `.Colormap` or str or None\n    color: color or list of RGBA tuples\n    edgecolor or ec or edgecolors: color or list of colors or 'face'\n    facecolor or facecolors or fc: color or list of colors\n    figure: `~matplotlib.figure.Figure`\n    gid: str\n    hatch: {'/', '\\\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}\n    in_layout: bool\n    joinstyle: `.JoinStyle` or {'miter', 'round', 'bevel'}\n    label: object\n    linestyle or dashes or linestyles or ls: str or tuple or list thereof\n    linewidth or linewidths or lw: float or list of floats\n    mouseover: bool\n    norm: `.Normalize` or str or None\n    offset_transform or transOffset: `.Transform`\n    offsets: (N, 2) or (2,) array-like\n    path_effects: list of `.AbstractPathEffect`\n    paths: list of array-like\n    picker: None or bool or float or callable\n    pickradius: float\n    rasterized: bool\n    sizes: `numpy.ndarray` or None\n    sketch_params: (scale: float, length: float, randomness: float)\n    snap: bool or None\n    transform: `~matplotlib.transforms.Transform`\n    url: str\n    urls: list of str or None\n    verts: list of array-like\n    verts_and_codes: unknown\n    visible: bool\n    zorder: float\n\nSee Also\n--------\nhist2d : 2D histogram rectangular bins"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subClassOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#AtomicMethod"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#PlotMethod"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#PyplotModule"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Hist",
  "@type" : [ "http://www.w3.org/2002/07/owl#Class" ],
  "http://www.w3.org/2000/01/rdf-schema#comment" : [ {
    "@value" : "Compute and plot a histogram.\n\nThis method uses `numpy.histogram` to bin the data in *x* and count the\nnumber of values in each bin, then draws the distribution either as a\n`.BarContainer` or `.Polygon`. The *bins*, *range*, *density*, and\n*weights* parameters are forwarded to `numpy.histogram`.\n\nIf the data has already been binned and counted, use `~.bar` or\n`~.stairs` to plot the distribution::\n\n    counts, bins = np.histogram(x)\n    plt.stairs(counts, bins)\n\nAlternatively, plot pre-computed bins and counts using ``hist()`` by\ntreating each bin as a single point with a weight equal to its count::\n\n    plt.hist(bins[:-1], bins, weights=counts)\n\nThe data input *x* can be a singular array, a list of datasets of\npotentially different lengths ([*x0*, *x1*, ...]), or a 2D ndarray in\nwhich each column is a dataset. Note that the ndarray form is\ntransposed relative to the list form. If the input is an array, then\nthe return value is a tuple (*n*, *bins*, *patches*); if the input is a\nsequence of arrays, then the return value is a tuple\n([*n0*, *n1*, ...], *bins*, [*patches0*, *patches1*, ...]).\n\nMasked arrays are not supported.\n\nParameters\n----------\nx : (n,) array or sequence of (n,) arrays\n    Input values, this takes either a single array or a sequence of\n    arrays which are not required to be of the same length.\n\nbins : int or sequence or str, default: :rc:`hist.bins`\n    If *bins* is an integer, it defines the number of equal-width bins\n    in the range.\n\n    If *bins* is a sequence, it defines the bin edges, including the\n    left edge of the first bin and the right edge of the last bin;\n    in this case, bins may be unequally spaced.  All but the last\n    (righthand-most) bin is half-open.  In other words, if *bins* is::\n\n        [1, 2, 3, 4]\n\n    then the first bin is ``[1, 2)`` (including 1, but excluding 2) and\n    the second ``[2, 3)``.  The last bin, however, is ``[3, 4]``, which\n    *includes* 4.\n\n    If *bins* is a string, it is one of the binning strategies\n    supported by `numpy.histogram_bin_edges`: 'auto', 'fd', 'doane',\n    'scott', 'stone', 'rice', 'sturges', or 'sqrt'.\n\nrange : tuple or None, default: None\n    The lower and upper range of the bins. Lower and upper outliers\n    are ignored. If not provided, *range* is ``(x.min(), x.max())``.\n    Range has no effect if *bins* is a sequence.\n\n    If *bins* is a sequence or *range* is specified, autoscaling\n    is based on the specified bin range instead of the\n    range of x.\n\ndensity : bool, default: False\n    If ``True``, draw and return a probability density: each bin\n    will display the bin's raw count divided by the total number of\n    counts *and the bin width*\n    (``density = counts / (sum(counts) * np.diff(bins))``),\n    so that the area under the histogram integrates to 1\n    (``np.sum(density * np.diff(bins)) == 1``).\n\n    If *stacked* is also ``True``, the sum of the histograms is\n    normalized to 1.\n\nweights : (n,) array-like or None, default: None\n    An array of weights, of the same shape as *x*.  Each value in\n    *x* only contributes its associated weight towards the bin count\n    (instead of 1).  If *density* is ``True``, the weights are\n    normalized, so that the integral of the density over the range\n    remains 1.\n\ncumulative : bool or -1, default: False\n    If ``True``, then a histogram is computed where each bin gives the\n    counts in that bin plus all bins for smaller values. The last bin\n    gives the total number of datapoints.\n\n    If *density* is also ``True`` then the histogram is normalized such\n    that the last bin equals 1.\n\n    If *cumulative* is a number less than 0 (e.g., -1), the direction\n    of accumulation is reversed.  In this case, if *density* is also\n    ``True``, then the histogram is normalized such that the first bin\n    equals 1.\n\nbottom : array-like, scalar, or None, default: None\n    Location of the bottom of each bin, i.e. bins are drawn from\n    ``bottom`` to ``bottom + hist(x, bins)`` If a scalar, the bottom\n    of each bin is shifted by the same amount. If an array, each bin\n    is shifted independently and the length of bottom must match the\n    number of bins. If None, defaults to 0.\n\nhisttype : {'bar', 'barstacked', 'step', 'stepfilled'}, default: 'bar'\n    The type of histogram to draw.\n\n    - 'bar' is a traditional bar-type histogram.  If multiple data\n      are given the bars are arranged side by side.\n    - 'barstacked' is a bar-type histogram where multiple\n      data are stacked on top of each other.\n    - 'step' generates a lineplot that is by default unfilled.\n    - 'stepfilled' generates a lineplot that is by default filled.\n\nalign : {'left', 'mid', 'right'}, default: 'mid'\n    The horizontal alignment of the histogram bars.\n\n    - 'left': bars are centered on the left bin edges.\n    - 'mid': bars are centered between the bin edges.\n    - 'right': bars are centered on the right bin edges.\n\norientation : {'vertical', 'horizontal'}, default: 'vertical'\n    If 'horizontal', `~.Axes.barh` will be used for bar-type histograms\n    and the *bottom* kwarg will be the left edges.\n\nrwidth : float or None, default: None\n    The relative width of the bars as a fraction of the bin width.  If\n    ``None``, automatically compute the width.\n\n    Ignored if *histtype* is 'step' or 'stepfilled'.\n\nlog : bool, default: False\n    If ``True``, the histogram axis will be set to a log scale.\n\ncolor : color or array-like of colors or None, default: None\n    Color or sequence of colors, one per dataset.  Default (``None``)\n    uses the standard line color sequence.\n\nlabel : str or None, default: None\n    String, or sequence of strings to match multiple datasets.  Bar\n    charts yield multiple patches per dataset, but only the first gets\n    the label, so that `~.Axes.legend` will work as expected.\n\nstacked : bool, default: False\n    If ``True``, multiple data are stacked on top of each other If\n    ``False`` multiple data are arranged side by side if histtype is\n    'bar' or on top of each other if histtype is 'step'\n\nReturns\n-------\nn : array or list of arrays\n    The values of the histogram bins. See *density* and *weights* for a\n    description of the possible semantics.  If input *x* is an array,\n    then this is an array of length *nbins*. If input is a sequence of\n    arrays ``[data1, data2, ...]``, then this is a list of arrays with\n    the values of the histograms for each of the arrays in the same\n    order.  The dtype of the array *n* (or of its element arrays) will\n    always be float even if no weighting or normalization is used.\n\nbins : array\n    The edges of the bins. Length nbins + 1 (nbins left edges and right\n    edge of last bin).  Always a single array even when multiple data\n    sets are passed in.\n\npatches : `.BarContainer` or list of a single `.Polygon` or list of such objects\n    Container of individual artists used to create the histogram\n    or list of such containers if there are multiple input datasets.\n\nOther Parameters\n----------------\ndata : indexable object, optional\n    If given, the following parameters also accept a string ``s``, which is\n    interpreted as ``data[s]`` (unless this raises an exception):\n\n    *x*, *weights*\n\n**kwargs\n    `~matplotlib.patches.Patch` properties\n\nSee Also\n--------\nhist2d : 2D histogram with rectangular bins\nhexbin : 2D histogram with hexagonal bins\nstairs : Plot a pre-computed histogram\nbar : Plot a pre-computed histogram\n\nNotes\n-----\nFor large numbers of bins (>1000), plotting can be significantly\naccelerated by using `~.Axes.stairs` to plot a pre-computed histogram\n(``plt.stairs(*np.histogram(data))``), or by setting *histtype* to\n'step' or 'stepfilled' rather than 'bar' or 'barstacked'."
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subClassOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#AtomicMethod"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#PlotMethod"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#PyplotModule"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Hist2d",
  "@type" : [ "http://www.w3.org/2002/07/owl#Class" ],
  "http://www.w3.org/2000/01/rdf-schema#comment" : [ {
    "@value" : "Make a 2D histogram plot.\n\nParameters\n----------\nx, y : array-like, shape (n, )\n    Input values\n\nbins : None or int or [int, int] or array-like or [array, array]\n\n    The bin specification:\n\n    - If int, the number of bins for the two dimensions\n      (``nx = ny = bins``).\n    - If ``[int, int]``, the number of bins in each dimension\n      (``nx, ny = bins``).\n    - If array-like, the bin edges for the two dimensions\n      (``x_edges = y_edges = bins``).\n    - If ``[array, array]``, the bin edges in each dimension\n      (``x_edges, y_edges = bins``).\n\n    The default value is 10.\n\nrange : array-like shape(2, 2), optional\n    The leftmost and rightmost edges of the bins along each dimension\n    (if not specified explicitly in the bins parameters): ``[[xmin,\n    xmax], [ymin, ymax]]``. All values outside of this range will be\n    considered outliers and not tallied in the histogram.\n\ndensity : bool, default: False\n    Normalize histogram.  See the documentation for the *density*\n    parameter of `~.Axes.hist` for more details.\n\nweights : array-like, shape (n, ), optional\n    An array of values w_i weighing each sample (x_i, y_i).\n\ncmin, cmax : float, default: None\n    All bins that has count less than *cmin* or more than *cmax* will not be\n    displayed (set to NaN before passing to `~.Axes.pcolormesh`) and these count\n    values in the return value count histogram will also be set to nan upon\n    return.\n\nReturns\n-------\nh : 2D array\n    The bi-dimensional histogram of samples x and y. Values in x are\n    histogrammed along the first dimension and values in y are\n    histogrammed along the second dimension.\nxedges : 1D array\n    The bin edges along the x-axis.\nyedges : 1D array\n    The bin edges along the y-axis.\nimage : `~.matplotlib.collections.QuadMesh`\n\nOther Parameters\n----------------\ncmap : str or `~matplotlib.colors.Colormap`, default: :rc:`image.cmap`\n    The Colormap instance or registered colormap name used to map scalar data\n    to colors.\n\nnorm : str or `~matplotlib.colors.Normalize`, optional\n    The normalization method used to scale scalar data to the [0, 1] range\n    before mapping to colors using *cmap*. By default, a linear scaling is\n    used, mapping the lowest value to 0 and the highest to 1.\n\n    If given, this can be one of the following:\n\n    - An instance of `.Normalize` or one of its subclasses\n      (see :ref:`colormapnorms`).\n    - A scale name, i.e. one of \"linear\", \"log\", \"symlog\", \"logit\", etc.  For a\n      list of available scales, call `matplotlib.scale.get_scale_names()`.\n      In that case, a suitable `.Normalize` subclass is dynamically generated\n      and instantiated.\n\nvmin, vmax : float, optional\n    When using scalar data and no explicit *norm*, *vmin* and *vmax* define\n    the data range that the colormap covers. By default, the colormap covers\n    the complete value range of the supplied data. It is an error to use\n    *vmin*/*vmax* when a *norm* instance is given (but using a `str` *norm*\n    name together with *vmin*/*vmax* is acceptable).\n\nalpha : ``0 <= scalar <= 1`` or ``None``, optional\n    The alpha blending value.\n\ndata : indexable object, optional\n    If given, the following parameters also accept a string ``s``, which is\n    interpreted as ``data[s]`` (unless this raises an exception):\n\n    *x*, *y*, *weights*\n\n**kwargs\n    Additional parameters are passed along to the\n    `~.Axes.pcolormesh` method and `~matplotlib.collections.QuadMesh`\n    constructor.\n\nSee Also\n--------\nhist : 1D histogram plotting\nhexbin : 2D histogram with hexagonal bins\n\nNotes\n-----\n- Currently ``hist2d`` calculates its own axis limits, and any limits\n  previously set are ignored.\n- Rendering the histogram with a logarithmic color scale is\n  accomplished by passing a `.colors.LogNorm` instance to the *norm*\n  keyword argument. Likewise, power-law normalization (similar\n  in effect to gamma correction) can be accomplished with\n  `.colors.PowerNorm`."
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subClassOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#AtomicMethod"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#PlotMethod"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#PyplotModule"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Histogram",
  "@type" : [ "http://www.w3.org/2002/07/owl#Class" ],
  "http://www.w3.org/2000/01/rdf-schema#subClassOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#AtomicTask"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Plot"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#ImagePlot",
  "@type" : [ "http://www.w3.org/2002/07/owl#Class" ],
  "http://www.w3.org/2000/01/rdf-schema#subClassOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#AtomicTask"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Plot"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Imshow",
  "@type" : [ "http://www.w3.org/2002/07/owl#Class" ],
  "http://www.w3.org/2000/01/rdf-schema#comment" : [ {
    "@value" : "Display data as an image, i.e., on a 2D regular raster.\n\nThe input may either be actual RGB(A) data, or 2D scalar data, which\nwill be rendered as a pseudocolor image. For displaying a grayscale\nimage, set up the colormapping using the parameters\n``cmap='gray', vmin=0, vmax=255``.\n\nThe number of pixels used to render an image is set by the Axes size\nand the figure *dpi*. This can lead to aliasing artifacts when\nthe image is resampled, because the displayed image size will usually\nnot match the size of *X* (see\n:doc:`/gallery/images_contours_and_fields/image_antialiasing`).\nThe resampling can be controlled via the *interpolation* parameter\nand/or :rc:`image.interpolation`.\n\nParameters\n----------\nX : array-like or PIL image\n    The image data. Supported array shapes are:\n\n    - (M, N): an image with scalar data. The values are mapped to\n      colors using normalization and a colormap. See parameters *norm*,\n      *cmap*, *vmin*, *vmax*.\n    - (M, N, 3): an image with RGB values (0-1 float or 0-255 int).\n    - (M, N, 4): an image with RGBA values (0-1 float or 0-255 int),\n      i.e. including transparency.\n\n    The first two dimensions (M, N) define the rows and columns of\n    the image.\n\n    Out-of-range RGB(A) values are clipped.\n\ncmap : str or `~matplotlib.colors.Colormap`, default: :rc:`image.cmap`\n    The Colormap instance or registered colormap name used to map scalar data\n    to colors.\n\n    This parameter is ignored if *X* is RGB(A).\n\nnorm : str or `~matplotlib.colors.Normalize`, optional\n    The normalization method used to scale scalar data to the [0, 1] range\n    before mapping to colors using *cmap*. By default, a linear scaling is\n    used, mapping the lowest value to 0 and the highest to 1.\n\n    If given, this can be one of the following:\n\n    - An instance of `.Normalize` or one of its subclasses\n      (see :ref:`colormapnorms`).\n    - A scale name, i.e. one of \"linear\", \"log\", \"symlog\", \"logit\", etc.  For a\n      list of available scales, call `matplotlib.scale.get_scale_names()`.\n      In that case, a suitable `.Normalize` subclass is dynamically generated\n      and instantiated.\n\n    This parameter is ignored if *X* is RGB(A).\n\nvmin, vmax : float, optional\n    When using scalar data and no explicit *norm*, *vmin* and *vmax* define\n    the data range that the colormap covers. By default, the colormap covers\n    the complete value range of the supplied data. It is an error to use\n    *vmin*/*vmax* when a *norm* instance is given (but using a `str` *norm*\n    name together with *vmin*/*vmax* is acceptable).\n\n    This parameter is ignored if *X* is RGB(A).\n\naspect : {'equal', 'auto'} or float or None, default: None\n    The aspect ratio of the Axes.  This parameter is particularly\n    relevant for images since it determines whether data pixels are\n    square.\n\n    This parameter is a shortcut for explicitly calling\n    `.Axes.set_aspect`. See there for further details.\n\n    - 'equal': Ensures an aspect ratio of 1. Pixels will be square\n      (unless pixel sizes are explicitly made non-square in data\n      coordinates using *extent*).\n    - 'auto': The Axes is kept fixed and the aspect is adjusted so\n      that the data fit in the Axes. In general, this will result in\n      non-square pixels.\n\n    Normally, None (the default) means to use :rc:`image.aspect`.  However, if\n    the image uses a transform that does not contain the axes data transform,\n    then None means to not modify the axes aspect at all (in that case, directly\n    call `.Axes.set_aspect` if desired).\n\ninterpolation : str, default: :rc:`image.interpolation`\n    The interpolation method used.\n\n    Supported values are 'none', 'antialiased', 'nearest', 'bilinear',\n    'bicubic', 'spline16', 'spline36', 'hanning', 'hamming', 'hermite',\n    'kaiser', 'quadric', 'catrom', 'gaussian', 'bessel', 'mitchell',\n    'sinc', 'lanczos', 'blackman'.\n\n    The data *X* is resampled to the pixel size of the image on the\n    figure canvas, using the interpolation method to either up- or\n    downsample the data.\n\n    If *interpolation* is 'none', then for the ps, pdf, and svg\n    backends no down- or upsampling occurs, and the image data is\n    passed to the backend as a native image.  Note that different ps,\n    pdf, and svg viewers may display these raw pixels differently. On\n    other backends, 'none' is the same as 'nearest'.\n\n    If *interpolation* is the default 'antialiased', then 'nearest'\n    interpolation is used if the image is upsampled by more than a\n    factor of three (i.e. the number of display pixels is at least\n    three times the size of the data array).  If the upsampling rate is\n    smaller than 3, or the image is downsampled, then 'hanning'\n    interpolation is used to act as an anti-aliasing filter, unless the\n    image happens to be upsampled by exactly a factor of two or one.\n\n    See\n    :doc:`/gallery/images_contours_and_fields/interpolation_methods`\n    for an overview of the supported interpolation methods, and\n    :doc:`/gallery/images_contours_and_fields/image_antialiasing` for\n    a discussion of image antialiasing.\n\n    Some interpolation methods require an additional radius parameter,\n    which can be set by *filterrad*. Additionally, the antigrain image\n    resize filter is controlled by the parameter *filternorm*.\n\ninterpolation_stage : {'data', 'rgba'}, default: 'data'\n    If 'data', interpolation\n    is carried out on the data provided by the user.  If 'rgba', the\n    interpolation is carried out after the colormapping has been\n    applied (visual interpolation).\n\nalpha : float or array-like, optional\n    The alpha blending value, between 0 (transparent) and 1 (opaque).\n    If *alpha* is an array, the alpha blending values are applied pixel\n    by pixel, and *alpha* must have the same shape as *X*.\n\norigin : {'upper', 'lower'}, default: :rc:`image.origin`\n    Place the [0, 0] index of the array in the upper left or lower\n    left corner of the Axes. The convention (the default) 'upper' is\n    typically used for matrices and images.\n\n    Note that the vertical axis points upward for 'lower'\n    but downward for 'upper'.\n\n    See the :ref:`imshow_extent` tutorial for\n    examples and a more detailed description.\n\nextent : floats (left, right, bottom, top), optional\n    The bounding box in data coordinates that the image will fill.\n    These values may be unitful and match the units of the Axes.\n    The image is stretched individually along x and y to fill the box.\n\n    The default extent is determined by the following conditions.\n    Pixels have unit size in data coordinates. Their centers are on\n    integer coordinates, and their center coordinates range from 0 to\n    columns-1 horizontally and from 0 to rows-1 vertically.\n\n    Note that the direction of the vertical axis and thus the default\n    values for top and bottom depend on *origin*:\n\n    - For ``origin == 'upper'`` the default is\n      ``(-0.5, numcols-0.5, numrows-0.5, -0.5)``.\n    - For ``origin == 'lower'`` the default is\n      ``(-0.5, numcols-0.5, -0.5, numrows-0.5)``.\n\n    See the :ref:`imshow_extent` tutorial for\n    examples and a more detailed description.\n\nfilternorm : bool, default: True\n    A parameter for the antigrain image resize filter (see the\n    antigrain documentation).  If *filternorm* is set, the filter\n    normalizes integer values and corrects the rounding errors. It\n    doesn't do anything with the source floating point values, it\n    corrects only integers according to the rule of 1.0 which means\n    that any sum of pixel weights must be equal to 1.0.  So, the\n    filter function must produce a graph of the proper shape.\n\nfilterrad : float > 0, default: 4.0\n    The filter radius for filters that have a radius parameter, i.e.\n    when interpolation is one of: 'sinc', 'lanczos' or 'blackman'.\n\nresample : bool, default: :rc:`image.resample`\n    When *True*, use a full resampling method.  When *False*, only\n    resample when the output image is larger than the input image.\n\nurl : str, optional\n    Set the url of the created `.AxesImage`. See `.Artist.set_url`.\n\nReturns\n-------\n`~matplotlib.image.AxesImage`\n\nOther Parameters\n----------------\ndata : indexable object, optional\n    If given, all parameters also accept a string ``s``, which is\n    interpreted as ``data[s]`` (unless this raises an exception).\n\n**kwargs : `~matplotlib.artist.Artist` properties\n    These parameters are passed on to the constructor of the\n    `.AxesImage` artist.\n\nSee Also\n--------\nmatshow : Plot a matrix or an array as an image.\n\nNotes\n-----\nUnless *extent* is used, pixel centers will be located at integer\ncoordinates. In other words: the origin will coincide with the center\nof pixel (0, 0).\n\nThere are two common representations for RGB images with an alpha\nchannel:\n\n-   Straight (unassociated) alpha: R, G, and B channels represent the\n    color of the pixel, disregarding its opacity.\n-   Premultiplied (associated) alpha: R, G, and B channels represent\n    the color of the pixel, adjusted for its opacity by multiplication.\n\n`~matplotlib.pyplot.imshow` expects RGB images adopting the straight\n(unassociated) alpha representation."
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subClassOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#AtomicMethod"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#PlotMethod"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#PyplotModule"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#LinePlot",
  "@type" : [ "http://www.w3.org/2002/07/owl#Class" ],
  "http://www.w3.org/2000/01/rdf-schema#subClassOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#AtomicTask"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Plot"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Loglog",
  "@type" : [ "http://www.w3.org/2002/07/owl#Class" ],
  "http://www.w3.org/2000/01/rdf-schema#comment" : [ {
    "@value" : "Make a plot with log scaling on both the x- and y-axis.\n\nCall signatures::\n\n    loglog([x], y, [fmt], data=None, **kwargs)\n    loglog([x], y, [fmt], [x2], y2, [fmt2], ..., **kwargs)\n\nThis is just a thin wrapper around `.plot` which additionally changes\nboth the x-axis and the y-axis to log scaling. All the concepts and\nparameters of plot can be used here as well.\n\nThe additional parameters *base*, *subs* and *nonpositive* control the\nx/y-axis properties. They are just forwarded to `.Axes.set_xscale` and\n`.Axes.set_yscale`. To use different properties on the x-axis and the\ny-axis, use e.g.\n``ax.set_xscale(\"log\", base=10); ax.set_yscale(\"log\", base=2)``.\n\nParameters\n----------\nbase : float, default: 10\n    Base of the logarithm.\n\nsubs : sequence, optional\n    The location of the minor ticks. If *None*, reasonable locations\n    are automatically chosen depending on the number of decades in the\n    plot. See `.Axes.set_xscale`/`.Axes.set_yscale` for details.\n\nnonpositive : {'mask', 'clip'}, default: 'clip'\n    Non-positive values can be masked as invalid, or clipped to a very\n    small positive number.\n\n**kwargs\n    All parameters supported by `.plot`.\n\nReturns\n-------\nlist of `.Line2D`\n    Objects representing the plotted data."
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subClassOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#AtomicMethod"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#PlotMethod"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#PyplotModule"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#MagnitudeSpectrum",
  "@type" : [ "http://www.w3.org/2002/07/owl#Class" ],
  "http://www.w3.org/2000/01/rdf-schema#comment" : [ {
    "@value" : "Plot the magnitude spectrum.\n\nCompute the magnitude spectrum of *x*.  Data is padded to a\nlength of *pad_to* and the windowing function *window* is applied to\nthe signal.\n\nParameters\n----------\nx : 1-D array or sequence\n    Array or sequence containing the data.\n\nFs : float, default: 2\n    The sampling frequency (samples per time unit).  It is used to calculate\n    the Fourier frequencies, *freqs*, in cycles per time unit.\n\nwindow : callable or ndarray, default: `.window_hanning`\n    A function or a vector of length *NFFT*.  To create window vectors see\n    `.window_hanning`, `.window_none`, `numpy.blackman`, `numpy.hamming`,\n    `numpy.bartlett`, `scipy.signal`, `scipy.signal.get_window`, etc.  If a\n    function is passed as the argument, it must take a data segment as an\n    argument and return the windowed version of the segment.\n\nsides : {'default', 'onesided', 'twosided'}, optional\n    Which sides of the spectrum to return. 'default' is one-sided for real\n    data and two-sided for complex data. 'onesided' forces the return of a\n    one-sided spectrum, while 'twosided' forces two-sided.\n\npad_to : int, optional\n    The number of points to which the data segment is padded when performing\n    the FFT.  While not increasing the actual resolution of the spectrum (the\n    minimum distance between resolvable peaks), this can give more points in\n    the plot, allowing for more detail. This corresponds to the *n* parameter\n    in the call to `~numpy.fft.fft`.  The default is None, which sets *pad_to*\n    equal to the length of the input signal (i.e. no padding).\n\nscale : {'default', 'linear', 'dB'}\n    The scaling of the values in the *spec*.  'linear' is no scaling.\n    'dB' returns the values in dB scale, i.e., the dB amplitude\n    (20 * log10). 'default' is 'linear'.\n\nFc : int, default: 0\n    The center frequency of *x*, which offsets the x extents of the\n    plot to reflect the frequency range used when a signal is acquired\n    and then filtered and downsampled to baseband.\n\nReturns\n-------\nspectrum : 1-D array\n    The values for the magnitude spectrum before scaling (real valued).\n\nfreqs : 1-D array\n    The frequencies corresponding to the elements in *spectrum*.\n\nline : `~matplotlib.lines.Line2D`\n    The line created by this function.\n\nOther Parameters\n----------------\ndata : indexable object, optional\n    If given, the following parameters also accept a string ``s``, which is\n    interpreted as ``data[s]`` (unless this raises an exception):\n\n    *x*\n\n**kwargs\n    Keyword arguments control the `.Line2D` properties:\n\n    Properties:\n    agg_filter: a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array and two offsets from the bottom left corner of the image\n    alpha: scalar or None\n    animated: bool\n    antialiased or aa: bool\n    clip_box: `~matplotlib.transforms.BboxBase` or None\n    clip_on: bool\n    clip_path: Patch or (Path, Transform) or None\n    color or c: color\n    dash_capstyle: `.CapStyle` or {'butt', 'projecting', 'round'}\n    dash_joinstyle: `.JoinStyle` or {'miter', 'round', 'bevel'}\n    dashes: sequence of floats (on/off ink in points) or (None, None)\n    data: (2, N) array or two 1D arrays\n    drawstyle or ds: {'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default: 'default'\n    figure: `~matplotlib.figure.Figure`\n    fillstyle: {'full', 'left', 'right', 'bottom', 'top', 'none'}\n    gapcolor: color or None\n    gid: str\n    in_layout: bool\n    label: object\n    linestyle or ls: {'-', '--', '-.', ':', '', (offset, on-off-seq), ...}\n    linewidth or lw: float\n    marker: marker style string, `~.path.Path` or `~.markers.MarkerStyle`\n    markeredgecolor or mec: color\n    markeredgewidth or mew: float\n    markerfacecolor or mfc: color\n    markerfacecoloralt or mfcalt: color\n    markersize or ms: float\n    markevery: None or int or (int, int) or slice or list[int] or float or (float, float) or list[bool]\n    mouseover: bool\n    path_effects: list of `.AbstractPathEffect`\n    picker: float or callable[[Artist, Event], tuple[bool, dict]]\n    pickradius: float\n    rasterized: bool\n    sketch_params: (scale: float, length: float, randomness: float)\n    snap: bool or None\n    solid_capstyle: `.CapStyle` or {'butt', 'projecting', 'round'}\n    solid_joinstyle: `.JoinStyle` or {'miter', 'round', 'bevel'}\n    transform: unknown\n    url: str\n    visible: bool\n    xdata: 1D array\n    ydata: 1D array\n    zorder: float\n\nSee Also\n--------\npsd\n    Plots the power spectral density.\nangle_spectrum\n    Plots the angles of the corresponding frequencies.\nphase_spectrum\n    Plots the phase (unwrapped angle) of the corresponding frequencies.\nspecgram\n    Can plot the magnitude spectrum of segments within the signal in a\n    colormap."
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subClassOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#AtomicMethod"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#PlotMethod"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#PyplotModule"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#MatplotlibModule",
  "@type" : [ "http://www.w3.org/2002/07/owl#Class" ],
  "http://www.w3.org/2000/01/rdf-schema#subClassOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#Module"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Pcolor",
  "@type" : [ "http://www.w3.org/2002/07/owl#Class" ],
  "http://www.w3.org/2000/01/rdf-schema#comment" : [ {
    "@value" : "Create a pseudocolor plot with a non-regular rectangular grid.\n\nCall signature::\n\n    pcolor([X, Y,] C, **kwargs)\n\n*X* and *Y* can be used to specify the corners of the quadrilaterals.\n\n.. hint::\n\n    ``pcolor()`` can be very slow for large arrays. In most\n    cases you should use the similar but much faster\n    `~.Axes.pcolormesh` instead. See\n    :ref:`Differences between pcolor() and pcolormesh()\n    <differences-pcolor-pcolormesh>` for a discussion of the\n    differences.\n\nParameters\n----------\nC : 2D array-like\n    The color-mapped values.  Color-mapping is controlled by *cmap*,\n    *norm*, *vmin*, and *vmax*.\n\nX, Y : array-like, optional\n    The coordinates of the corners of quadrilaterals of a pcolormesh::\n\n        (X[i+1, j], Y[i+1, j])       (X[i+1, j+1], Y[i+1, j+1])\n                              ●╶───╴●\n                              │     │\n                              ●╶───╴●\n            (X[i, j], Y[i, j])       (X[i, j+1], Y[i, j+1])\n\n    Note that the column index corresponds to the x-coordinate, and\n    the row index corresponds to y. For details, see the\n    :ref:`Notes <axes-pcolormesh-grid-orientation>` section below.\n\n    If ``shading='flat'`` the dimensions of *X* and *Y* should be one\n    greater than those of *C*, and the quadrilateral is colored due\n    to the value at ``C[i, j]``.  If *X*, *Y* and *C* have equal\n    dimensions, a warning will be raised and the last row and column\n    of *C* will be ignored.\n\n    If ``shading='nearest'``, the dimensions of *X* and *Y* should be\n    the same as those of *C* (if not, a ValueError will be raised). The\n    color ``C[i, j]`` will be centered on ``(X[i, j], Y[i, j])``.\n\n    If *X* and/or *Y* are 1-D arrays or column vectors they will be\n    expanded as needed into the appropriate 2D arrays, making a\n    rectangular grid.\n\nshading : {'flat', 'nearest', 'auto'}, default: :rc:`pcolor.shading`\n    The fill style for the quadrilateral. Possible values:\n\n    - 'flat': A solid color is used for each quad. The color of the\n      quad (i, j), (i+1, j), (i, j+1), (i+1, j+1) is given by\n      ``C[i, j]``. The dimensions of *X* and *Y* should be\n      one greater than those of *C*; if they are the same as *C*,\n      then a deprecation warning is raised, and the last row\n      and column of *C* are dropped.\n    - 'nearest': Each grid point will have a color centered on it,\n      extending halfway between the adjacent grid centers.  The\n      dimensions of *X* and *Y* must be the same as *C*.\n    - 'auto': Choose 'flat' if dimensions of *X* and *Y* are one\n      larger than *C*.  Choose 'nearest' if dimensions are the same.\n\n    See :doc:`/gallery/images_contours_and_fields/pcolormesh_grids`\n    for more description.\n\ncmap : str or `~matplotlib.colors.Colormap`, default: :rc:`image.cmap`\n    The Colormap instance or registered colormap name used to map scalar data\n    to colors.\n\nnorm : str or `~matplotlib.colors.Normalize`, optional\n    The normalization method used to scale scalar data to the [0, 1] range\n    before mapping to colors using *cmap*. By default, a linear scaling is\n    used, mapping the lowest value to 0 and the highest to 1.\n\n    If given, this can be one of the following:\n\n    - An instance of `.Normalize` or one of its subclasses\n      (see :ref:`colormapnorms`).\n    - A scale name, i.e. one of \"linear\", \"log\", \"symlog\", \"logit\", etc.  For a\n      list of available scales, call `matplotlib.scale.get_scale_names()`.\n      In that case, a suitable `.Normalize` subclass is dynamically generated\n      and instantiated.\n\nvmin, vmax : float, optional\n    When using scalar data and no explicit *norm*, *vmin* and *vmax* define\n    the data range that the colormap covers. By default, the colormap covers\n    the complete value range of the supplied data. It is an error to use\n    *vmin*/*vmax* when a *norm* instance is given (but using a `str` *norm*\n    name together with *vmin*/*vmax* is acceptable).\n\nedgecolors : {'none', None, 'face', color, color sequence}, optional\n    The color of the edges. Defaults to 'none'. Possible values:\n\n    - 'none' or '': No edge.\n    - *None*: :rc:`patch.edgecolor` will be used. Note that currently\n      :rc:`patch.force_edgecolor` has to be True for this to work.\n    - 'face': Use the adjacent face color.\n    - A color or sequence of colors will set the edge color.\n\n    The singular form *edgecolor* works as an alias.\n\nalpha : float, default: None\n    The alpha blending value of the face color, between 0 (transparent)\n    and 1 (opaque). Note: The edgecolor is currently not affected by\n    this.\n\nsnap : bool, default: False\n    Whether to snap the mesh to pixel boundaries.\n\nReturns\n-------\n`matplotlib.collections.PolyQuadMesh`\n\nOther Parameters\n----------------\nantialiaseds : bool, default: False\n    The default *antialiaseds* is False if the default\n    *edgecolors*\\ =\"none\" is used.  This eliminates artificial lines\n    at patch boundaries, and works regardless of the value of alpha.\n    If *edgecolors* is not \"none\", then the default *antialiaseds*\n    is taken from :rc:`patch.antialiased`.\n    Stroking the edges may be preferred if *alpha* is 1, but will\n    cause artifacts otherwise.\n\ndata : indexable object, optional\n    If given, all parameters also accept a string ``s``, which is\n    interpreted as ``data[s]`` (unless this raises an exception).\n\n**kwargs\n    Additionally, the following arguments are allowed. They are passed\n    along to the `~matplotlib.collections.PolyQuadMesh` constructor:\n\nProperties:\n    agg_filter: a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array and two offsets from the bottom left corner of the image\n    alpha: array-like or scalar or None\n    animated: bool\n    antialiased or aa or antialiaseds: bool or list of bools\n    array: array-like or None\n    capstyle: `.CapStyle` or {'butt', 'projecting', 'round'}\n    clim: (vmin: float, vmax: float)\n    clip_box: `~matplotlib.transforms.BboxBase` or None\n    clip_on: bool\n    clip_path: Patch or (Path, Transform) or None\n    cmap: `.Colormap` or str or None\n    color: color or list of RGBA tuples\n    edgecolor or ec or edgecolors: color or list of colors or 'face'\n    facecolor or facecolors or fc: color or list of colors\n    figure: `~matplotlib.figure.Figure`\n    gid: str\n    hatch: {'/', '\\\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}\n    in_layout: bool\n    joinstyle: `.JoinStyle` or {'miter', 'round', 'bevel'}\n    label: object\n    linestyle or dashes or linestyles or ls: str or tuple or list thereof\n    linewidth or linewidths or lw: float or list of floats\n    mouseover: bool\n    norm: `.Normalize` or str or None\n    offset_transform or transOffset: `.Transform`\n    offsets: (N, 2) or (2,) array-like\n    path_effects: list of `.AbstractPathEffect`\n    paths: list of array-like\n    picker: None or bool or float or callable\n    pickradius: float\n    rasterized: bool\n    sizes: `numpy.ndarray` or None\n    sketch_params: (scale: float, length: float, randomness: float)\n    snap: bool or None\n    transform: `~matplotlib.transforms.Transform`\n    url: str\n    urls: list of str or None\n    verts: list of array-like\n    verts_and_codes: unknown\n    visible: bool\n    zorder: float\n\nSee Also\n--------\npcolormesh : for an explanation of the differences between\n    pcolor and pcolormesh.\nimshow : If *X* and *Y* are each equidistant, `~.Axes.imshow` can be a\n    faster alternative.\n\nNotes\n-----\n**Masked arrays**\n\n*X*, *Y* and *C* may be masked arrays. If either ``C[i, j]``, or one\nof the vertices surrounding ``C[i, j]`` (*X* or *Y* at\n``[i, j], [i+1, j], [i, j+1], [i+1, j+1]``) is masked, nothing is\nplotted.\n\n.. _axes-pcolor-grid-orientation:\n\n**Grid orientation**\n\nThe grid orientation follows the standard matrix convention: An array\n*C* with shape (nrows, ncolumns) is plotted with the column number as\n*X* and the row number as *Y*."
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subClassOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#AtomicMethod"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#PlotMethod"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#PyplotModule"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Pcolormesh",
  "@type" : [ "http://www.w3.org/2002/07/owl#Class" ],
  "http://www.w3.org/2000/01/rdf-schema#comment" : [ {
    "@value" : "Create a pseudocolor plot with a non-regular rectangular grid.\n\nCall signature::\n\n    pcolormesh([X, Y,] C, **kwargs)\n\n*X* and *Y* can be used to specify the corners of the quadrilaterals.\n\n.. hint::\n\n   `~.Axes.pcolormesh` is similar to `~.Axes.pcolor`. It is much faster\n   and preferred in most cases. For a detailed discussion on the\n   differences see :ref:`Differences between pcolor() and pcolormesh()\n   <differences-pcolor-pcolormesh>`.\n\nParameters\n----------\nC : array-like\n    The mesh data. Supported array shapes are:\n\n    - (M, N) or M*N: a mesh with scalar data. The values are mapped to\n      colors using normalization and a colormap. See parameters *norm*,\n      *cmap*, *vmin*, *vmax*.\n    - (M, N, 3): an image with RGB values (0-1 float or 0-255 int).\n    - (M, N, 4): an image with RGBA values (0-1 float or 0-255 int),\n      i.e. including transparency.\n\n    The first two dimensions (M, N) define the rows and columns of\n    the mesh data.\n\nX, Y : array-like, optional\n    The coordinates of the corners of quadrilaterals of a pcolormesh::\n\n        (X[i+1, j], Y[i+1, j])       (X[i+1, j+1], Y[i+1, j+1])\n                              ●╶───╴●\n                              │     │\n                              ●╶───╴●\n            (X[i, j], Y[i, j])       (X[i, j+1], Y[i, j+1])\n\n    Note that the column index corresponds to the x-coordinate, and\n    the row index corresponds to y. For details, see the\n    :ref:`Notes <axes-pcolormesh-grid-orientation>` section below.\n\n    If ``shading='flat'`` the dimensions of *X* and *Y* should be one\n    greater than those of *C*, and the quadrilateral is colored due\n    to the value at ``C[i, j]``.  If *X*, *Y* and *C* have equal\n    dimensions, a warning will be raised and the last row and column\n    of *C* will be ignored.\n\n    If ``shading='nearest'`` or ``'gouraud'``, the dimensions of *X*\n    and *Y* should be the same as those of *C* (if not, a ValueError\n    will be raised).  For ``'nearest'`` the color ``C[i, j]`` is\n    centered on ``(X[i, j], Y[i, j])``.  For ``'gouraud'``, a smooth\n    interpolation is caried out between the quadrilateral corners.\n\n    If *X* and/or *Y* are 1-D arrays or column vectors they will be\n    expanded as needed into the appropriate 2D arrays, making a\n    rectangular grid.\n\ncmap : str or `~matplotlib.colors.Colormap`, default: :rc:`image.cmap`\n    The Colormap instance or registered colormap name used to map scalar data\n    to colors.\n\nnorm : str or `~matplotlib.colors.Normalize`, optional\n    The normalization method used to scale scalar data to the [0, 1] range\n    before mapping to colors using *cmap*. By default, a linear scaling is\n    used, mapping the lowest value to 0 and the highest to 1.\n\n    If given, this can be one of the following:\n\n    - An instance of `.Normalize` or one of its subclasses\n      (see :ref:`colormapnorms`).\n    - A scale name, i.e. one of \"linear\", \"log\", \"symlog\", \"logit\", etc.  For a\n      list of available scales, call `matplotlib.scale.get_scale_names()`.\n      In that case, a suitable `.Normalize` subclass is dynamically generated\n      and instantiated.\n\nvmin, vmax : float, optional\n    When using scalar data and no explicit *norm*, *vmin* and *vmax* define\n    the data range that the colormap covers. By default, the colormap covers\n    the complete value range of the supplied data. It is an error to use\n    *vmin*/*vmax* when a *norm* instance is given (but using a `str` *norm*\n    name together with *vmin*/*vmax* is acceptable).\n\nedgecolors : {'none', None, 'face', color, color sequence}, optional\n    The color of the edges. Defaults to 'none'. Possible values:\n\n    - 'none' or '': No edge.\n    - *None*: :rc:`patch.edgecolor` will be used. Note that currently\n      :rc:`patch.force_edgecolor` has to be True for this to work.\n    - 'face': Use the adjacent face color.\n    - A color or sequence of colors will set the edge color.\n\n    The singular form *edgecolor* works as an alias.\n\nalpha : float, default: None\n    The alpha blending value, between 0 (transparent) and 1 (opaque).\n\nshading : {'flat', 'nearest', 'gouraud', 'auto'}, optional\n    The fill style for the quadrilateral; defaults to\n    :rc:`pcolor.shading`. Possible values:\n\n    - 'flat': A solid color is used for each quad. The color of the\n      quad (i, j), (i+1, j), (i, j+1), (i+1, j+1) is given by\n      ``C[i, j]``. The dimensions of *X* and *Y* should be\n      one greater than those of *C*; if they are the same as *C*,\n      then a deprecation warning is raised, and the last row\n      and column of *C* are dropped.\n    - 'nearest': Each grid point will have a color centered on it,\n      extending halfway between the adjacent grid centers.  The\n      dimensions of *X* and *Y* must be the same as *C*.\n    - 'gouraud': Each quad will be Gouraud shaded: The color of the\n      corners (i', j') are given by ``C[i', j']``. The color values of\n      the area in between is interpolated from the corner values.\n      The dimensions of *X* and *Y* must be the same as *C*. When\n      Gouraud shading is used, *edgecolors* is ignored.\n    - 'auto': Choose 'flat' if dimensions of *X* and *Y* are one\n      larger than *C*.  Choose 'nearest' if dimensions are the same.\n\n    See :doc:`/gallery/images_contours_and_fields/pcolormesh_grids`\n    for more description.\n\nsnap : bool, default: False\n    Whether to snap the mesh to pixel boundaries.\n\nrasterized : bool, optional\n    Rasterize the pcolormesh when drawing vector graphics.  This can\n    speed up rendering and produce smaller files for large data sets.\n    See also :doc:`/gallery/misc/rasterization_demo`.\n\nReturns\n-------\n`matplotlib.collections.QuadMesh`\n\nOther Parameters\n----------------\ndata : indexable object, optional\n    If given, all parameters also accept a string ``s``, which is\n    interpreted as ``data[s]`` (unless this raises an exception).\n\n**kwargs\n    Additionally, the following arguments are allowed. They are passed\n    along to the `~matplotlib.collections.QuadMesh` constructor:\n\nProperties:\n    agg_filter: a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array and two offsets from the bottom left corner of the image\n    alpha: array-like or scalar or None\n    animated: bool\n    antialiased or aa or antialiaseds: bool or list of bools\n    array: array-like\n    capstyle: `.CapStyle` or {'butt', 'projecting', 'round'}\n    clim: (vmin: float, vmax: float)\n    clip_box: `~matplotlib.transforms.BboxBase` or None\n    clip_on: bool\n    clip_path: Patch or (Path, Transform) or None\n    cmap: `.Colormap` or str or None\n    color: color or list of RGBA tuples\n    edgecolor or ec or edgecolors: color or list of colors or 'face'\n    facecolor or facecolors or fc: color or list of colors\n    figure: `~matplotlib.figure.Figure`\n    gid: str\n    hatch: {'/', '\\\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}\n    in_layout: bool\n    joinstyle: `.JoinStyle` or {'miter', 'round', 'bevel'}\n    label: object\n    linestyle or dashes or linestyles or ls: str or tuple or list thereof\n    linewidth or linewidths or lw: float or list of floats\n    mouseover: bool\n    norm: `.Normalize` or str or None\n    offset_transform or transOffset: `.Transform`\n    offsets: (N, 2) or (2,) array-like\n    path_effects: list of `.AbstractPathEffect`\n    picker: None or bool or float or callable\n    pickradius: float\n    rasterized: bool\n    sketch_params: (scale: float, length: float, randomness: float)\n    snap: bool or None\n    transform: `~matplotlib.transforms.Transform`\n    url: str\n    urls: list of str or None\n    visible: bool\n    zorder: float\n\nSee Also\n--------\npcolor : An alternative implementation with slightly different\n    features. For a detailed discussion on the differences see\n    :ref:`Differences between pcolor() and pcolormesh()\n    <differences-pcolor-pcolormesh>`.\nimshow : If *X* and *Y* are each equidistant, `~.Axes.imshow` can be a\n    faster alternative.\n\nNotes\n-----\n**Masked arrays**\n\n*C* may be a masked array. If ``C[i, j]`` is masked, the corresponding\nquadrilateral will be transparent. Masking of *X* and *Y* is not\nsupported. Use `~.Axes.pcolor` if you need this functionality.\n\n.. _axes-pcolormesh-grid-orientation:\n\n**Grid orientation**\n\nThe grid orientation follows the standard matrix convention: An array\n*C* with shape (nrows, ncolumns) is plotted with the column number as\n*X* and the row number as *Y*.\n\n.. _differences-pcolor-pcolormesh:\n\n**Differences between pcolor() and pcolormesh()**\n\nBoth methods are used to create a pseudocolor plot of a 2D array\nusing quadrilaterals.\n\nThe main difference lies in the created object and internal data\nhandling:\nWhile `~.Axes.pcolor` returns a `.PolyQuadMesh`, `~.Axes.pcolormesh`\nreturns a `.QuadMesh`. The latter is more specialized for the given\npurpose and thus is faster. It should almost always be preferred.\n\nThere is also a slight difference in the handling of masked arrays.\nBoth `~.Axes.pcolor` and `~.Axes.pcolormesh` support masked arrays\nfor *C*. However, only `~.Axes.pcolor` supports masked arrays for *X*\nand *Y*. The reason lies in the internal handling of the masked values.\n`~.Axes.pcolor` leaves out the respective polygons from the\nPolyQuadMesh. `~.Axes.pcolormesh` sets the facecolor of the masked\nelements to transparent. You can see the difference when using\nedgecolors. While all edges are drawn irrespective of masking in a\nQuadMesh, the edge between two adjacent masked quadrilaterals in\n`~.Axes.pcolor` is not drawn as the corresponding polygons do not\nexist in the PolyQuadMesh. Because PolyQuadMesh draws each individual\npolygon, it also supports applying hatches and linestyles to the collection.\n\nAnother difference is the support of Gouraud shading in\n`~.Axes.pcolormesh`, which is not available with `~.Axes.pcolor`."
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subClassOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#AtomicMethod"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#PlotMethod"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#PyplotModule"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#PhaseSpectrum",
  "@type" : [ "http://www.w3.org/2002/07/owl#Class" ],
  "http://www.w3.org/2000/01/rdf-schema#comment" : [ {
    "@value" : "Plot the phase spectrum.\n\nCompute the phase spectrum (unwrapped angle spectrum) of *x*.\nData is padded to a length of *pad_to* and the windowing function\n*window* is applied to the signal.\n\nParameters\n----------\nx : 1-D array or sequence\n    Array or sequence containing the data\n\nFs : float, default: 2\n    The sampling frequency (samples per time unit).  It is used to calculate\n    the Fourier frequencies, *freqs*, in cycles per time unit.\n\nwindow : callable or ndarray, default: `.window_hanning`\n    A function or a vector of length *NFFT*.  To create window vectors see\n    `.window_hanning`, `.window_none`, `numpy.blackman`, `numpy.hamming`,\n    `numpy.bartlett`, `scipy.signal`, `scipy.signal.get_window`, etc.  If a\n    function is passed as the argument, it must take a data segment as an\n    argument and return the windowed version of the segment.\n\nsides : {'default', 'onesided', 'twosided'}, optional\n    Which sides of the spectrum to return. 'default' is one-sided for real\n    data and two-sided for complex data. 'onesided' forces the return of a\n    one-sided spectrum, while 'twosided' forces two-sided.\n\npad_to : int, optional\n    The number of points to which the data segment is padded when performing\n    the FFT.  While not increasing the actual resolution of the spectrum (the\n    minimum distance between resolvable peaks), this can give more points in\n    the plot, allowing for more detail. This corresponds to the *n* parameter\n    in the call to `~numpy.fft.fft`.  The default is None, which sets *pad_to*\n    equal to the length of the input signal (i.e. no padding).\n\nFc : int, default: 0\n    The center frequency of *x*, which offsets the x extents of the\n    plot to reflect the frequency range used when a signal is acquired\n    and then filtered and downsampled to baseband.\n\nReturns\n-------\nspectrum : 1-D array\n    The values for the phase spectrum in radians (real valued).\n\nfreqs : 1-D array\n    The frequencies corresponding to the elements in *spectrum*.\n\nline : `~matplotlib.lines.Line2D`\n    The line created by this function.\n\nOther Parameters\n----------------\ndata : indexable object, optional\n    If given, the following parameters also accept a string ``s``, which is\n    interpreted as ``data[s]`` (unless this raises an exception):\n\n    *x*\n\n**kwargs\n    Keyword arguments control the `.Line2D` properties:\n\n    Properties:\n    agg_filter: a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array and two offsets from the bottom left corner of the image\n    alpha: scalar or None\n    animated: bool\n    antialiased or aa: bool\n    clip_box: `~matplotlib.transforms.BboxBase` or None\n    clip_on: bool\n    clip_path: Patch or (Path, Transform) or None\n    color or c: color\n    dash_capstyle: `.CapStyle` or {'butt', 'projecting', 'round'}\n    dash_joinstyle: `.JoinStyle` or {'miter', 'round', 'bevel'}\n    dashes: sequence of floats (on/off ink in points) or (None, None)\n    data: (2, N) array or two 1D arrays\n    drawstyle or ds: {'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default: 'default'\n    figure: `~matplotlib.figure.Figure`\n    fillstyle: {'full', 'left', 'right', 'bottom', 'top', 'none'}\n    gapcolor: color or None\n    gid: str\n    in_layout: bool\n    label: object\n    linestyle or ls: {'-', '--', '-.', ':', '', (offset, on-off-seq), ...}\n    linewidth or lw: float\n    marker: marker style string, `~.path.Path` or `~.markers.MarkerStyle`\n    markeredgecolor or mec: color\n    markeredgewidth or mew: float\n    markerfacecolor or mfc: color\n    markerfacecoloralt or mfcalt: color\n    markersize or ms: float\n    markevery: None or int or (int, int) or slice or list[int] or float or (float, float) or list[bool]\n    mouseover: bool\n    path_effects: list of `.AbstractPathEffect`\n    picker: float or callable[[Artist, Event], tuple[bool, dict]]\n    pickradius: float\n    rasterized: bool\n    sketch_params: (scale: float, length: float, randomness: float)\n    snap: bool or None\n    solid_capstyle: `.CapStyle` or {'butt', 'projecting', 'round'}\n    solid_joinstyle: `.JoinStyle` or {'miter', 'round', 'bevel'}\n    transform: unknown\n    url: str\n    visible: bool\n    xdata: 1D array\n    ydata: 1D array\n    zorder: float\n\nSee Also\n--------\nmagnitude_spectrum\n    Plots the magnitudes of the corresponding frequencies.\nangle_spectrum\n    Plots the wrapped version of this function.\nspecgram\n    Can plot the phase spectrum of segments within the signal in a\n    colormap."
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subClassOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#AtomicMethod"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#PlotMethod"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#PyplotModule"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Pie",
  "@type" : [ "http://www.w3.org/2002/07/owl#Class" ],
  "http://www.w3.org/2000/01/rdf-schema#comment" : [ {
    "@value" : "Plot a pie chart.\n\nMake a pie chart of array *x*.  The fractional area of each wedge is\ngiven by ``x/sum(x)``.\n\nThe wedges are plotted counterclockwise, by default starting from the\nx-axis.\n\nParameters\n----------\nx : 1D array-like\n    The wedge sizes.\n\nexplode : array-like, default: None\n    If not *None*, is a ``len(x)`` array which specifies the fraction\n    of the radius with which to offset each wedge.\n\nlabels : list, default: None\n    A sequence of strings providing the labels for each wedge\n\ncolors : color or array-like of color, default: None\n    A sequence of colors through which the pie chart will cycle.  If\n    *None*, will use the colors in the currently active cycle.\n\nhatch : str or list, default: None\n    Hatching pattern applied to all pie wedges or sequence of patterns\n    through which the chart will cycle. For a list of valid patterns,\n    see :doc:`/gallery/shapes_and_collections/hatch_style_reference`.\n\n    .. versionadded:: 3.7\n\nautopct : None or str or callable, default: None\n    If not *None*, *autopct* is a string or function used to label the\n    wedges with their numeric value. The label will be placed inside\n    the wedge. If *autopct* is a format string, the label will be\n    ``fmt % pct``. If *autopct* is a function, then it will be called.\n\npctdistance : float, default: 0.6\n    The relative distance along the radius at which the text\n    generated by *autopct* is drawn. To draw the text outside the pie,\n    set *pctdistance* > 1. This parameter is ignored if *autopct* is\n    ``None``.\n\nlabeldistance : float or None, default: 1.1\n    The relative distance along the radius at which the labels are\n    drawn. To draw the labels inside the pie, set  *labeldistance* < 1.\n    If set to ``None``, labels are not drawn but are still stored for\n    use in `.legend`.\n\nshadow : bool or dict, default: False\n    If bool, whether to draw a shadow beneath the pie. If dict, draw a shadow\n    passing the properties in the dict to `.Shadow`.\n\n    .. versionadded:: 3.8\n        *shadow* can be a dict.\n\nstartangle : float, default: 0 degrees\n    The angle by which the start of the pie is rotated,\n    counterclockwise from the x-axis.\n\nradius : float, default: 1\n    The radius of the pie.\n\ncounterclock : bool, default: True\n    Specify fractions direction, clockwise or counterclockwise.\n\nwedgeprops : dict, default: None\n    Dict of arguments passed to each `.patches.Wedge` of the pie.\n    For example, ``wedgeprops = {'linewidth': 3}`` sets the width of\n    the wedge border lines equal to 3. By default, ``clip_on=False``.\n    When there is a conflict between these properties and other\n    keywords, properties passed to *wedgeprops* take precedence.\n\ntextprops : dict, default: None\n    Dict of arguments to pass to the text objects.\n\ncenter : (float, float), default: (0, 0)\n    The coordinates of the center of the chart.\n\nframe : bool, default: False\n    Plot Axes frame with the chart if true.\n\nrotatelabels : bool, default: False\n    Rotate each label to the angle of the corresponding slice if true.\n\nnormalize : bool, default: True\n    When *True*, always make a full pie by normalizing x so that\n    ``sum(x) == 1``. *False* makes a partial pie if ``sum(x) <= 1``\n    and raises a `ValueError` for ``sum(x) > 1``.\n\ndata : indexable object, optional\n    If given, the following parameters also accept a string ``s``, which is\n    interpreted as ``data[s]`` (unless this raises an exception):\n\n    *x*, *explode*, *labels*, *colors*\n\nReturns\n-------\npatches : list\n    A sequence of `matplotlib.patches.Wedge` instances\n\ntexts : list\n    A list of the label `.Text` instances.\n\nautotexts : list\n    A list of `.Text` instances for the numeric labels. This will only\n    be returned if the parameter *autopct* is not *None*.\n\nNotes\n-----\nThe pie chart will probably look best if the figure and Axes are\nsquare, or the Axes aspect is equal.\nThis method sets the aspect ratio of the axis to \"equal\".\nThe Axes aspect ratio can be controlled with `.Axes.set_aspect`."
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subClassOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#AtomicMethod"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#PlotMethod"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#PyplotModule"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#PieChart",
  "@type" : [ "http://www.w3.org/2002/07/owl#Class" ],
  "http://www.w3.org/2000/01/rdf-schema#subClassOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#AtomicTask"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Plot"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Plot",
  "@type" : [ "http://www.w3.org/2002/07/owl#Class" ],
  "http://www.w3.org/2000/01/rdf-schema#comment" : [ {
    "@value" : "Plot y versus x as lines and/or markers.\n\nCall signatures::\n\n    plot([x], y, [fmt], *, data=None, **kwargs)\n    plot([x], y, [fmt], [x2], y2, [fmt2], ..., **kwargs)\n\nThe coordinates of the points or line nodes are given by *x*, *y*.\n\nThe optional parameter *fmt* is a convenient way for defining basic\nformatting like color, marker and linestyle. It's a shortcut string\nnotation described in the *Notes* section below.\n\n>>> plot(x, y)        # plot x and y using default line style and color\n>>> plot(x, y, 'bo')  # plot x and y using blue circle markers\n>>> plot(y)           # plot y using x as index array 0..N-1\n>>> plot(y, 'r+')     # ditto, but with red plusses\n\nYou can use `.Line2D` properties as keyword arguments for more\ncontrol on the appearance. Line properties and *fmt* can be mixed.\nThe following two calls yield identical results:\n\n>>> plot(x, y, 'go--', linewidth=2, markersize=12)\n>>> plot(x, y, color='green', marker='o', linestyle='dashed',\n...      linewidth=2, markersize=12)\n\nWhen conflicting with *fmt*, keyword arguments take precedence.\n\n\n**Plotting labelled data**\n\nThere's a convenient way for plotting objects with labelled data (i.e.\ndata that can be accessed by index ``obj['y']``). Instead of giving\nthe data in *x* and *y*, you can provide the object in the *data*\nparameter and just give the labels for *x* and *y*::\n\n>>> plot('xlabel', 'ylabel', data=obj)\n\nAll indexable objects are supported. This could e.g. be a `dict`, a\n`pandas.DataFrame` or a structured numpy array.\n\n\n**Plotting multiple sets of data**\n\nThere are various ways to plot multiple sets of data.\n\n- The most straight forward way is just to call `plot` multiple times.\n  Example:\n\n  >>> plot(x1, y1, 'bo')\n  >>> plot(x2, y2, 'go')\n\n- If *x* and/or *y* are 2D arrays a separate data set will be drawn\n  for every column. If both *x* and *y* are 2D, they must have the\n  same shape. If only one of them is 2D with shape (N, m) the other\n  must have length N and will be used for every data set m.\n\n  Example:\n\n  >>> x = [1, 2, 3]\n  >>> y = np.array([[1, 2], [3, 4], [5, 6]])\n  >>> plot(x, y)\n\n  is equivalent to:\n\n  >>> for col in range(y.shape[1]):\n  ...     plot(x, y[:, col])\n\n- The third way is to specify multiple sets of *[x]*, *y*, *[fmt]*\n  groups::\n\n  >>> plot(x1, y1, 'g^', x2, y2, 'g-')\n\n  In this case, any additional keyword argument applies to all\n  datasets. Also, this syntax cannot be combined with the *data*\n  parameter.\n\nBy default, each line is assigned a different style specified by a\n'style cycle'. The *fmt* and line property parameters are only\nnecessary if you want explicit deviations from these defaults.\nAlternatively, you can also change the style cycle using\n:rc:`axes.prop_cycle`.\n\n\nParameters\n----------\nx, y : array-like or scalar\n    The horizontal / vertical coordinates of the data points.\n    *x* values are optional and default to ``range(len(y))``.\n\n    Commonly, these parameters are 1D arrays.\n\n    They can also be scalars, or two-dimensional (in that case, the\n    columns represent separate data sets).\n\n    These arguments cannot be passed as keywords.\n\nfmt : str, optional\n    A format string, e.g. 'ro' for red circles. See the *Notes*\n    section for a full description of the format strings.\n\n    Format strings are just an abbreviation for quickly setting\n    basic line properties. All of these and more can also be\n    controlled by keyword arguments.\n\n    This argument cannot be passed as keyword.\n\ndata : indexable object, optional\n    An object with labelled data. If given, provide the label names to\n    plot in *x* and *y*.\n\n    .. note::\n        Technically there's a slight ambiguity in calls where the\n        second label is a valid *fmt*. ``plot('n', 'o', data=obj)``\n        could be ``plt(x, y)`` or ``plt(y, fmt)``. In such cases,\n        the former interpretation is chosen, but a warning is issued.\n        You may suppress the warning by adding an empty format string\n        ``plot('n', 'o', '', data=obj)``.\n\nReturns\n-------\nlist of `.Line2D`\n    A list of lines representing the plotted data.\n\nOther Parameters\n----------------\nscalex, scaley : bool, default: True\n    These parameters determine if the view limits are adapted to the\n    data limits. The values are passed on to\n    `~.axes.Axes.autoscale_view`.\n\n**kwargs : `~matplotlib.lines.Line2D` properties, optional\n    *kwargs* are used to specify properties like a line label (for\n    auto legends), linewidth, antialiasing, marker face color.\n    Example::\n\n    >>> plot([1, 2, 3], [1, 2, 3], 'go-', label='line 1', linewidth=2)\n    >>> plot([1, 2, 3], [1, 4, 9], 'rs', label='line 2')\n\n    If you specify multiple lines with one plot call, the kwargs apply\n    to all those lines. In case the label object is iterable, each\n    element is used as labels for each set of data.\n\n    Here is a list of available `.Line2D` properties:\n\n    Properties:\n    agg_filter: a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array and two offsets from the bottom left corner of the image\n    alpha: scalar or None\n    animated: bool\n    antialiased or aa: bool\n    clip_box: `~matplotlib.transforms.BboxBase` or None\n    clip_on: bool\n    clip_path: Patch or (Path, Transform) or None\n    color or c: color\n    dash_capstyle: `.CapStyle` or {'butt', 'projecting', 'round'}\n    dash_joinstyle: `.JoinStyle` or {'miter', 'round', 'bevel'}\n    dashes: sequence of floats (on/off ink in points) or (None, None)\n    data: (2, N) array or two 1D arrays\n    drawstyle or ds: {'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default: 'default'\n    figure: `~matplotlib.figure.Figure`\n    fillstyle: {'full', 'left', 'right', 'bottom', 'top', 'none'}\n    gapcolor: color or None\n    gid: str\n    in_layout: bool\n    label: object\n    linestyle or ls: {'-', '--', '-.', ':', '', (offset, on-off-seq), ...}\n    linewidth or lw: float\n    marker: marker style string, `~.path.Path` or `~.markers.MarkerStyle`\n    markeredgecolor or mec: color\n    markeredgewidth or mew: float\n    markerfacecolor or mfc: color\n    markerfacecoloralt or mfcalt: color\n    markersize or ms: float\n    markevery: None or int or (int, int) or slice or list[int] or float or (float, float) or list[bool]\n    mouseover: bool\n    path_effects: list of `.AbstractPathEffect`\n    picker: float or callable[[Artist, Event], tuple[bool, dict]]\n    pickradius: float\n    rasterized: bool\n    sketch_params: (scale: float, length: float, randomness: float)\n    snap: bool or None\n    solid_capstyle: `.CapStyle` or {'butt', 'projecting', 'round'}\n    solid_joinstyle: `.JoinStyle` or {'miter', 'round', 'bevel'}\n    transform: unknown\n    url: str\n    visible: bool\n    xdata: 1D array\n    ydata: 1D array\n    zorder: float\n\nSee Also\n--------\nscatter : XY scatter plot with markers of varying size and/or color (\n    sometimes also called bubble chart).\n\nNotes\n-----\n**Format Strings**\n\nA format string consists of a part for color, marker and line::\n\n    fmt = '[marker][line][color]'\n\nEach of them is optional. If not provided, the value from the style\ncycle is used. Exception: If ``line`` is given, but no ``marker``,\nthe data will be a line without markers.\n\nOther combinations such as ``[color][marker][line]`` are also\nsupported, but note that their parsing may be ambiguous.\n\n**Markers**\n\n=============   ===============================\ncharacter       description\n=============   ===============================\n``'.'``         point marker\n``','``         pixel marker\n``'o'``         circle marker\n``'v'``         triangle_down marker\n``'^'``         triangle_up marker\n``'<'``         triangle_left marker\n``'>'``         triangle_right marker\n``'1'``         tri_down marker\n``'2'``         tri_up marker\n``'3'``         tri_left marker\n``'4'``         tri_right marker\n``'8'``         octagon marker\n``'s'``         square marker\n``'p'``         pentagon marker\n``'P'``         plus (filled) marker\n``'*'``         star marker\n``'h'``         hexagon1 marker\n``'H'``         hexagon2 marker\n``'+'``         plus marker\n``'x'``         x marker\n``'X'``         x (filled) marker\n``'D'``         diamond marker\n``'d'``         thin_diamond marker\n``'|'``         vline marker\n``'_'``         hline marker\n=============   ===============================\n\n**Line Styles**\n\n=============    ===============================\ncharacter        description\n=============    ===============================\n``'-'``          solid line style\n``'--'``         dashed line style\n``'-.'``         dash-dot line style\n``':'``          dotted line style\n=============    ===============================\n\nExample format strings::\n\n    'b'    # blue markers with default shape\n    'or'   # red circles\n    '-g'   # green solid line\n    '--'   # dashed line with default color\n    '^k:'  # black triangle_up markers connected by a dotted line\n\n**Colors**\n\nThe supported color abbreviations are the single letter codes\n\n=============    ===============================\ncharacter        color\n=============    ===============================\n``'b'``          blue\n``'g'``          green\n``'r'``          red\n``'c'``          cyan\n``'m'``          magenta\n``'y'``          yellow\n``'k'``          black\n``'w'``          white\n=============    ===============================\n\nand the ``'CN'`` colors that index into the default property cycle.\n\nIf the color is the only part of the format string, you can\nadditionally use any  `matplotlib.colors` spec, e.g. full names\n(``'green'``) or hex strings (``'#008000'``)."
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subClassOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#AtomicMethod"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#PlotMethod"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#PyplotModule"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#PlotMethod",
  "@type" : [ "http://www.w3.org/2002/07/owl#Class" ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Polar",
  "@type" : [ "http://www.w3.org/2002/07/owl#Class" ],
  "http://www.w3.org/2000/01/rdf-schema#comment" : [ {
    "@value" : "Make a polar plot.\n\ncall signature::\n\n  polar(theta, r, **kwargs)\n\nMultiple *theta*, *r* arguments are supported, with format strings, as in\n`plot`."
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subClassOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#AtomicMethod"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#PlotMethod"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#PyplotModule"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#PolarPlot",
  "@type" : [ "http://www.w3.org/2002/07/owl#Class" ],
  "http://www.w3.org/2000/01/rdf-schema#subClassOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#AtomicTask"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Plot"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#PyplotModule",
  "@type" : [ "http://www.w3.org/2002/07/owl#Class" ],
  "http://www.w3.org/2000/01/rdf-schema#subClassOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#MatplotlibModule"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Quiver",
  "@type" : [ "http://www.w3.org/2002/07/owl#Class" ],
  "http://www.w3.org/2000/01/rdf-schema#comment" : [ {
    "@value" : "Plot a 2D field of arrows.\n\nCall signature::\n\n  quiver([X, Y], U, V, [C], **kwargs)\n\n*X*, *Y* define the arrow locations, *U*, *V* define the arrow directions, and\n*C* optionally sets the color.\n\n**Arrow length**\n\nThe default settings auto-scales the length of the arrows to a reasonable size.\nTo change this behavior see the *scale* and *scale_units* parameters.\n\n**Arrow shape**\n\nThe arrow shape is determined by *width*, *headwidth*, *headlength* and\n*headaxislength*. See the notes below.\n\n**Arrow styling**\n\nEach arrow is internally represented by a filled polygon with a default edge\nlinewidth of 0. As a result, an arrow is rather a filled area, not a line with\na head, and `.PolyCollection` properties like *linewidth*, *edgecolor*,\n*facecolor*, etc. act accordingly.\n\n\nParameters\n----------\nX, Y : 1D or 2D array-like, optional\n    The x and y coordinates of the arrow locations.\n\n    If not given, they will be generated as a uniform integer meshgrid based\n    on the dimensions of *U* and *V*.\n\n    If *X* and *Y* are 1D but *U*, *V* are 2D, *X*, *Y* are expanded to 2D\n    using ``X, Y = np.meshgrid(X, Y)``. In this case ``len(X)`` and ``len(Y)``\n    must match the column and row dimensions of *U* and *V*.\n\nU, V : 1D or 2D array-like\n    The x and y direction components of the arrow vectors. The interpretation\n    of these components (in data or in screen space) depends on *angles*.\n\n    *U* and *V* must have the same number of elements, matching the number of\n    arrow locations in  *X*, *Y*. *U* and *V* may be masked. Locations masked\n    in any of *U*, *V*, and *C* will not be drawn.\n\nC : 1D or 2D array-like, optional\n    Numeric data that defines the arrow colors by colormapping via *norm* and\n    *cmap*.\n\n    This does not support explicit colors. If you want to set colors directly,\n    use *color* instead.  The size of *C* must match the number of arrow\n    locations.\n\nangles : {'uv', 'xy'} or array-like, default: 'uv'\n    Method for determining the angle of the arrows.\n\n    - 'uv': Arrow direction in screen coordinates. Use this if the arrows\n      symbolize a quantity that is not based on *X*, *Y* data coordinates.\n\n      If *U* == *V* the orientation of the arrow on the plot is 45 degrees\n      counter-clockwise from the  horizontal axis (positive to the right).\n\n    - 'xy': Arrow direction in data coordinates, i.e. the arrows point from\n      (x, y) to (x+u, y+v). Use this e.g. for plotting a gradient field.\n\n    - Arbitrary angles may be specified explicitly as an array of values\n      in degrees, counter-clockwise from the horizontal axis.\n\n      In this case *U*, *V* is only used to determine the length of the\n      arrows.\n\n    Note: inverting a data axis will correspondingly invert the\n    arrows only with ``angles='xy'``.\n\npivot : {'tail', 'mid', 'middle', 'tip'}, default: 'tail'\n    The part of the arrow that is anchored to the *X*, *Y* grid. The arrow\n    rotates about this point.\n\n    'mid' is a synonym for 'middle'.\n\nscale : float, optional\n    Scales the length of the arrow inversely.\n\n    Number of data units per arrow length unit, e.g., m/s per plot width; a\n    smaller scale parameter makes the arrow longer. Default is *None*.\n\n    If *None*, a simple autoscaling algorithm is used, based on the average\n    vector length and the number of vectors. The arrow length unit is given by\n    the *scale_units* parameter.\n\nscale_units : {'width', 'height', 'dots', 'inches', 'x', 'y', 'xy'}, optional\n    If the *scale* kwarg is *None*, the arrow length unit. Default is *None*.\n\n    e.g. *scale_units* is 'inches', *scale* is 2.0, and ``(u, v) = (1, 0)``,\n    then the vector will be 0.5 inches long.\n\n    If *scale_units* is 'width' or 'height', then the vector will be half the\n    width/height of the axes.\n\n    If *scale_units* is 'x' then the vector will be 0.5 x-axis\n    units. To plot vectors in the x-y plane, with u and v having\n    the same units as x and y, use\n    ``angles='xy', scale_units='xy', scale=1``.\n\nunits : {'width', 'height', 'dots', 'inches', 'x', 'y', 'xy'}, default: 'width'\n    Affects the arrow size (except for the length). In particular, the shaft\n    *width* is measured in multiples of this unit.\n\n    Supported values are:\n\n    - 'width', 'height': The width or height of the Axes.\n    - 'dots', 'inches': Pixels or inches based on the figure dpi.\n    - 'x', 'y', 'xy': *X*, *Y* or :math:`\\sqrt{X^2 + Y^2}` in data units.\n\n    The following table summarizes how these values affect the visible arrow\n    size under zooming and figure size changes:\n\n    =================  =================   ==================\n    units              zoom                figure size change\n    =================  =================   ==================\n    'x', 'y', 'xy'     arrow size scales   —\n    'width', 'height'  —                   arrow size scales\n    'dots', 'inches'   —                   —\n    =================  =================   ==================\n\nwidth : float, optional\n    Shaft width in arrow units. All head parameters are relative to *width*.\n\n    The default depends on choice of *units* above, and number of vectors;\n    a typical starting value is about 0.005 times the width of the plot.\n\nheadwidth : float, default: 3\n    Head width as multiple of shaft *width*. See the notes below.\n\nheadlength : float, default: 5\n    Head length as multiple of shaft *width*. See the notes below.\n\nheadaxislength : float, default: 4.5\n    Head length at shaft intersection as multiple of shaft *width*.\n    See the notes below.\n\nminshaft : float, default: 1\n    Length below which arrow scales, in units of head length. Do not\n    set this to less than 1, or small arrows will look terrible!\n\nminlength : float, default: 1\n    Minimum length as a multiple of shaft width; if an arrow length\n    is less than this, plot a dot (hexagon) of this diameter instead.\n\ncolor : color or color sequence, optional\n    Explicit color(s) for the arrows. If *C* has been set, *color* has no\n    effect.\n\n    This is a synonym for the `.PolyCollection` *facecolor* parameter.\n\nOther Parameters\n----------------\ndata : indexable object, optional\n    If given, all parameters also accept a string ``s``, which is\n    interpreted as ``data[s]`` (unless this raises an exception).\n\n**kwargs : `~matplotlib.collections.PolyCollection` properties, optional\n    All other keyword arguments are passed on to `.PolyCollection`:\n\n    Properties:\n    agg_filter: a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array and two offsets from the bottom left corner of the image\n    alpha: array-like or scalar or None\n    animated: bool\n    antialiased or aa or antialiaseds: bool or list of bools\n    array: array-like or None\n    capstyle: `.CapStyle` or {'butt', 'projecting', 'round'}\n    clim: (vmin: float, vmax: float)\n    clip_box: `~matplotlib.transforms.BboxBase` or None\n    clip_on: bool\n    clip_path: Patch or (Path, Transform) or None\n    cmap: `.Colormap` or str or None\n    color: color or list of RGBA tuples\n    edgecolor or ec or edgecolors: color or list of colors or 'face'\n    facecolor or facecolors or fc: color or list of colors\n    figure: `~matplotlib.figure.Figure`\n    gid: str\n    hatch: {'/', '\\\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}\n    in_layout: bool\n    joinstyle: `.JoinStyle` or {'miter', 'round', 'bevel'}\n    label: object\n    linestyle or dashes or linestyles or ls: str or tuple or list thereof\n    linewidth or linewidths or lw: float or list of floats\n    mouseover: bool\n    norm: `.Normalize` or str or None\n    offset_transform or transOffset: `.Transform`\n    offsets: (N, 2) or (2,) array-like\n    path_effects: list of `.AbstractPathEffect`\n    paths: list of array-like\n    picker: None or bool or float or callable\n    pickradius: float\n    rasterized: bool\n    sizes: `numpy.ndarray` or None\n    sketch_params: (scale: float, length: float, randomness: float)\n    snap: bool or None\n    transform: `~matplotlib.transforms.Transform`\n    url: str\n    urls: list of str or None\n    verts: list of array-like\n    verts_and_codes: unknown\n    visible: bool\n    zorder: float\n\nReturns\n-------\n`~matplotlib.quiver.Quiver`\n\nSee Also\n--------\n.Axes.quiverkey : Add a key to a quiver plot.\n\nNotes\n-----\n\n**Arrow shape**\n\nThe arrow is drawn as a polygon using the nodes as shown below. The values\n*headwidth*, *headlength*, and *headaxislength* are in units of *width*.\n\n.. image:: /_static/quiver_sizes.svg\n   :width: 500px\n\nThe defaults give a slightly swept-back arrow. Here are some guidelines how to\nget other head shapes:\n\n- To make the head a triangle, make *headaxislength* the same as *headlength*.\n- To make the arrow more pointed, reduce *headwidth* or increase *headlength*\n  and *headaxislength*.\n- To make the head smaller relative to the shaft, scale down all the head\n  parameters proportionally.\n- To remove the head completely, set all *head* parameters to 0.\n- To get a diamond-shaped head, make *headaxislength* larger than *headlength*.\n- Warning: For *headaxislength* < (*headlength* / *headwidth*), the \"headaxis\"\n  nodes (i.e. the ones connecting the head with the shaft) will protrude out\n  of the head in forward direction so that the arrow head looks broken."
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subClassOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#AtomicMethod"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#PlotMethod"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#PyplotModule"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Scatter",
  "@type" : [ "http://www.w3.org/2002/07/owl#Class" ],
  "http://www.w3.org/2000/01/rdf-schema#comment" : [ {
    "@value" : "A scatter plot of *y* vs. *x* with varying marker size and/or color.\n\nParameters\n----------\nx, y : float or array-like, shape (n, )\n    The data positions.\n\ns : float or array-like, shape (n, ), optional\n    The marker size in points**2 (typographic points are 1/72 in.).\n    Default is ``rcParams['lines.markersize'] ** 2``.\n\n    The linewidth and edgecolor can visually interact with the marker\n    size, and can lead to artifacts if the marker size is smaller than\n    the linewidth.\n\n    If the linewidth is greater than 0 and the edgecolor is anything\n    but *'none'*, then the effective size of the marker will be\n    increased by half the linewidth because the stroke will be centered\n    on the edge of the shape.\n\n    To eliminate the marker edge either set *linewidth=0* or\n    *edgecolor='none'*.\n\nc : array-like or list of colors or color, optional\n    The marker colors. Possible values:\n\n    - A scalar or sequence of n numbers to be mapped to colors using\n      *cmap* and *norm*.\n    - A 2D array in which the rows are RGB or RGBA.\n    - A sequence of colors of length n.\n    - A single color format string.\n\n    Note that *c* should not be a single numeric RGB or RGBA sequence\n    because that is indistinguishable from an array of values to be\n    colormapped. If you want to specify the same RGB or RGBA value for\n    all points, use a 2D array with a single row.  Otherwise,\n    value-matching will have precedence in case of a size matching with\n    *x* and *y*.\n\n    If you wish to specify a single color for all points\n    prefer the *color* keyword argument.\n\n    Defaults to `None`. In that case the marker color is determined\n    by the value of *color*, *facecolor* or *facecolors*. In case\n    those are not specified or `None`, the marker color is determined\n    by the next color of the ``Axes``' current \"shape and fill\" color\n    cycle. This cycle defaults to :rc:`axes.prop_cycle`.\n\nmarker : `~.markers.MarkerStyle`, default: :rc:`scatter.marker`\n    The marker style. *marker* can be either an instance of the class\n    or the text shorthand for a particular marker.\n    See :mod:`matplotlib.markers` for more information about marker\n    styles.\n\ncmap : str or `~matplotlib.colors.Colormap`, default: :rc:`image.cmap`\n    The Colormap instance or registered colormap name used to map scalar data\n    to colors.\n\n    This parameter is ignored if *c* is RGB(A).\n\nnorm : str or `~matplotlib.colors.Normalize`, optional\n    The normalization method used to scale scalar data to the [0, 1] range\n    before mapping to colors using *cmap*. By default, a linear scaling is\n    used, mapping the lowest value to 0 and the highest to 1.\n\n    If given, this can be one of the following:\n\n    - An instance of `.Normalize` or one of its subclasses\n      (see :ref:`colormapnorms`).\n    - A scale name, i.e. one of \"linear\", \"log\", \"symlog\", \"logit\", etc.  For a\n      list of available scales, call `matplotlib.scale.get_scale_names()`.\n      In that case, a suitable `.Normalize` subclass is dynamically generated\n      and instantiated.\n\n    This parameter is ignored if *c* is RGB(A).\n\nvmin, vmax : float, optional\n    When using scalar data and no explicit *norm*, *vmin* and *vmax* define\n    the data range that the colormap covers. By default, the colormap covers\n    the complete value range of the supplied data. It is an error to use\n    *vmin*/*vmax* when a *norm* instance is given (but using a `str` *norm*\n    name together with *vmin*/*vmax* is acceptable).\n\n    This parameter is ignored if *c* is RGB(A).\n\nalpha : float, default: None\n    The alpha blending value, between 0 (transparent) and 1 (opaque).\n\nlinewidths : float or array-like, default: :rc:`lines.linewidth`\n    The linewidth of the marker edges. Note: The default *edgecolors*\n    is 'face'. You may want to change this as well.\n\nedgecolors : {'face', 'none', *None*} or color or sequence of color, default: :rc:`scatter.edgecolors`\n    The edge color of the marker. Possible values:\n\n    - 'face': The edge color will always be the same as the face color.\n    - 'none': No patch boundary will be drawn.\n    - A color or sequence of colors.\n\n    For non-filled markers, *edgecolors* is ignored. Instead, the color\n    is determined like with 'face', i.e. from *c*, *colors*, or\n    *facecolors*.\n\nplotnonfinite : bool, default: False\n    Whether to plot points with nonfinite *c* (i.e. ``inf``, ``-inf``\n    or ``nan``). If ``True`` the points are drawn with the *bad*\n    colormap color (see `.Colormap.set_bad`).\n\nReturns\n-------\n`~matplotlib.collections.PathCollection`\n\nOther Parameters\n----------------\ndata : indexable object, optional\n    If given, the following parameters also accept a string ``s``, which is\n    interpreted as ``data[s]`` (unless this raises an exception):\n\n    *x*, *y*, *s*, *linewidths*, *edgecolors*, *c*, *facecolor*, *facecolors*, *color*\n**kwargs : `~matplotlib.collections.Collection` properties\n\nSee Also\n--------\nplot : To plot scatter plots when markers are identical in size and\n    color.\n\nNotes\n-----\n* The `.plot` function will be faster for scatterplots where markers\n  don't vary in size or color.\n\n* Any or all of *x*, *y*, *s*, and *c* may be masked arrays, in which\n  case all masks will be combined and only unmasked points will be\n  plotted.\n\n* Fundamentally, scatter works with 1D arrays; *x*, *y*, *s*, and *c*\n  may be input as N-D arrays, but within scatter they will be\n  flattened. The exception is *c*, which will be flattened only if its\n  size matches the size of *x* and *y*."
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subClassOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#AtomicMethod"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#PlotMethod"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#PyplotModule"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#ScatterPlot",
  "@type" : [ "http://www.w3.org/2002/07/owl#Class" ],
  "http://www.w3.org/2000/01/rdf-schema#subClassOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#AtomicTask"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Plot"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Semilogx",
  "@type" : [ "http://www.w3.org/2002/07/owl#Class" ],
  "http://www.w3.org/2000/01/rdf-schema#comment" : [ {
    "@value" : "Make a plot with log scaling on the x-axis.\n\nCall signatures::\n\n    semilogx([x], y, [fmt], data=None, **kwargs)\n    semilogx([x], y, [fmt], [x2], y2, [fmt2], ..., **kwargs)\n\nThis is just a thin wrapper around `.plot` which additionally changes\nthe x-axis to log scaling. All the concepts and parameters of plot can\nbe used here as well.\n\nThe additional parameters *base*, *subs*, and *nonpositive* control the\nx-axis properties. They are just forwarded to `.Axes.set_xscale`.\n\nParameters\n----------\nbase : float, default: 10\n    Base of the x logarithm.\n\nsubs : array-like, optional\n    The location of the minor xticks. If *None*, reasonable locations\n    are automatically chosen depending on the number of decades in the\n    plot. See `.Axes.set_xscale` for details.\n\nnonpositive : {'mask', 'clip'}, default: 'clip'\n    Non-positive values in x can be masked as invalid, or clipped to a\n    very small positive number.\n\n**kwargs\n    All parameters supported by `.plot`.\n\nReturns\n-------\nlist of `.Line2D`\n    Objects representing the plotted data."
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subClassOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#AtomicMethod"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#PlotMethod"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#PyplotModule"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Semilogy",
  "@type" : [ "http://www.w3.org/2002/07/owl#Class" ],
  "http://www.w3.org/2000/01/rdf-schema#comment" : [ {
    "@value" : "Make a plot with log scaling on the y-axis.\n\nCall signatures::\n\n    semilogy([x], y, [fmt], data=None, **kwargs)\n    semilogy([x], y, [fmt], [x2], y2, [fmt2], ..., **kwargs)\n\nThis is just a thin wrapper around `.plot` which additionally changes\nthe y-axis to log scaling. All the concepts and parameters of plot can\nbe used here as well.\n\nThe additional parameters *base*, *subs*, and *nonpositive* control the\ny-axis properties. They are just forwarded to `.Axes.set_yscale`.\n\nParameters\n----------\nbase : float, default: 10\n    Base of the y logarithm.\n\nsubs : array-like, optional\n    The location of the minor yticks. If *None*, reasonable locations\n    are automatically chosen depending on the number of decades in the\n    plot. See `.Axes.set_yscale` for details.\n\nnonpositive : {'mask', 'clip'}, default: 'clip'\n    Non-positive values in y can be masked as invalid, or clipped to a\n    very small positive number.\n\n**kwargs\n    All parameters supported by `.plot`.\n\nReturns\n-------\nlist of `.Line2D`\n    Objects representing the plotted data."
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subClassOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#AtomicMethod"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#PlotMethod"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#PyplotModule"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Stackplot",
  "@type" : [ "http://www.w3.org/2002/07/owl#Class" ],
  "http://www.w3.org/2000/01/rdf-schema#comment" : [ {
    "@value" : "Draw a stacked area plot.\n\nParameters\n----------\nx : (N,) array-like\n\ny : (M, N) array-like\n    The data is assumed to be unstacked. Each of the following\n    calls is legal::\n\n        stackplot(x, y)           # where y has shape (M, N)\n        stackplot(x, y1, y2, y3)  # where y1, y2, y3, y4 have length N\n\nbaseline : {'zero', 'sym', 'wiggle', 'weighted_wiggle'}\n    Method used to calculate the baseline:\n\n    - ``'zero'``: Constant zero baseline, i.e. a simple stacked plot.\n    - ``'sym'``:  Symmetric around zero and is sometimes called\n      'ThemeRiver'.\n    - ``'wiggle'``: Minimizes the sum of the squared slopes.\n    - ``'weighted_wiggle'``: Does the same but weights to account for\n      size of each layer. It is also called 'Streamgraph'-layout. More\n      details can be found at http://leebyron.com/streamgraph/.\n\nlabels : list of str, optional\n    A sequence of labels to assign to each data series. If unspecified,\n    then no labels will be applied to artists.\n\ncolors : list of color, optional\n    A sequence of colors to be cycled through and used to color the stacked\n    areas. The sequence need not be exactly the same length as the number\n    of provided *y*, in which case the colors will repeat from the\n    beginning.\n\n    If not specified, the colors from the Axes property cycle will be used.\n\ndata : indexable object, optional\n    If given, all parameters also accept a string ``s``, which is\n    interpreted as ``data[s]`` (unless this raises an exception).\n\n**kwargs\n    All other keyword arguments are passed to `.Axes.fill_between`.\n\nReturns\n-------\nlist of `.PolyCollection`\n    A list of `.PolyCollection` instances, one for each element in the\n    stacked area plot."
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subClassOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#AtomicMethod"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#PlotMethod"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#PyplotModule"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Stem",
  "@type" : [ "http://www.w3.org/2002/07/owl#Class" ],
  "http://www.w3.org/2000/01/rdf-schema#comment" : [ {
    "@value" : "Create a stem plot.\n\nA stem plot draws lines perpendicular to a baseline at each location\n*locs* from the baseline to *heads*, and places a marker there. For\nvertical stem plots (the default), the *locs* are *x* positions, and\nthe *heads* are *y* values. For horizontal stem plots, the *locs* are\n*y* positions, and the *heads* are *x* values.\n\nCall signature::\n\n  stem([locs,] heads, linefmt=None, markerfmt=None, basefmt=None)\n\nThe *locs*-positions are optional. *linefmt* may be provided as\npositional, but all other formats must be provided as keyword\narguments.\n\nParameters\n----------\nlocs : array-like, default: (0, 1, ..., len(heads) - 1)\n    For vertical stem plots, the x-positions of the stems.\n    For horizontal stem plots, the y-positions of the stems.\n\nheads : array-like\n    For vertical stem plots, the y-values of the stem heads.\n    For horizontal stem plots, the x-values of the stem heads.\n\nlinefmt : str, optional\n    A string defining the color and/or linestyle of the vertical lines:\n\n    =========  =============\n    Character  Line Style\n    =========  =============\n    ``'-'``    solid line\n    ``'--'``   dashed line\n    ``'-.'``   dash-dot line\n    ``':'``    dotted line\n    =========  =============\n\n    Default: 'C0-', i.e. solid line with the first color of the color\n    cycle.\n\n    Note: Markers specified through this parameter (e.g. 'x') will be\n    silently ignored. Instead, markers should be specified using\n    *markerfmt*.\n\nmarkerfmt : str, optional\n    A string defining the color and/or shape of the markers at the stem\n    heads. If the marker is not given, use the marker 'o', i.e. filled\n    circles. If the color is not given, use the color from *linefmt*.\n\nbasefmt : str, default: 'C3-' ('C2-' in classic mode)\n    A format string defining the properties of the baseline.\n\norientation : {'vertical', 'horizontal'}, default: 'vertical'\n    If 'vertical', will produce a plot with stems oriented vertically,\n    If 'horizontal', the stems will be oriented horizontally.\n\nbottom : float, default: 0\n    The y/x-position of the baseline (depending on orientation).\n\nlabel : str, default: None\n    The label to use for the stems in legends.\n\ndata : indexable object, optional\n    If given, all parameters also accept a string ``s``, which is\n    interpreted as ``data[s]`` (unless this raises an exception).\n\nReturns\n-------\n`.StemContainer`\n    The container may be treated like a tuple\n    (*markerline*, *stemlines*, *baseline*)\n\nNotes\n-----\n.. seealso::\n    The MATLAB function\n    `stem <https://www.mathworks.com/help/matlab/ref/stem.html>`_\n    which inspired this method."
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subClassOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#AtomicMethod"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#PlotMethod"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#PyplotModule"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Step",
  "@type" : [ "http://www.w3.org/2002/07/owl#Class" ],
  "http://www.w3.org/2000/01/rdf-schema#comment" : [ {
    "@value" : "Make a step plot.\n\nCall signatures::\n\n    step(x, y, [fmt], *, data=None, where='pre', **kwargs)\n    step(x, y, [fmt], x2, y2, [fmt2], ..., *, where='pre', **kwargs)\n\nThis is just a thin wrapper around `.plot` which changes some\nformatting options. Most of the concepts and parameters of plot can be\nused here as well.\n\n.. note::\n\n    This method uses a standard plot with a step drawstyle: The *x*\n    values are the reference positions and steps extend left/right/both\n    directions depending on *where*.\n\n    For the common case where you know the values and edges of the\n    steps, use `~.Axes.stairs` instead.\n\nParameters\n----------\nx : array-like\n    1D sequence of x positions. It is assumed, but not checked, that\n    it is uniformly increasing.\n\ny : array-like\n    1D sequence of y levels.\n\nfmt : str, optional\n    A format string, e.g. 'g' for a green line. See `.plot` for a more\n    detailed description.\n\n    Note: While full format strings are accepted, it is recommended to\n    only specify the color. Line styles are currently ignored (use\n    the keyword argument *linestyle* instead). Markers are accepted\n    and plotted on the given positions, however, this is a rarely\n    needed feature for step plots.\n\nwhere : {'pre', 'post', 'mid'}, default: 'pre'\n    Define where the steps should be placed:\n\n    - 'pre': The y value is continued constantly to the left from\n      every *x* position, i.e. the interval ``(x[i-1], x[i]]`` has the\n      value ``y[i]``.\n    - 'post': The y value is continued constantly to the right from\n      every *x* position, i.e. the interval ``[x[i], x[i+1])`` has the\n      value ``y[i]``.\n    - 'mid': Steps occur half-way between the *x* positions.\n\ndata : indexable object, optional\n    An object with labelled data. If given, provide the label names to\n    plot in *x* and *y*.\n\n**kwargs\n    Additional parameters are the same as those for `.plot`.\n\nReturns\n-------\nlist of `.Line2D`\n    Objects representing the plotted data."
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subClassOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#AtomicMethod"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#PlotMethod"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#PyplotModule"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Streamplot",
  "@type" : [ "http://www.w3.org/2002/07/owl#Class" ],
  "http://www.w3.org/2000/01/rdf-schema#comment" : [ {
    "@value" : "Draw streamlines of a vector flow.\n\nParameters\n----------\nx, y : 1D/2D arrays\n    Evenly spaced strictly increasing arrays to make a grid.  If 2D, all\n    rows of *x* must be equal and all columns of *y* must be equal; i.e.,\n    they must be as if generated by ``np.meshgrid(x_1d, y_1d)``.\nu, v : 2D arrays\n    *x* and *y*-velocities. The number of rows and columns must match\n    the length of *y* and *x*, respectively.\ndensity : float or (float, float)\n    Controls the closeness of streamlines. When ``density = 1``, the domain\n    is divided into a 30x30 grid. *density* linearly scales this grid.\n    Each cell in the grid can have, at most, one traversing streamline.\n    For different densities in each direction, use a tuple\n    (density_x, density_y).\nlinewidth : float or 2D array\n    The width of the streamlines. With a 2D array the line width can be\n    varied across the grid. The array must have the same shape as *u*\n    and *v*.\ncolor : color or 2D array\n    The streamline color. If given an array, its values are converted to\n    colors using *cmap* and *norm*.  The array must have the same shape\n    as *u* and *v*.\ncmap, norm\n    Data normalization and colormapping parameters for *color*; only used\n    if *color* is an array of floats. See `~.Axes.imshow` for a detailed\n    description.\narrowsize : float\n    Scaling factor for the arrow size.\narrowstyle : str\n    Arrow style specification.\n    See `~matplotlib.patches.FancyArrowPatch`.\nminlength : float\n    Minimum length of streamline in axes coordinates.\nstart_points : (N, 2) array\n    Coordinates of starting points for the streamlines in data coordinates\n    (the same coordinates as the *x* and *y* arrays).\nzorder : float\n    The zorder of the streamlines and arrows.\n    Artists with lower zorder values are drawn first.\nmaxlength : float\n    Maximum length of streamline in axes coordinates.\nintegration_direction : {'forward', 'backward', 'both'}, default: 'both'\n    Integrate the streamline in forward, backward or both directions.\ndata : indexable object, optional\n    If given, the following parameters also accept a string ``s``, which is\n    interpreted as ``data[s]`` (unless this raises an exception):\n\n    *x*, *y*, *u*, *v*, *start_points*\nbroken_streamlines : boolean, default: True\n    If False, forces streamlines to continue until they\n    leave the plot domain.  If True, they may be terminated if they\n    come too close to another streamline.\n\nReturns\n-------\nStreamplotSet\n    Container object with attributes\n\n    - ``lines``: `.LineCollection` of streamlines\n\n    - ``arrows``: `.PatchCollection` containing `.FancyArrowPatch`\n      objects representing the arrows half-way along streamlines.\n\n    This container will probably change in the future to allow changes\n    to the colormap, alpha, etc. for both lines and arrows, but these\n    changes should be backward compatible."
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subClassOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#AtomicMethod"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#PlotMethod"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#PyplotModule"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#VectorField",
  "@type" : [ "http://www.w3.org/2002/07/owl#Class" ],
  "http://www.w3.org/2000/01/rdf-schema#subClassOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#AtomicTask"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Plot"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#ViolinPlot",
  "@type" : [ "http://www.w3.org/2002/07/owl#Class" ],
  "http://www.w3.org/2000/01/rdf-schema#subClassOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#AtomicTask"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Plot"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Violinplot",
  "@type" : [ "http://www.w3.org/2002/07/owl#Class" ],
  "http://www.w3.org/2000/01/rdf-schema#comment" : [ {
    "@value" : "Make a violin plot.\n\nMake a violin plot for each column of *dataset* or each vector in\nsequence *dataset*.  Each filled area extends to represent the\nentire data range, with optional lines at the mean, the median,\nthe minimum, the maximum, and user-specified quantiles.\n\nParameters\n----------\ndataset : Array or a sequence of vectors.\n  The input data.\n\npositions : array-like, default: [1, 2, ..., n]\n  The positions of the violins. The ticks and limits are\n  automatically set to match the positions.\n\nvert : bool, default: True.\n  If true, creates a vertical violin plot.\n  Otherwise, creates a horizontal violin plot.\n\nwidths : array-like, default: 0.5\n  Either a scalar or a vector that sets the maximal width of\n  each violin. The default is 0.5, which uses about half of the\n  available horizontal space.\n\nshowmeans : bool, default: False\n  If `True`, will toggle rendering of the means.\n\nshowextrema : bool, default: True\n  If `True`, will toggle rendering of the extrema.\n\nshowmedians : bool, default: False\n  If `True`, will toggle rendering of the medians.\n\nquantiles : array-like, default: None\n  If not None, set a list of floats in interval [0, 1] for each violin,\n  which stands for the quantiles that will be rendered for that\n  violin.\n\npoints : int, default: 100\n  Defines the number of points to evaluate each of the\n  gaussian kernel density estimations at.\n\nbw_method : str, scalar or callable, optional\n  The method used to calculate the estimator bandwidth.  This can be\n  'scott', 'silverman', a scalar constant or a callable.  If a\n  scalar, this will be used directly as `kde.factor`.  If a\n  callable, it should take a `matplotlib.mlab.GaussianKDE` instance as\n  its only parameter and return a scalar. If None (default), 'scott'\n  is used.\n\ndata : indexable object, optional\n    If given, the following parameters also accept a string ``s``, which is\n    interpreted as ``data[s]`` (unless this raises an exception):\n\n    *dataset*\n\nReturns\n-------\ndict\n  A dictionary mapping each component of the violinplot to a\n  list of the corresponding collection instances created. The\n  dictionary has the following keys:\n\n  - ``bodies``: A list of the `~.collections.PolyCollection`\n    instances containing the filled area of each violin.\n\n  - ``cmeans``: A `~.collections.LineCollection` instance that marks\n    the mean values of each of the violin's distribution.\n\n  - ``cmins``: A `~.collections.LineCollection` instance that marks\n    the bottom of each violin's distribution.\n\n  - ``cmaxes``: A `~.collections.LineCollection` instance that marks\n    the top of each violin's distribution.\n\n  - ``cbars``: A `~.collections.LineCollection` instance that marks\n    the centers of each violin's distribution.\n\n  - ``cmedians``: A `~.collections.LineCollection` instance that\n    marks the median values of each of the violin's distribution.\n\n  - ``cquantiles``: A `~.collections.LineCollection` instance created\n    to identify the quantile values of each of the violin's\n    distribution."
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subClassOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#AtomicMethod"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#PlotMethod"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#PyplotModule"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Xcorr",
  "@type" : [ "http://www.w3.org/2002/07/owl#Class" ],
  "http://www.w3.org/2000/01/rdf-schema#comment" : [ {
    "@value" : "Plot the cross correlation between *x* and *y*.\n\nThe correlation with lag k is defined as\n:math:`\\sum_n x[n+k] \\cdot y^*[n]`, where :math:`y^*` is the complex\nconjugate of :math:`y`.\n\nParameters\n----------\nx, y : array-like of length n\n\ndetrend : callable, default: `.mlab.detrend_none` (no detrending)\n    A detrending function applied to *x* and *y*.  It must have the\n    signature ::\n\n        detrend(x: np.ndarray) -> np.ndarray\n\nnormed : bool, default: True\n    If ``True``, input vectors are normalised to unit length.\n\nusevlines : bool, default: True\n    Determines the plot style.\n\n    If ``True``, vertical lines are plotted from 0 to the xcorr value\n    using `.Axes.vlines`. Additionally, a horizontal line is plotted\n    at y=0 using `.Axes.axhline`.\n\n    If ``False``, markers are plotted at the xcorr values using\n    `.Axes.plot`.\n\nmaxlags : int, default: 10\n    Number of lags to show. If None, will return all ``2 * len(x) - 1``\n    lags.\n\nReturns\n-------\nlags : array (length ``2*maxlags+1``)\n    The lag vector.\nc : array  (length ``2*maxlags+1``)\n    The auto correlation vector.\nline : `.LineCollection` or `.Line2D`\n    `.Artist` added to the Axes of the correlation:\n\n    - `.LineCollection` if *usevlines* is True.\n    - `.Line2D` if *usevlines* is False.\nb : `~matplotlib.lines.Line2D` or None\n    Horizontal line at 0 if *usevlines* is True\n    None *usevlines* is False.\n\nOther Parameters\n----------------\nlinestyle : `~matplotlib.lines.Line2D` property, optional\n    The linestyle for plotting the data points.\n    Only used if *usevlines* is ``False``.\n\nmarker : str, default: 'o'\n    The marker for plotting the data points.\n    Only used if *usevlines* is ``False``.\n\ndata : indexable object, optional\n    If given, the following parameters also accept a string ``s``, which is\n    interpreted as ``data[s]`` (unless this raises an exception):\n\n    *x*, *y*\n\n**kwargs\n    Additional parameters are passed to `.Axes.vlines` and\n    `.Axes.axhline` if *usevlines* is ``True``; otherwise they are\n    passed to `.Axes.plot`.\n\nNotes\n-----\nThe cross correlation is performed with `numpy.correlate` with\n``mode = \"full\"``."
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subClassOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#AtomicMethod"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#PlotMethod"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#PyplotModule"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasAreaPlotMethod",
  "@type" : [ "http://www.w3.org/2002/07/owl#ObjectProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#AreaPlot"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Fill"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#FillBetween"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasPlotMethod"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasBarPlotMethod",
  "@type" : [ "http://www.w3.org/2002/07/owl#ObjectProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#BarPlot"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Bar"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Barh"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasPlotMethod"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasBoxPlotMethod",
  "@type" : [ "http://www.w3.org/2002/07/owl#ObjectProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#BoxPlot"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Boxplot"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasPlotMethod"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasContourPlotMethod",
  "@type" : [ "http://www.w3.org/2002/07/owl#ObjectProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#ContourPlot"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Contour"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Contourf"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasPlotMethod"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasErrorBarPlotMethod",
  "@type" : [ "http://www.w3.org/2002/07/owl#ObjectProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#ErrorBarPlot"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Errorbar"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasPlotMethod"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasHistogramMethod",
  "@type" : [ "http://www.w3.org/2002/07/owl#ObjectProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Histogram"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Hexbin"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Hist"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Hist2d"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasPlotMethod"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasImagePlotMethod",
  "@type" : [ "http://www.w3.org/2002/07/owl#ObjectProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#ImagePlot"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Imshow"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Pcolor"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Pcolormesh"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasPlotMethod"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasLinePlotMethod",
  "@type" : [ "http://www.w3.org/2002/07/owl#ObjectProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#LinePlot"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Acorr"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#AngleSpectrum"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Cohere"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Loglog"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#MagnitudeSpectrum"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#PhaseSpectrum"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Plot"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Semilogx"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Semilogy"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Stackplot"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Stem"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Step"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Xcorr"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasPlotMethod"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamAlign",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Bar"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Barh"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Hist"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamAlpha",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Hexbin"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Imshow"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Pcolor"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Pcolormesh"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Scatter"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#float"
  }, {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamAntialiased",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Pcolormesh"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#boolean"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamArgs",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Pcolor"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Pcolormesh"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Plot"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Stem"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#float"
  }, {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamArrowsize",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Streamplot"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#float"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamArrowstyle",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Streamplot"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamAspect",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Imshow"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#float"
  }, {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamAutopct",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Pie"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamAutorange",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Boxplot"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#boolean"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamBarsabove",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Errorbar"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#boolean"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamBasefmt",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Stem"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamBaseline",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Stackplot"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamBins",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Hexbin"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Hist"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Hist2d"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#int"
  }, {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamBootstrap",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Boxplot"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#int"
  }, {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamBottom",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Bar"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Hist"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Stem"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#float"
  }, {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamBoxprops",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Boxplot"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamBrokenStreamlines",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Streamplot"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamBwMethod",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Violinplot"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#float"
  }, {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamC",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Hexbin"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Scatter"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamCapprops",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Boxplot"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamCapsize",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Errorbar"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#float"
  }, {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamCapthick",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Errorbar"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#float"
  }, {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamCapwidths",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Boxplot"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#float"
  }, {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamCenter",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Pie"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamCmap",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Hexbin"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Imshow"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Pcolor"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Pcolormesh"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Scatter"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamCmax",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Hist2d"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#float"
  }, {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamCmin",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Hist2d"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#float"
  }, {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamColor",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Hist"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Streamplot"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamColors",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Pie"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Stackplot"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamConfIntervals",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Boxplot"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamCounterclock",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Pie"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#boolean"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamCumulative",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Hist"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#boolean"
  }, {
    "@id" : "http://www.w3.org/2001/XMLSchema#float"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamDataset",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Violinplot"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamDensity",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Hist"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Hist2d"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Streamplot"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#boolean"
  }, {
    "@id" : "http://www.w3.org/2001/XMLSchema#float"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamDetrend",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Cohere"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Xcorr"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamEcolor",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Errorbar"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamEdgecolors",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Hexbin"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Scatter"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamElinewidth",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Errorbar"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#float"
  }, {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamErrorevery",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Errorbar"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#int"
  }, {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamExplode",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Pie"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamExtent",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Hexbin"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Imshow"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamFc",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#AngleSpectrum"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Cohere"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#MagnitudeSpectrum"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#PhaseSpectrum"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#int"
  }, {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamFilternorm",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Imshow"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#boolean"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamFilterrad",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Imshow"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#float"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamFlierprops",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Boxplot"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamFmt",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Errorbar"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamFrame",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Pie"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#boolean"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamFs",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#AngleSpectrum"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Cohere"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#MagnitudeSpectrum"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#PhaseSpectrum"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#float"
  }, {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamGridsize",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Hexbin"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#int"
  }, {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamHatch",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Pie"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamHeight",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Bar"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Barh"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#float"
  }, {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamHisttype",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Hist"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamIntegrationDirection",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Streamplot"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamInterpolate",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#FillBetween"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#boolean"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamInterpolation",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Imshow"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamInterpolationStage",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Imshow"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamLabel",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Hist"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Stem"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamLabeldistance",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Pie"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#float"
  }, {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamLabels",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Boxplot"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Pie"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Stackplot"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamLeft",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Barh"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#float"
  }, {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamLinefmt",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Stem"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamLinewidth",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Streamplot"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#float"
  }, {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamLinewidths",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Hexbin"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Scatter"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#float"
  }, {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamLog",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Hist"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#boolean"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamLolims",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Errorbar"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#boolean"
  }, {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamManageTicks",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Boxplot"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#boolean"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamMarginals",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Hexbin"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#boolean"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamMarker",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Scatter"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamMarkerfmt",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Stem"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamMaxlags",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Xcorr"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#int"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamMaxlength",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Streamplot"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#float"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamMeanline",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Boxplot"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#boolean"
  }, {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamMeanprops",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Boxplot"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamMedianprops",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Boxplot"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamMincnt",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Hexbin"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#int"
  }, {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamMinlength",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Streamplot"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#float"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamNfft",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Cohere"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#int"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamNorm",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Hexbin"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Imshow"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Pcolor"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Pcolormesh"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Scatter"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamNormalize",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Pie"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#boolean"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamNormed",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Xcorr"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#boolean"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamNotch",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Boxplot"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#boolean"
  }, {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamNoverlap",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Cohere"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#int"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamOrientation",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Hist"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Stem"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamOrigin",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Imshow"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamPadTo",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#AngleSpectrum"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Cohere"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#MagnitudeSpectrum"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#PhaseSpectrum"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#int"
  }, {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamPatchArtist",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Boxplot"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#boolean"
  }, {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamPctdistance",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Pie"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#float"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamPlotnonfinite",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Scatter"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#boolean"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamPoints",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Violinplot"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#int"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamPositions",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Boxplot"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Violinplot"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamQuantiles",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Violinplot"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamRadius",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Pie"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#float"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamRange",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Hist"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Hist2d"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamReduceCFunction",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Hexbin"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamResample",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Imshow"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#boolean"
  }, {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamRotatelabels",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Pie"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#boolean"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamRwidth",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Hist"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#float"
  }, {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamS",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Scatter"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#float"
  }, {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamScale",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#MagnitudeSpectrum"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamScaleByFreq",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Cohere"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#boolean"
  }, {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamScalex",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Plot"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#boolean"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamScaley",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Plot"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#boolean"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamShading",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Pcolor"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Pcolormesh"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamShadow",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Pie"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#boolean"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamShowbox",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Boxplot"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#boolean"
  }, {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamShowcaps",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Boxplot"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#boolean"
  }, {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamShowextrema",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Violinplot"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#boolean"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamShowfliers",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Boxplot"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#boolean"
  }, {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamShowmeans",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Boxplot"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Violinplot"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#boolean"
  }, {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamShowmedians",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Violinplot"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#boolean"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamSides",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#AngleSpectrum"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Cohere"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#MagnitudeSpectrum"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#PhaseSpectrum"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamStacked",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Hist"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#boolean"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamStartPoints",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Streamplot"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamStartangle",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Pie"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#float"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamStep",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#FillBetween"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamSym",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Boxplot"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamTextprops",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Pie"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamUplims",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Errorbar"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#boolean"
  }, {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamUrl",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Imshow"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamUsermedians",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Boxplot"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamUsevlines",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Xcorr"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#boolean"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamVert",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Boxplot"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Violinplot"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#boolean"
  }, {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamVmax",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Hexbin"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Imshow"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Pcolor"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Pcolormesh"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Scatter"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#float"
  }, {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamVmin",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Hexbin"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Imshow"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Pcolor"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Pcolormesh"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Scatter"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#float"
  }, {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamWedgeprops",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Pie"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamWeights",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Hist"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Hist2d"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamWhere",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#FillBetween"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Step"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamWhis",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Boxplot"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#float"
  }, {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamWhiskerprops",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Boxplot"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamWidth",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Bar"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Barh"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#float"
  }, {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamWidths",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Boxplot"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Violinplot"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#float"
  }, {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamWindow",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#AngleSpectrum"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Cohere"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#MagnitudeSpectrum"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#PhaseSpectrum"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamX",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Acorr"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#AngleSpectrum"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Bar"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Boxplot"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Cohere"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Errorbar"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#FillBetween"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Hexbin"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Hist"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Hist2d"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Imshow"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#MagnitudeSpectrum"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#PhaseSpectrum"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Pie"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Scatter"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Stackplot"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Step"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Xcorr"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#float"
  }, {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamXerr",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Errorbar"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#float"
  }, {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamXlolims",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Errorbar"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#boolean"
  }, {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamXscale",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Hexbin"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamXuplims",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Errorbar"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#boolean"
  }, {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamY",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Barh"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Cohere"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Errorbar"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Hexbin"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Hist2d"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Scatter"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Step"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Xcorr"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#float"
  }, {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamY1",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#FillBetween"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#float"
  }, {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamY2",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#FillBetween"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#float"
  }, {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamYerr",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Errorbar"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#float"
  }, {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamYscale",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Hexbin"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasParamZorder",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Boxplot"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Streamplot"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#float"
  }, {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasPieChartMethod",
  "@type" : [ "http://www.w3.org/2002/07/owl#ObjectProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#PieChart"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Pie"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasPlotMethod"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasPlotMethod",
  "@type" : [ "http://www.w3.org/2002/07/owl#ObjectProperty" ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasPolarPlotMethod",
  "@type" : [ "http://www.w3.org/2002/07/owl#ObjectProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#PolarPlot"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Polar"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasPlotMethod"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasScatterPlotMethod",
  "@type" : [ "http://www.w3.org/2002/07/owl#ObjectProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#ScatterPlot"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Scatter"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasPlotMethod"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasVectorFieldMethod",
  "@type" : [ "http://www.w3.org/2002/07/owl#ObjectProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#VectorField"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Quiver"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Streamplot"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasPlotMethod"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasViolinPlotMethod",
  "@type" : [ "http://www.w3.org/2002/07/owl#ObjectProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#ViolinPlot"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#Violinplot"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/visu_exeKGOntology.ttl#hasPlotMethod"
  } ]
} ]