[ {
  "@id" : "_:genid1",
  "@type" : [ "http://www.w3.org/2002/07/owl#Ontology" ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#AtomicMethod",
  "@type" : [ "http://www.w3.org/2002/07/owl#Class" ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#AtomicTask",
  "@type" : [ "http://www.w3.org/2002/07/owl#Class" ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#Module",
  "@type" : [ "http://www.w3.org/2002/07/owl#Class" ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasModule",
  "@type" : [ "http://www.w3.org/2002/07/owl#AnnotationProperty" ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#Average",
  "@type" : [ "http://www.w3.org/2002/07/owl#Class" ],
  "http://www.w3.org/2000/01/rdf-schema#comment" : [ {
    "@value" : "Compute the weighted average along the specified axis.\n\nParameters\n----------\na : array_like\n    Array containing data to be averaged. If `a` is not an array, a\n    conversion is attempted.\naxis : None or int or tuple of ints, optional\n    Axis or axes along which to average `a`.  The default,\n    axis=None, will average over all of the elements of the input array.\n    If axis is negative it counts from the last to the first axis.\n\n    .. versionadded:: 1.7.0\n\n    If axis is a tuple of ints, averaging is performed on all of the axes\n    specified in the tuple instead of a single axis or all the axes as\n    before.\nweights : array_like, optional\n    An array of weights associated with the values in `a`. Each value in\n    `a` contributes to the average according to its associated weight.\n    The weights array can either be 1-D (in which case its length must be\n    the size of `a` along the given axis) or of the same shape as `a`.\n    If `weights=None`, then all data in `a` are assumed to have a\n    weight equal to one.  The 1-D calculation is::\n\n        avg = sum(a * weights) / sum(weights)\n\n    The only constraint on `weights` is that `sum(weights)` must not be 0.\nreturned : bool, optional\n    Default is `False`. If `True`, the tuple (`average`, `sum_of_weights`)\n    is returned, otherwise only the average is returned.\n    If `weights=None`, `sum_of_weights` is equivalent to the number of\n    elements over which the average is taken.\nkeepdims : bool, optional\n    If this is set to True, the axes which are reduced are left\n    in the result as dimensions with size one. With this option,\n    the result will broadcast correctly against the original `a`.\n    *Note:* `keepdims` will not work with instances of `numpy.matrix`\n    or other classes whose methods do not support `keepdims`.\n\n    .. versionadded:: 1.23.0\n\nReturns\n-------\nretval, [sum_of_weights] : array_type or double\n    Return the average along the specified axis. When `returned` is `True`,\n    return a tuple with the average as the first element and the sum\n    of the weights as the second element. `sum_of_weights` is of the\n    same type as `retval`. The result dtype follows a genereal pattern.\n    If `weights` is None, the result dtype will be that of `a` , or ``float64``\n    if `a` is integral. Otherwise, if `weights` is not None and `a` is non-\n    integral, the result type will be the type of lowest precision capable of\n    representing values of both `a` and `weights`. If `a` happens to be\n    integral, the previous rules still applies but the result dtype will\n    at least be ``float64``.\n\nRaises\n------\nZeroDivisionError\n    When all weights along axis are zero. See `numpy.ma.average` for a\n    version robust to this type of error.\nTypeError\n    When the length of 1D `weights` is not the same as the shape of `a`\n    along axis.\n\nSee Also\n--------\nmean\n\nma.average : average for masked arrays -- useful if your data contains\n             \"missing\" values\nnumpy.result_type : Returns the type that results from applying the\n                    numpy type promotion rules to the arguments.\n\nExamples\n--------\n>>> data = np.arange(1, 5)\n>>> data\narray([1, 2, 3, 4])\n>>> np.average(data)\n2.5\n>>> np.average(np.arange(1, 11), weights=np.arange(10, 0, -1))\n4.0\n\n>>> data = np.arange(6).reshape((3, 2))\n>>> data\narray([[0, 1],\n       [2, 3],\n       [4, 5]])\n>>> np.average(data, axis=1, weights=[1./4, 3./4])\narray([0.75, 2.75, 4.75])\n>>> np.average(data, weights=[1./4, 3./4])\nTraceback (most recent call last):\n    ...\nTypeError: Axis must be specified when shapes of a and weights differ.\n\n>>> a = np.ones(5, dtype=np.float128)\n>>> w = np.ones(5, dtype=np.complex64)\n>>> avg = np.average(a, weights=w)\n>>> print(avg.dtype)\ncomplex256\n\nWith ``keepdims=True``, the following result has shape (3, 1).\n\n>>> np.average(data, axis=1, keepdims=True)\narray([[0.5],\n       [2.5],\n       [4.5]])"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subClassOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#AtomicMethod"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#StatisticCalculationMethod"
  } ],
  "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasModule" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#FunctionBaseModule"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#CentralTendencyMeasure",
  "@type" : [ "http://www.w3.org/2002/07/owl#Class" ],
  "http://www.w3.org/2000/01/rdf-schema#subClassOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#AtomicTask"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#StatisticCalculation"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#Corrcoef",
  "@type" : [ "http://www.w3.org/2002/07/owl#Class" ],
  "http://www.w3.org/2000/01/rdf-schema#comment" : [ {
    "@value" : "Return Pearson product-moment correlation coefficients.\n\nPlease refer to the documentation for `cov` for more detail.  The\nrelationship between the correlation coefficient matrix, `R`, and the\ncovariance matrix, `C`, is\n\n.. math:: R_{ij} = \\frac{ C_{ij} } { \\sqrt{ C_{ii} C_{jj} } }\n\nThe values of `R` are between -1 and 1, inclusive.\n\nParameters\n----------\nx : array_like\n    A 1-D or 2-D array containing multiple variables and observations.\n    Each row of `x` represents a variable, and each column a single\n    observation of all those variables. Also see `rowvar` below.\ny : array_like, optional\n    An additional set of variables and observations. `y` has the same\n    shape as `x`.\nrowvar : bool, optional\n    If `rowvar` is True (default), then each row represents a\n    variable, with observations in the columns. Otherwise, the relationship\n    is transposed: each column represents a variable, while the rows\n    contain observations.\nbias : _NoValue, optional\n    Has no effect, do not use.\n\n    .. deprecated:: 1.10.0\nddof : _NoValue, optional\n    Has no effect, do not use.\n\n    .. deprecated:: 1.10.0\ndtype : data-type, optional\n    Data-type of the result. By default, the return data-type will have\n    at least `numpy.float64` precision.\n\n    .. versionadded:: 1.20\n\nReturns\n-------\nR : ndarray\n    The correlation coefficient matrix of the variables.\n\nSee Also\n--------\ncov : Covariance matrix\n\nNotes\n-----\nDue to floating point rounding the resulting array may not be Hermitian,\nthe diagonal elements may not be 1, and the elements may not satisfy the\ninequality abs(a) <= 1. The real and imaginary parts are clipped to the\ninterval [-1,  1] in an attempt to improve on that situation but is not\nmuch help in the complex case.\n\nThis function accepts but discards arguments `bias` and `ddof`.  This is\nfor backwards compatibility with previous versions of this function.  These\narguments had no effect on the return values of the function and can be\nsafely ignored in this and previous versions of numpy.\n\nExamples\n--------\nIn this example we generate two random arrays, ``xarr`` and ``yarr``, and\ncompute the row-wise and column-wise Pearson correlation coefficients,\n``R``. Since ``rowvar`` is  true by  default, we first find the row-wise\nPearson correlation coefficients between the variables of ``xarr``.\n\n>>> import numpy as np\n>>> rng = np.random.default_rng(seed=42)\n>>> xarr = rng.random((3, 3))\n>>> xarr\narray([[0.77395605, 0.43887844, 0.85859792],\n       [0.69736803, 0.09417735, 0.97562235],\n       [0.7611397 , 0.78606431, 0.12811363]])\n>>> R1 = np.corrcoef(xarr)\n>>> R1\narray([[ 1.        ,  0.99256089, -0.68080986],\n       [ 0.99256089,  1.        , -0.76492172],\n       [-0.68080986, -0.76492172,  1.        ]])\n\nIf we add another set of variables and observations ``yarr``, we can\ncompute the row-wise Pearson correlation coefficients between the\nvariables in ``xarr`` and ``yarr``.\n\n>>> yarr = rng.random((3, 3))\n>>> yarr\narray([[0.45038594, 0.37079802, 0.92676499],\n       [0.64386512, 0.82276161, 0.4434142 ],\n       [0.22723872, 0.55458479, 0.06381726]])\n>>> R2 = np.corrcoef(xarr, yarr)\n>>> R2\narray([[ 1.        ,  0.99256089, -0.68080986,  0.75008178, -0.934284  ,\n        -0.99004057],\n       [ 0.99256089,  1.        , -0.76492172,  0.82502011, -0.97074098,\n        -0.99981569],\n       [-0.68080986, -0.76492172,  1.        , -0.99507202,  0.89721355,\n         0.77714685],\n       [ 0.75008178,  0.82502011, -0.99507202,  1.        , -0.93657855,\n        -0.83571711],\n       [-0.934284  , -0.97074098,  0.89721355, -0.93657855,  1.        ,\n         0.97517215],\n       [-0.99004057, -0.99981569,  0.77714685, -0.83571711,  0.97517215,\n         1.        ]])\n\nFinally if we use the option ``rowvar=False``, the columns are now\nbeing treated as the variables and we will find the column-wise Pearson\ncorrelation coefficients between variables in ``xarr`` and ``yarr``.\n\n>>> R3 = np.corrcoef(xarr, yarr, rowvar=False)\n>>> R3\narray([[ 1.        ,  0.77598074, -0.47458546, -0.75078643, -0.9665554 ,\n         0.22423734],\n       [ 0.77598074,  1.        , -0.92346708, -0.99923895, -0.58826587,\n        -0.44069024],\n       [-0.47458546, -0.92346708,  1.        ,  0.93773029,  0.23297648,\n         0.75137473],\n       [-0.75078643, -0.99923895,  0.93773029,  1.        ,  0.55627469,\n         0.47536961],\n       [-0.9665554 , -0.58826587,  0.23297648,  0.55627469,  1.        ,\n        -0.46666491],\n       [ 0.22423734, -0.44069024,  0.75137473,  0.47536961, -0.46666491,\n         1.        ]])"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subClassOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#AtomicMethod"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#StatisticCalculationMethod"
  } ],
  "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasModule" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#FunctionBaseModule"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#Cov",
  "@type" : [ "http://www.w3.org/2002/07/owl#Class" ],
  "http://www.w3.org/2000/01/rdf-schema#comment" : [ {
    "@value" : "Estimate a covariance matrix, given data and weights.\n\nCovariance indicates the level to which two variables vary together.\nIf we examine N-dimensional samples, :math:`X = [x_1, x_2, ... x_N]^T`,\nthen the covariance matrix element :math:`C_{ij}` is the covariance of\n:math:`x_i` and :math:`x_j`. The element :math:`C_{ii}` is the variance\nof :math:`x_i`.\n\nSee the notes for an outline of the algorithm.\n\nParameters\n----------\nm : array_like\n    A 1-D or 2-D array containing multiple variables and observations.\n    Each row of `m` represents a variable, and each column a single\n    observation of all those variables. Also see `rowvar` below.\ny : array_like, optional\n    An additional set of variables and observations. `y` has the same form\n    as that of `m`.\nrowvar : bool, optional\n    If `rowvar` is True (default), then each row represents a\n    variable, with observations in the columns. Otherwise, the relationship\n    is transposed: each column represents a variable, while the rows\n    contain observations.\nbias : bool, optional\n    Default normalization (False) is by ``(N - 1)``, where ``N`` is the\n    number of observations given (unbiased estimate). If `bias` is True,\n    then normalization is by ``N``. These values can be overridden by using\n    the keyword ``ddof`` in numpy versions >= 1.5.\nddof : int, optional\n    If not ``None`` the default value implied by `bias` is overridden.\n    Note that ``ddof=1`` will return the unbiased estimate, even if both\n    `fweights` and `aweights` are specified, and ``ddof=0`` will return\n    the simple average. See the notes for the details. The default value\n    is ``None``.\n\n    .. versionadded:: 1.5\nfweights : array_like, int, optional\n    1-D array of integer frequency weights; the number of times each\n    observation vector should be repeated.\n\n    .. versionadded:: 1.10\naweights : array_like, optional\n    1-D array of observation vector weights. These relative weights are\n    typically large for observations considered \"important\" and smaller for\n    observations considered less \"important\". If ``ddof=0`` the array of\n    weights can be used to assign probabilities to observation vectors.\n\n    .. versionadded:: 1.10\ndtype : data-type, optional\n    Data-type of the result. By default, the return data-type will have\n    at least `numpy.float64` precision.\n\n    .. versionadded:: 1.20\n\nReturns\n-------\nout : ndarray\n    The covariance matrix of the variables.\n\nSee Also\n--------\ncorrcoef : Normalized covariance matrix\n\nNotes\n-----\nAssume that the observations are in the columns of the observation\narray `m` and let ``f = fweights`` and ``a = aweights`` for brevity. The\nsteps to compute the weighted covariance are as follows::\n\n    >>> m = np.arange(10, dtype=np.float64)\n    >>> f = np.arange(10) * 2\n    >>> a = np.arange(10) ** 2.\n    >>> ddof = 1\n    >>> w = f * a\n    >>> v1 = np.sum(w)\n    >>> v2 = np.sum(w * a)\n    >>> m -= np.sum(m * w, axis=None, keepdims=True) / v1\n    >>> cov = np.dot(m * w, m.T) * v1 / (v1**2 - ddof * v2)\n\nNote that when ``a == 1``, the normalization factor\n``v1 / (v1**2 - ddof * v2)`` goes over to ``1 / (np.sum(f) - ddof)``\nas it should.\n\nExamples\n--------\nConsider two variables, :math:`x_0` and :math:`x_1`, which\ncorrelate perfectly, but in opposite directions:\n\n>>> x = np.array([[0, 2], [1, 1], [2, 0]]).T\n>>> x\narray([[0, 1, 2],\n       [2, 1, 0]])\n\nNote how :math:`x_0` increases while :math:`x_1` decreases. The covariance\nmatrix shows this clearly:\n\n>>> np.cov(x)\narray([[ 1., -1.],\n       [-1.,  1.]])\n\nNote that element :math:`C_{0,1}`, which shows the correlation between\n:math:`x_0` and :math:`x_1`, is negative.\n\nFurther, note how `x` and `y` are combined:\n\n>>> x = [-2.1, -1,  4.3]\n>>> y = [3,  1.1,  0.12]\n>>> X = np.stack((x, y), axis=0)\n>>> np.cov(X)\narray([[11.71      , -4.286     ], # may vary\n       [-4.286     ,  2.144133]])\n>>> np.cov(x, y)\narray([[11.71      , -4.286     ], # may vary\n       [-4.286     ,  2.144133]])\n>>> np.cov(x)\narray(11.71)"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subClassOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#AtomicMethod"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#StatisticCalculationMethod"
  } ],
  "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasModule" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#FunctionBaseModule"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#DependencyMeasure",
  "@type" : [ "http://www.w3.org/2002/07/owl#Class" ],
  "http://www.w3.org/2000/01/rdf-schema#subClassOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#AtomicTask"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#StatisticCalculation"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#FunctionBaseModule",
  "@type" : [ "http://www.w3.org/2002/07/owl#Class" ],
  "http://www.w3.org/2000/01/rdf-schema#subClassOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#LibModule"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#LibModule",
  "@type" : [ "http://www.w3.org/2002/07/owl#Class" ],
  "http://www.w3.org/2000/01/rdf-schema#subClassOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#NumpyModule"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#Median",
  "@type" : [ "http://www.w3.org/2002/07/owl#Class" ],
  "http://www.w3.org/2000/01/rdf-schema#comment" : [ {
    "@value" : "Compute the median along the specified axis.\n\nReturns the median of the array elements.\n\nParameters\n----------\na : array_like\n    Input array or object that can be converted to an array.\naxis : {int, sequence of int, None}, optional\n    Axis or axes along which the medians are computed. The default\n    is to compute the median along a flattened version of the array.\n    A sequence of axes is supported since version 1.9.0.\nout : ndarray, optional\n    Alternative output array in which to place the result. It must\n    have the same shape and buffer length as the expected output,\n    but the type (of the output) will be cast if necessary.\noverwrite_input : bool, optional\n   If True, then allow use of memory of input array `a` for\n   calculations. The input array will be modified by the call to\n   `median`. This will save memory when you do not need to preserve\n   the contents of the input array. Treat the input as undefined,\n   but it will probably be fully or partially sorted. Default is\n   False. If `overwrite_input` is ``True`` and `a` is not already an\n   `ndarray`, an error will be raised.\nkeepdims : bool, optional\n    If this is set to True, the axes which are reduced are left\n    in the result as dimensions with size one. With this option,\n    the result will broadcast correctly against the original `arr`.\n\n    .. versionadded:: 1.9.0\n\nReturns\n-------\nmedian : ndarray\n    A new array holding the result. If the input contains integers\n    or floats smaller than ``float64``, then the output data-type is\n    ``np.float64``.  Otherwise, the data-type of the output is the\n    same as that of the input. If `out` is specified, that array is\n    returned instead.\n\nSee Also\n--------\nmean, percentile\n\nNotes\n-----\nGiven a vector ``V`` of length ``N``, the median of ``V`` is the\nmiddle value of a sorted copy of ``V``, ``V_sorted`` - i\ne., ``V_sorted[(N-1)/2]``, when ``N`` is odd, and the average of the\ntwo middle values of ``V_sorted`` when ``N`` is even.\n\nExamples\n--------\n>>> a = np.array([[10, 7, 4], [3, 2, 1]])\n>>> a\narray([[10,  7,  4],\n       [ 3,  2,  1]])\n>>> np.median(a)\n3.5\n>>> np.median(a, axis=0)\narray([6.5, 4.5, 2.5])\n>>> np.median(a, axis=1)\narray([7.,  2.])\n>>> m = np.median(a, axis=0)\n>>> out = np.zeros_like(m)\n>>> np.median(a, axis=0, out=m)\narray([6.5,  4.5,  2.5])\n>>> m\narray([6.5,  4.5,  2.5])\n>>> b = a.copy()\n>>> np.median(b, axis=1, overwrite_input=True)\narray([7.,  2.])\n>>> assert not np.all(a==b)\n>>> b = a.copy()\n>>> np.median(b, axis=None, overwrite_input=True)\n3.5\n>>> assert not np.all(a==b)"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subClassOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#AtomicMethod"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#StatisticCalculationMethod"
  } ],
  "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasModule" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#FunctionBaseModule"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#NumpyModule",
  "@type" : [ "http://www.w3.org/2002/07/owl#Class" ],
  "http://www.w3.org/2000/01/rdf-schema#subClassOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#Module"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#Percentile",
  "@type" : [ "http://www.w3.org/2002/07/owl#Class" ],
  "http://www.w3.org/2000/01/rdf-schema#comment" : [ {
    "@value" : "Compute the q-th percentile of the data along the specified axis.\n\nReturns the q-th percentile(s) of the array elements.\n\nParameters\n----------\na : array_like of real numbers\n    Input array or object that can be converted to an array.\nq : array_like of float\n    Percentage or sequence of percentages for the percentiles to compute.\n    Values must be between 0 and 100 inclusive.\naxis : {int, tuple of int, None}, optional\n    Axis or axes along which the percentiles are computed. The\n    default is to compute the percentile(s) along a flattened\n    version of the array.\n\n    .. versionchanged:: 1.9.0\n        A tuple of axes is supported\nout : ndarray, optional\n    Alternative output array in which to place the result. It must\n    have the same shape and buffer length as the expected output,\n    but the type (of the output) will be cast if necessary.\noverwrite_input : bool, optional\n    If True, then allow the input array `a` to be modified by intermediate\n    calculations, to save memory. In this case, the contents of the input\n    `a` after this function completes is undefined.\nmethod : str, optional\n    This parameter specifies the method to use for estimating the\n    percentile.  There are many different methods, some unique to NumPy.\n    See the notes for explanation.  The options sorted by their R type\n    as summarized in the H&F paper [1]_ are:\n\n    1. 'inverted_cdf'\n    2. 'averaged_inverted_cdf'\n    3. 'closest_observation'\n    4. 'interpolated_inverted_cdf'\n    5. 'hazen'\n    6. 'weibull'\n    7. 'linear'  (default)\n    8. 'median_unbiased'\n    9. 'normal_unbiased'\n\n    The first three methods are discontinuous.  NumPy further defines the\n    following discontinuous variations of the default 'linear' (7.) option:\n\n    * 'lower'\n    * 'higher',\n    * 'midpoint'\n    * 'nearest'\n\n    .. versionchanged:: 1.22.0\n        This argument was previously called \"interpolation\" and only\n        offered the \"linear\" default and last four options.\n\nkeepdims : bool, optional\n    If this is set to True, the axes which are reduced are left in\n    the result as dimensions with size one. With this option, the\n    result will broadcast correctly against the original array `a`.\n\n    .. versionadded:: 1.9.0\n\ninterpolation : str, optional\n    Deprecated name for the method keyword argument.\n\n    .. deprecated:: 1.22.0\n\nReturns\n-------\npercentile : scalar or ndarray\n    If `q` is a single percentile and `axis=None`, then the result\n    is a scalar. If multiple percentiles are given, first axis of\n    the result corresponds to the percentiles. The other axes are\n    the axes that remain after the reduction of `a`. If the input\n    contains integers or floats smaller than ``float64``, the output\n    data-type is ``float64``. Otherwise, the output data-type is the\n    same as that of the input. If `out` is specified, that array is\n    returned instead.\n\nSee Also\n--------\nmean\nmedian : equivalent to ``percentile(..., 50)``\nnanpercentile\nquantile : equivalent to percentile, except q in the range [0, 1].\n\nNotes\n-----\nGiven a vector ``V`` of length ``n``, the q-th percentile of ``V`` is\nthe value ``q/100`` of the way from the minimum to the maximum in a\nsorted copy of ``V``. The values and distances of the two nearest\nneighbors as well as the `method` parameter will determine the\npercentile if the normalized ranking does not match the location of\n``q`` exactly. This function is the same as the median if ``q=50``, the\nsame as the minimum if ``q=0`` and the same as the maximum if\n``q=100``.\n\nThe optional `method` parameter specifies the method to use when the\ndesired percentile lies between two indexes ``i`` and ``j = i + 1``.\nIn that case, we first determine ``i + g``, a virtual index that lies\nbetween ``i`` and ``j``, where  ``i`` is the floor and ``g`` is the\nfractional part of the index. The final result is, then, an interpolation\nof ``a[i]`` and ``a[j]`` based on ``g``. During the computation of ``g``,\n``i`` and ``j`` are modified using correction constants ``alpha`` and\n``beta`` whose choices depend on the ``method`` used. Finally, note that\nsince Python uses 0-based indexing, the code subtracts another 1 from the\nindex internally.\n\nThe following formula determines the virtual index ``i + g``, the location\nof the percentile in the sorted sample:\n\n.. math::\n    i + g = (q / 100) * ( n - alpha - beta + 1 ) + alpha\n\nThe different methods then work as follows\n\ninverted_cdf:\n    method 1 of H&F [1]_.\n    This method gives discontinuous results:\n\n    * if g > 0 ; then take j\n    * if g = 0 ; then take i\n\naveraged_inverted_cdf:\n    method 2 of H&F [1]_.\n    This method give discontinuous results:\n\n    * if g > 0 ; then take j\n    * if g = 0 ; then average between bounds\n\nclosest_observation:\n    method 3 of H&F [1]_.\n    This method give discontinuous results:\n\n    * if g > 0 ; then take j\n    * if g = 0 and index is odd ; then take j\n    * if g = 0 and index is even ; then take i\n\ninterpolated_inverted_cdf:\n    method 4 of H&F [1]_.\n    This method give continuous results using:\n\n    * alpha = 0\n    * beta = 1\n\nhazen:\n    method 5 of H&F [1]_.\n    This method give continuous results using:\n\n    * alpha = 1/2\n    * beta = 1/2\n\nweibull:\n    method 6 of H&F [1]_.\n    This method give continuous results using:\n\n    * alpha = 0\n    * beta = 0\n\nlinear:\n    method 7 of H&F [1]_.\n    This method give continuous results using:\n\n    * alpha = 1\n    * beta = 1\n\nmedian_unbiased:\n    method 8 of H&F [1]_.\n    This method is probably the best method if the sample\n    distribution function is unknown (see reference).\n    This method give continuous results using:\n\n    * alpha = 1/3\n    * beta = 1/3\n\nnormal_unbiased:\n    method 9 of H&F [1]_.\n    This method is probably the best method if the sample\n    distribution function is known to be normal.\n    This method give continuous results using:\n\n    * alpha = 3/8\n    * beta = 3/8\n\nlower:\n    NumPy method kept for backwards compatibility.\n    Takes ``i`` as the interpolation point.\n\nhigher:\n    NumPy method kept for backwards compatibility.\n    Takes ``j`` as the interpolation point.\n\nnearest:\n    NumPy method kept for backwards compatibility.\n    Takes ``i`` or ``j``, whichever is nearest.\n\nmidpoint:\n    NumPy method kept for backwards compatibility.\n    Uses ``(i + j) / 2``.\n\nExamples\n--------\n>>> a = np.array([[10, 7, 4], [3, 2, 1]])\n>>> a\narray([[10,  7,  4],\n       [ 3,  2,  1]])\n>>> np.percentile(a, 50)\n3.5\n>>> np.percentile(a, 50, axis=0)\narray([6.5, 4.5, 2.5])\n>>> np.percentile(a, 50, axis=1)\narray([7.,  2.])\n>>> np.percentile(a, 50, axis=1, keepdims=True)\narray([[7.],\n       [2.]])\n\n>>> m = np.percentile(a, 50, axis=0)\n>>> out = np.zeros_like(m)\n>>> np.percentile(a, 50, axis=0, out=out)\narray([6.5, 4.5, 2.5])\n>>> m\narray([6.5, 4.5, 2.5])\n\n>>> b = a.copy()\n>>> np.percentile(b, 50, axis=1, overwrite_input=True)\narray([7.,  2.])\n>>> assert not np.all(a == b)\n\nThe different methods can be visualized graphically:\n\n.. plot::\n\n    import matplotlib.pyplot as plt\n\n    a = np.arange(4)\n    p = np.linspace(0, 100, 6001)\n    ax = plt.gca()\n    lines = [\n        ('linear', '-', 'C0'),\n        ('inverted_cdf', ':', 'C1'),\n        # Almost the same as `inverted_cdf`:\n        ('averaged_inverted_cdf', '-.', 'C1'),\n        ('closest_observation', ':', 'C2'),\n        ('interpolated_inverted_cdf', '--', 'C1'),\n        ('hazen', '--', 'C3'),\n        ('weibull', '-.', 'C4'),\n        ('median_unbiased', '--', 'C5'),\n        ('normal_unbiased', '-.', 'C6'),\n        ]\n    for method, style, color in lines:\n        ax.plot(\n            p, np.percentile(a, p, method=method),\n            label=method, linestyle=style, color=color)\n    ax.set(\n        title='Percentiles for different methods and data: ' + str(a),\n        xlabel='Percentile',\n        ylabel='Estimated percentile value',\n        yticks=a)\n    ax.legend(bbox_to_anchor=(1.03, 1))\n    plt.tight_layout()\n    plt.show()\n\nReferences\n----------\n.. [1] R. J. Hyndman and Y. Fan,\n   \"Sample quantiles in statistical packages,\"\n   The American Statistician, 50(4), pp. 361-365, 1996"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subClassOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#AtomicMethod"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#StatisticCalculationMethod"
  } ],
  "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasModule" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#FunctionBaseModule"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#PositionMeasure",
  "@type" : [ "http://www.w3.org/2002/07/owl#Class" ],
  "http://www.w3.org/2000/01/rdf-schema#subClassOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#AtomicTask"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#StatisticCalculation"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#Quantile",
  "@type" : [ "http://www.w3.org/2002/07/owl#Class" ],
  "http://www.w3.org/2000/01/rdf-schema#comment" : [ {
    "@value" : "Compute the q-th quantile of the data along the specified axis.\n\n.. versionadded:: 1.15.0\n\nParameters\n----------\na : array_like of real numbers\n    Input array or object that can be converted to an array.\nq : array_like of float\n    Probability or sequence of probabilities for the quantiles to compute.\n    Values must be between 0 and 1 inclusive.\naxis : {int, tuple of int, None}, optional\n    Axis or axes along which the quantiles are computed. The default is\n    to compute the quantile(s) along a flattened version of the array.\nout : ndarray, optional\n    Alternative output array in which to place the result. It must have\n    the same shape and buffer length as the expected output, but the\n    type (of the output) will be cast if necessary.\noverwrite_input : bool, optional\n    If True, then allow the input array `a` to be modified by\n    intermediate calculations, to save memory. In this case, the\n    contents of the input `a` after this function completes is\n    undefined.\nmethod : str, optional\n    This parameter specifies the method to use for estimating the\n    quantile.  There are many different methods, some unique to NumPy.\n    See the notes for explanation.  The options sorted by their R type\n    as summarized in the H&F paper [1]_ are:\n\n    1. 'inverted_cdf'\n    2. 'averaged_inverted_cdf'\n    3. 'closest_observation'\n    4. 'interpolated_inverted_cdf'\n    5. 'hazen'\n    6. 'weibull'\n    7. 'linear'  (default)\n    8. 'median_unbiased'\n    9. 'normal_unbiased'\n\n    The first three methods are discontinuous.  NumPy further defines the\n    following discontinuous variations of the default 'linear' (7.) option:\n\n    * 'lower'\n    * 'higher',\n    * 'midpoint'\n    * 'nearest'\n\n    .. versionchanged:: 1.22.0\n        This argument was previously called \"interpolation\" and only\n        offered the \"linear\" default and last four options.\n\nkeepdims : bool, optional\n    If this is set to True, the axes which are reduced are left in\n    the result as dimensions with size one. With this option, the\n    result will broadcast correctly against the original array `a`.\n\ninterpolation : str, optional\n    Deprecated name for the method keyword argument.\n\n    .. deprecated:: 1.22.0\n\nReturns\n-------\nquantile : scalar or ndarray\n    If `q` is a single probability and `axis=None`, then the result\n    is a scalar. If multiple probabilies levels are given, first axis of\n    the result corresponds to the quantiles. The other axes are\n    the axes that remain after the reduction of `a`. If the input\n    contains integers or floats smaller than ``float64``, the output\n    data-type is ``float64``. Otherwise, the output data-type is the\n    same as that of the input. If `out` is specified, that array is\n    returned instead.\n\nSee Also\n--------\nmean\npercentile : equivalent to quantile, but with q in the range [0, 100].\nmedian : equivalent to ``quantile(..., 0.5)``\nnanquantile\n\nNotes\n-----\nGiven a vector ``V`` of length ``n``, the q-th quantile of ``V`` is\nthe value ``q`` of the way from the minimum to the maximum in a\nsorted copy of ``V``. The values and distances of the two nearest\nneighbors as well as the `method` parameter will determine the\nquantile if the normalized ranking does not match the location of\n``q`` exactly. This function is the same as the median if ``q=0.5``, the\nsame as the minimum if ``q=0.0`` and the same as the maximum if\n``q=1.0``.\n\nThe optional `method` parameter specifies the method to use when the\ndesired quantile lies between two indexes ``i`` and ``j = i + 1``.\nIn that case, we first determine ``i + g``, a virtual index that lies\nbetween ``i`` and ``j``, where  ``i`` is the floor and ``g`` is the\nfractional part of the index. The final result is, then, an interpolation\nof ``a[i]`` and ``a[j]`` based on ``g``. During the computation of ``g``,\n``i`` and ``j`` are modified using correction constants ``alpha`` and\n``beta`` whose choices depend on the ``method`` used. Finally, note that\nsince Python uses 0-based indexing, the code subtracts another 1 from the\nindex internally.\n\nThe following formula determines the virtual index ``i + g``, the location\nof the quantile in the sorted sample:\n\n.. math::\n    i + g = q * ( n - alpha - beta + 1 ) + alpha\n\nThe different methods then work as follows\n\ninverted_cdf:\n    method 1 of H&F [1]_.\n    This method gives discontinuous results:\n\n    * if g > 0 ; then take j\n    * if g = 0 ; then take i\n\naveraged_inverted_cdf:\n    method 2 of H&F [1]_.\n    This method gives discontinuous results:\n\n    * if g > 0 ; then take j\n    * if g = 0 ; then average between bounds\n\nclosest_observation:\n    method 3 of H&F [1]_.\n    This method gives discontinuous results:\n\n    * if g > 0 ; then take j\n    * if g = 0 and index is odd ; then take j\n    * if g = 0 and index is even ; then take i\n\ninterpolated_inverted_cdf:\n    method 4 of H&F [1]_.\n    This method gives continuous results using:\n\n    * alpha = 0\n    * beta = 1\n\nhazen:\n    method 5 of H&F [1]_.\n    This method gives continuous results using:\n\n    * alpha = 1/2\n    * beta = 1/2\n\nweibull:\n    method 6 of H&F [1]_.\n    This method gives continuous results using:\n\n    * alpha = 0\n    * beta = 0\n\nlinear:\n    method 7 of H&F [1]_.\n    This method gives continuous results using:\n\n    * alpha = 1\n    * beta = 1\n\nmedian_unbiased:\n    method 8 of H&F [1]_.\n    This method is probably the best method if the sample\n    distribution function is unknown (see reference).\n    This method gives continuous results using:\n\n    * alpha = 1/3\n    * beta = 1/3\n\nnormal_unbiased:\n    method 9 of H&F [1]_.\n    This method is probably the best method if the sample\n    distribution function is known to be normal.\n    This method gives continuous results using:\n\n    * alpha = 3/8\n    * beta = 3/8\n\nlower:\n    NumPy method kept for backwards compatibility.\n    Takes ``i`` as the interpolation point.\n\nhigher:\n    NumPy method kept for backwards compatibility.\n    Takes ``j`` as the interpolation point.\n\nnearest:\n    NumPy method kept for backwards compatibility.\n    Takes ``i`` or ``j``, whichever is nearest.\n\nmidpoint:\n    NumPy method kept for backwards compatibility.\n    Uses ``(i + j) / 2``.\n\nExamples\n--------\n>>> a = np.array([[10, 7, 4], [3, 2, 1]])\n>>> a\narray([[10,  7,  4],\n       [ 3,  2,  1]])\n>>> np.quantile(a, 0.5)\n3.5\n>>> np.quantile(a, 0.5, axis=0)\narray([6.5, 4.5, 2.5])\n>>> np.quantile(a, 0.5, axis=1)\narray([7.,  2.])\n>>> np.quantile(a, 0.5, axis=1, keepdims=True)\narray([[7.],\n       [2.]])\n>>> m = np.quantile(a, 0.5, axis=0)\n>>> out = np.zeros_like(m)\n>>> np.quantile(a, 0.5, axis=0, out=out)\narray([6.5, 4.5, 2.5])\n>>> m\narray([6.5, 4.5, 2.5])\n>>> b = a.copy()\n>>> np.quantile(b, 0.5, axis=1, overwrite_input=True)\narray([7.,  2.])\n>>> assert not np.all(a == b)\n\nSee also `numpy.percentile` for a visualization of most methods.\n\nReferences\n----------\n.. [1] R. J. Hyndman and Y. Fan,\n   \"Sample quantiles in statistical packages,\"\n   The American Statistician, 50(4), pp. 361-365, 1996"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subClassOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#AtomicMethod"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#StatisticCalculationMethod"
  } ],
  "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasModule" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#FunctionBaseModule"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#StatisticCalculation",
  "@type" : [ "http://www.w3.org/2002/07/owl#Class" ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#StatisticCalculationMethod",
  "@type" : [ "http://www.w3.org/2002/07/owl#Class" ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#hasCentralTendencyMeasureMethod",
  "@type" : [ "http://www.w3.org/2002/07/owl#ObjectProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#CentralTendencyMeasure"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#Average"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#Median"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#hasStatisticCalculationMethod"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#hasDependencyMeasureMethod",
  "@type" : [ "http://www.w3.org/2002/07/owl#ObjectProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#DependencyMeasure"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#Corrcoef"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#Cov"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#hasStatisticCalculationMethod"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#hasParamAweights",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#Cov"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#hasParamAxis",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#Average"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#Median"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#Percentile"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#Quantile"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#int"
  }, {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#hasParamBias",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#Corrcoef"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#Cov"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#boolean"
  }, {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#hasParamDdof",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#Corrcoef"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#Cov"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#int"
  }, {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#hasParamDtype",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#Corrcoef"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#Cov"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#hasParamFweights",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#Cov"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#int"
  }, {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#hasParamInterpolation",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#Percentile"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#Quantile"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#hasParamKeepdims",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#Average"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#Median"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#Percentile"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#Quantile"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#boolean"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#hasParamM",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#Cov"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#hasParamMethod",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#Percentile"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#Quantile"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#hasParamOverwriteInput",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#Median"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#Percentile"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#Quantile"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#boolean"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#hasParamQ",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#Percentile"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#Quantile"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#float"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#hasParamReturned",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#Average"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#boolean"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#hasParamRowvar",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#Corrcoef"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#Cov"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#boolean"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#hasParamWeights",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#Average"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#hasParamX",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#Corrcoef"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#hasParamY",
  "@type" : [ "http://www.w3.org/2002/07/owl#DatatypeProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#Corrcoef"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#Cov"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "http://www.w3.org/2001/XMLSchema#string"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/ds_exeKGOntology.ttl#hasParameter"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#hasPositionMeasureMethod",
  "@type" : [ "http://www.w3.org/2002/07/owl#ObjectProperty" ],
  "http://www.w3.org/2000/01/rdf-schema#domain" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#PositionMeasure"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#range" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#Percentile"
  }, {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#Quantile"
  } ],
  "http://www.w3.org/2000/01/rdf-schema#subPropertyOf" : [ {
    "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#hasStatisticCalculationMethod"
  } ]
}, {
  "@id" : "https://raw.githubusercontent.com/nsai-uio/ExeKGOntology/main/stats_exeKGOntology.ttl#hasStatisticCalculationMethod",
  "@type" : [ "http://www.w3.org/2002/07/owl#ObjectProperty" ]
} ]